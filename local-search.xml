<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>集客交付学习计划</title>
    <link href="/2023/11/15/%E9%9B%86%E5%AE%A2%E4%BA%A4%E4%BB%98%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    <url>/2023/11/15/%E9%9B%86%E5%AE%A2%E4%BA%A4%E4%BB%98%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="集客交付学习计划"><a href="#集客交付学习计划" class="headerlink" title="集客交付学习计划"></a>集客交付学习计划</h1><ol><li>熟悉项目系统流程</li><li>熟悉DICT系统（尤其交付）</li><li>参加一个完整项目，了解项目中各种资源的安排配置</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux-surface配置</title>
    <link href="/2023/11/06/linux-surface%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/11/06/linux-surface%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<ol><li><p>导入 gpgkey<br>文章末尾附 gpgkey</p></li><li><p>检查验证指纹<br><code>sudo pacman-key --finger 56C464BAAC421453</code></p></li><li><p>本地导入 key<br><code>sudo pacman-key --lsign-key 56C464BAAC421453</code></p></li><li><p>添加仓库</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[linux-surface]</span><br><span class="hljs-attr">Server</span> = https://pkg.surfacelinux.com/arch/<br></code></pre></td></tr></table></figure></li><li><p>更新仓库并安装</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">sudo pacman -Syu<br>sudo pacman -S linux-<span class="hljs-built_in">surface</span> linux-<span class="hljs-built_in">surface</span>-headers iptsd<br></code></pre></td></tr></table></figure></li><li><p>特殊情况<br>对于<code>Surface Pro 4, 5, and 6, Book 1 and 2, Laptop 1 and 2</code>，需要安装附加硬件包才能使用 WIFI<br>sudo pacman -S linux-firmware-marvell</p></li></ol><p><strong>gpg key</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----BEGIN PGP PUBLIC KEY BLOCK-----<br><br>mQINBF4mFh4BEADLu7iRoKyoFSCt35hCzl4w9TmtTIaSB7oHsOAlU+PizbSGrnmb<br>svnu5/kEXCBu2L/vk6rKzoIbgBDOtNE+6WnDOAhzMcQIQ73laIDPxJA5qO/wgaeT<br>ifhO/JI62Lw48hDRpbYNKqZVabnJ5UZIoKRO13PjSQKl55hexuhdQhSi3nRl6vUE<br>uQLBVftZP2yn1oep7/weaRhabKHDpjXNkdA8m8lZhD7J95IuaS0COzpwhxUJtCW0<br>UE5qRxeOm6QT4yKRDq6PyAvXKHSORdKUxB492BOC7Gb6TABTLgV7mZnZvbuKHf+r<br>gMAuBcxodvB83O2UgaKtwX9JK8u6RkR9oo0pjhQWt/f4fej3uIxBgJW3ksZrexao<br>fCwT9p7XYsDZKm8yZO1lelZCg+nTWHEcc4G7tp+PxQxiOxXg2gkLdP7dOrOlynNW<br>BH6+7cPqhe1w5PonYOSQBae1kwFyI5pE+mxCeOUMWdyu9yWVPbsidXUnz3qH37Hs<br>0MTvn6s9CYTGnng/+JD+at2PFQTvqkh+9wIo0WKu9g+wUvyo5Ncp5B2FL8jsgTmR<br>HfKmNzoFNBXtpMJ5qfSEk9YqIGmGb3/pd3baePuDE8V9f3jvhD80Unn/LYQPkePi<br>UIzYRamoYb+DK/9kYncXO4vdsgwsSds+oSuYpjsYzmfdMC53BixbjF0T5wARAQAB<br>tA1saW51eC1zdXJmYWNliQJOBBMBCAA4FiEEh976SrlKmaTIwxElVsRkuqxCFFMF<br>Al4mFh4CGwMFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQVsRkuqxCFFOw2xAA<br>kc4iDI4zOY3AVwdJ0/Cg6z7XCOdXBZJ4gDtAuHhi9h7UiOzgw6Ey4rvNDHJ64Npg<br>gPtsG6jocZurOreldrZlc+egPx18wVI8ouuaeiKCO+q7wjs1thxH9I323r4V96ye<br>7jJ02p3a8nCs1fDjdn9SlP7Ig9axfOdEI5fBhyT1B2RstGEEGqN3ZmAOt8rLSgXd<br>PQi3VdrsEI4ljOTg6ygCBeNUKH+jJ48QRk7SsgX5rb3ZCF0c6sA4buy0Y4vyVW8S<br>Qg5VkPz8Oz4+Zm3W+CXawa4LVtzz5twFwWBjhaSnLsRXBZXAu1QU5aIcwsfeQLqX<br>X4NGtqIa/HV6lw1rA97qmVBq4PNY1QIMZ9xQSoSHDJ1aONhDON5jW0VK7iJr+g+A<br>0ot42X7OTeYi/lZL6aWVY/DG480eh07oxJyMt/BVoVqbruYsIDluwhP5YEGn9iNr<br>+V+Kfe7chZzyeqBDjewfHP9FlpNxNfdMa6Xr5nFFrec+wXx5y34/p6WXlukpjy/D<br>9i5fNCKAUxS74k41C7x2//jF/vFoMJhtDwIwYszp1TS9qfAnbygWZmHBAiB8FjBM<br>lMmlRcuTyb8bPuhur0CbhtLr+ZOA3yzb54YKgeNrJXU+L/mOLA/Axr6wKppcAcmm<br>xCEs7a07XWmNPiKLn5KQqjBdRYCEdIaBuRyay36ynAi5Ag0EXiYWHgEQALFXP2NX<br>46+2t4W82CClZ8tvw+4xLBXHbq4/ejwIJEdUtk/lRUUXEhERELxV/RIOP7R7PoKM<br>DKVcXAoOSx19ei6SkKBFKJlG8ocavbRXaScc8rtO1iotJggpq79X+t8u6N2SkxOQ<br>3ynuxS7aI1tOKChMwF9lgcvcG7YpXSLsZLwYgX/msUY0C4Qz3Rsb/74jZuKFeSwl<br>RcY1fix17+wnoldKlQlcK6sOLUtQ39fcUpd9ktEHQ+s1BhynLvyfEHDXZkZulUpr<br>63OSjP7gvN6PsF3iShu4fcpB6yWiiQQyCgKq5SlnE0glKbZwfbRWZ2zwYr7NbfPK<br>3yObvGqBtpIjWguS0mM80d3tkieHlmvqTljx5LiPBhosuCREdnH6GZ5Oa6n6T7m1<br>7996XphxcaER9i0fkMB1HfU7ECJjiIOXUVkgUt9rP7F70/EbzsZuBF+NzFoui0ma<br>u4UcW1f+4QnEldn94BOOGOtV/mqvk7kk/LXplPDgELsZYtpWHNht+9wOsZaT8dQU<br>sOsI1lKB83hsr3tkgyiWXRcP3561hJG1Vhqx19IKFKKmy3xUemonV2dshP5Kzqd3<br>W/FwLUuGWsI6fK0x7ak8G+Hy+AMKMcXblM/oSuMbgu3f/SXKnfvKurIc50QZQWky<br>97lWjwX6Ek8f1YvkSLuz37dRCEOOpp6UR6S7ABEBAAGJAjYEGAEIACAWIQSH3vpK<br>uUqZpMjDESVWxGS6rEIUUwUCXiYWHgIbDAAKCRBWxGS6rEIUU9OrD/9cNF7W1Lip<br>nH/vet4X1Z2mm1fN5iQ/r+jOyLmf9L6LXtAfjDla7oU+X0Kj8FxOZetaRWJfx+vb<br>yscCNHW6z8s6ai9HSa6D81g8xOmVya/ULx19WcDNgsyEpBiv6SKkm45GN/lByneX<br>paBhrOi9DWvz/c22GW69I7+DtLhVjJvGhkAfYF/RIn15KEsgfNk+/FBNK1dnmhHO<br>Vt2Szf33xkGv08SRgi/0dULPygGLXgrptrkzyfV7oMNhIjvO74ZF+hQt9YeFG1Yq<br>MqqmWIjnau7v8lvp7vIVeZvqO16e+swhcU2puaXagrKrB97mumQ68TC2FBkkwvM7<br>d15BqRKqaAv7WwBxXE/SGUywNip9oaEasho9odMXlf/XHKWh2XmCkccfFkejFemr<br>boSqNLs6mNPeo0k9msZl3ARLO8/mMPnX1WW6wZ8ApH3GE6/goZz44qZuomO+eBqW<br>xE5BNzuBLLJkg7rq8OoT1bMzoKd90+gZjJZzj+qM5bnaU81gGOtlA4s6cbRk5zu8<br>9iRRZoI5YBQAVzRJ49xOu0CGhzGfmrG/y28qxLHQgaovVjVbZgdjUdbVYJ3n3Iro<br>JdpouBPRoXr7cKjV74mCG2VX/LPSmRM4JizyZg2wKtIop9u+fcm8yxkTkOlGGTjL<br>JcYSQaEgtpWZ3OhD14QVf5museDuNdfluQ==<br>=06Jw<br>-----END PGP PUBLIC KEY BLOCK-----<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>-[linux]</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin控制流程</title>
    <link href="/2023/11/01/Kotlin05%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/11/01/Kotlin05%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><h3 id="If-表达式"><a href="#If-表达式" class="headerlink" title="If 表达式"></a>If 表达式</h3><p>在 Kotlin 中，<code>if</code> 是一个表达式：它会返回一个值。 因此就不需要三元运算符（<code>条件 ? 然后 : 否则</code>），因为普通的 <code>if</code> 就能胜任这个角色。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> a = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">val</span> b = <span class="hljs-number">3</span><br><br>    <span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">var</span> max = a<br>    <span class="hljs-keyword">if</span> (a &lt; b) max = b<br><br>    <span class="hljs-comment">// With else</span><br>    <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>      max = a<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      max = b<br>    &#125;<br><br>  <span class="hljs-comment">// 作为表达式</span><br> max = <span class="hljs-keyword">if</span> (a &gt; b) a <span class="hljs-keyword">else</span> b<br><br>    <span class="hljs-comment">// You can also use `else if` in expressions:</span><br>    <span class="hljs-keyword">val</span> maxLimit = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">val</span> maxOrLimit = <span class="hljs-keyword">if</span> (maxLimit &gt; a) maxLimit <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &gt; b) a <span class="hljs-keyword">else</span> b<br><br>    <span class="hljs-comment">//sampleEnd</span><br>    println(<span class="hljs-string">&quot;max is <span class="hljs-variable">$max</span>&quot;</span>)<br>    println(<span class="hljs-string">&quot;maxOrLimit is <span class="hljs-variable">$maxOrLimit</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>if</code> 表达式的分支可以是代码块，这种情况最后的表达式作为该块的值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> max = <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>    print(<span class="hljs-string">&quot;Choose a&quot;</span>)<br>    a<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    print(<span class="hljs-string">&quot;Choose b&quot;</span>)<br>    b<br>&#125;<br></code></pre></td></tr></table></figure><p>If you’re using <code>if</code> as an expression, for example, for returning its value or assigning it to a variable, the <code>else</code> branch is mandatory.</p><h3 id="When-表达式"><a href="#When-表达式" class="headerlink" title="When 表达式"></a>When 表达式</h3><p><code>when</code> defines a conditional expression with multiple branches. It is similar to the <code>switch</code> statement in C-like languages. Its simple form looks like this.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> (x) &#123;<br>    <span class="hljs-number">1</span> -&gt; print(<span class="hljs-string">&quot;x == 1&quot;</span>)<br>    <span class="hljs-number">2</span> -&gt; print(<span class="hljs-string">&quot;x == 2&quot;</span>)<br>    <span class="hljs-keyword">else</span> -&gt; &#123;<br>        print(<span class="hljs-string">&quot;x is neither 1 nor 2&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>when</code> 将它的参数与所有的分支条件顺序比较，直到某个分支满足条件。</p><p><code>when</code> 既可以作为表达式使用也可以作为语句使用。如果它被当做表达式， 第一个符合条件的分支的值就是整个表达式的值，如果当做语句使用， 则忽略个别分支的值。 类似于 <code>if</code>，每一个分支可以是一个代码块，它的值是块中最后的表达式的值。</p><p>如果其他分支都不满足条件将会求值 <code>else</code> 分支。 如果 <code>when</code> 作为一个<em>表达式</em>使用，那么必须有 <code>else</code> 分支， 除非编译器能够检测出所有的可能情况都已经覆盖了， 例如，对于 <a href="https://book.kotlincn.net/text/enum-classes.html">枚举（<code>enum</code>）类</a>条目与<a href="https://book.kotlincn.net/text/sealed-classes.html">密封（<code>sealed</code>）类</a>子类型〕。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bit</span> &#123;<br>    ZERO, ONE<br>&#125;<br><br><span class="hljs-keyword">val</span> numericValue = <span class="hljs-keyword">when</span> (getRandomBit()) &#123;<br>    Bit.ZERO -&gt; <span class="hljs-number">0</span><br>    Bit.ONE -&gt; <span class="hljs-number">1</span><br>    <span class="hljs-comment">// &#x27;else&#x27; is not required because all cases are covered</span><br>&#125;<br></code></pre></td></tr></table></figure><p>In <code>when</code> <em>statements</em>, the <code>else</code> branch is mandatory in the following conditions:</p><ul><li><code>when</code> has a subject of a <code>Boolean</code>, <a href="https://book.kotlincn.net/text/enum-classes.html"><code>enum</code></a>, or <a href="https://book.kotlincn.net/text/sealed-classes.html"><code>sealed</code></a> type, or their nullable counterparts.</li><li>branches of <code>when</code> don’t cover all possible cases for this subject.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> &#123;<br>    RED, GREEN, BLUE<br>&#125;<br><br><span class="hljs-keyword">when</span> (getColor()) &#123;  <br>    Color.RED -&gt; println(<span class="hljs-string">&quot;red&quot;</span>)<br>    Color.GREEN -&gt; println(<span class="hljs-string">&quot;green&quot;</span>)   <br>    Color.BLUE -&gt; println(<span class="hljs-string">&quot;blue&quot;</span>)<br>    <span class="hljs-comment">// &#x27;else&#x27; is not required because all cases are covered</span><br>&#125;<br><br><span class="hljs-keyword">when</span> (getColor()) &#123;<br>    Color.RED -&gt; println(<span class="hljs-string">&quot;red&quot;</span>) <span class="hljs-comment">// no branches for GREEN and BLUE</span><br>    <span class="hljs-keyword">else</span> -&gt; println(<span class="hljs-string">&quot;not red&quot;</span>) <span class="hljs-comment">// &#x27;else&#x27; is required</span><br>&#125;<br></code></pre></td></tr></table></figure><p>To define a common behavior for multiple cases, combine their conditions in a single line with a comma:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> (x) &#123;<br>    <span class="hljs-number">0</span>, <span class="hljs-number">1</span> -&gt; print(<span class="hljs-string">&quot;x == 0 or x == 1&quot;</span>)<br>    <span class="hljs-keyword">else</span> -&gt; print(<span class="hljs-string">&quot;otherwise&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以用任意表达式（而不只是常量）作为分支条件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> (x) &#123;<br>    s.toInt() -&gt; print(<span class="hljs-string">&quot;s encodes x&quot;</span>)<br>    <span class="hljs-keyword">else</span> -&gt; print(<span class="hljs-string">&quot;s does not encode x&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>还可以检测一个值在（<code>in</code>）或者不在（<code>!in</code>）一个<a href="https://book.kotlincn.net/text/ranges.html">区间</a>或者集合中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> (x) &#123;<br>    <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.10</span> -&gt; print(<span class="hljs-string">&quot;x is in the range&quot;</span>)<br>    <span class="hljs-keyword">in</span> validNumbers -&gt; print(<span class="hljs-string">&quot;x is valid&quot;</span>)<br>    !<span class="hljs-keyword">in</span> <span class="hljs-number">10.</span><span class="hljs-number">.20</span> -&gt; print(<span class="hljs-string">&quot;x is outside the range&quot;</span>)<br>    <span class="hljs-keyword">else</span> -&gt; print(<span class="hljs-string">&quot;none of the above&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种选择是检测一个值是（<code>is</code>）或者不是（<code>!is</code>）一个特定类型的值。注意： 由于<a href="https://book.kotlincn.net/text/typecasts.html#%E6%99%BA%E8%83%BD%E8%BD%AC%E6%8D%A2">智能转换</a>，你可以访问该类型的方法与属性而无需任何额外的检测。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hasPrefix</span><span class="hljs-params">(x: <span class="hljs-type">Any</span>)</span></span> = <span class="hljs-keyword">when</span>(x) &#123;<br>    <span class="hljs-keyword">is</span> String -&gt; x.startsWith(<span class="hljs-string">&quot;prefix&quot;</span>)<br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>when</code> 也可以用来取代 <code>if</code>-<code>else</code> <code>if</code> 链。 如果不提供参数，所有的分支条件都是简单的布尔表达式，而当一个分支的条件为真时则执行该分支：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> &#123;<br>    x.isOdd() -&gt; print(<span class="hljs-string">&quot;x is odd&quot;</span>)<br>    y.isEven() -&gt; print(<span class="hljs-string">&quot;y is even&quot;</span>)<br>    <span class="hljs-keyword">else</span> -&gt; print(<span class="hljs-string">&quot;x+y is odd&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用以下语法将 <em>when</em> 的主语（subject，译注：指 <code>when</code> 所判断的表达式）捕获到变量中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> Request.<span class="hljs-title">getBody</span><span class="hljs-params">()</span></span> =<br>    <span class="hljs-keyword">when</span> (<span class="hljs-keyword">val</span> response = executeRequest()) &#123;<br>        <span class="hljs-keyword">is</span> Success -&gt; response.body<br>        <span class="hljs-keyword">is</span> HttpError -&gt; <span class="hljs-keyword">throw</span> HttpException(response.status)<br>    &#125;<br></code></pre></td></tr></table></figure><p>在 <em>when</em> 主语中引入的变量的作用域仅限于 <em>when</em> 主体。</p><h3 id="For-循环"><a href="#For-循环" class="headerlink" title="For 循环"></a>For 循环</h3><p><code>for</code> 循环可以对任何提供迭代器（iterator）的对象进行遍历，这相当于像 C# 这样的语言中的 <code>foreach</code> 循环。 <code>for</code> 的语法如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> collection) print(item)<br></code></pre></td></tr></table></figure><p><code>for</code> 循环体可以是一个代码块。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> (item: <span class="hljs-built_in">Int</span> <span class="hljs-keyword">in</span> ints) &#123;<br>    <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如上所述，<code>for</code> 可以循环遍历任何提供了迭代器的对象。这意味着：</p><ul><li><p>有一个成员函数或者扩展函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">iterator</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>返回</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Iterator<span class="hljs-tag">&lt;&gt;</span><br></code></pre></td></tr></table></figure><p>：</p><ul><li>有一个成员函数或者扩展函数 <code>next()</code></li><li>有一个成员函数或者扩展函数 <code>hasNext()</code> 返回 <code>Boolean</code>。</li></ul></li></ul><p>这三个函数都需要标记为 <code>operator</code>。</p><p>如需在数字区间上迭代，请使用<a href="https://book.kotlincn.net/text/ranges.html">区间表达式</a>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.3</span>) &#123;<br>        println(i)<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">6</span> downTo <span class="hljs-number">0</span> step <span class="hljs-number">2</span>) &#123;<br>        println(i)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对区间或者数组的 <code>for</code> 循环会被编译为并不创建迭代器的基于索引的循环。</p><p>如果你想要通过索引遍历一个数组或者一个 list，你可以这么做：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">val</span> array = arrayOf(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> array.indices) &#123;<br>        println(array[i])<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或者你可以用库函数 <code>withIndex</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> array = arrayOf(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">for</span> ((index, value) <span class="hljs-keyword">in</span> array.withIndex()) &#123;<br>        println(<span class="hljs-string">&quot;the element at <span class="hljs-variable">$index</span> is <span class="hljs-variable">$value</span>&quot;</span>)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p><code>while</code> and <code>do-while</code> loops execute their body continuously while their condition is satisfied. The difference between them is the condition checking time:</p><ul><li><code>while</code> checks the condition and, if it’s satisfied, executes the body and then returns to the condition check.</li><li><code>do-while</code> executes the body and then checks the condition. If it’s satisfied, the loop repeats. So, the body of <code>do-while</code> executes at least once regardless of the condition.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>    x--<br>&#125;<br><br><span class="hljs-keyword">do</span> &#123;<br>  <span class="hljs-keyword">val</span> y = retrieveData()<br>&#125; <span class="hljs-keyword">while</span> (y != <span class="hljs-literal">null</span>) <span class="hljs-comment">// y 在此处可见</span><br></code></pre></td></tr></table></figure><h3 id="循环中的-break-与-continue"><a href="#循环中的-break-与-continue" class="headerlink" title="循环中的 break 与 continue"></a>循环中的 break 与 continue</h3><p>在循环中 Kotlin 支持传统的 <code>break</code> 与 <code>continue</code> 操作符。参见<a href="https://book.kotlincn.net/text/returns.html">返回与跳转</a>。</p><h2 id="返回与跳转"><a href="#返回与跳转" class="headerlink" title="返回与跳转"></a>返回与跳转</h2><p>Kotlin 有三种结构化跳转表达式：</p><ul><li><code>return</code> 默认从最直接包围它的函数或者<a href="https://book.kotlincn.net/text/lambdas.html#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">匿名函数</a>返回。</li><li><code>break</code> 终止最直接包围它的循环。</li><li><code>continue</code> 继续下一次最直接包围它的循环。</li></ul><p>所有这些表达式都可以用作更大表达式的一部分：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> s = person.name ?: <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>这些表达式的类型是 <a href="https://book.kotlincn.net/text/exceptions.html#nothing-%E7%B1%BB%E5%9E%8B">Nothing 类型</a>。</p><h3 id="Break-与-Continue-标签"><a href="#Break-与-Continue-标签" class="headerlink" title="Break 与 Continue 标签"></a>Break 与 Continue 标签</h3><p>在 Kotlin 中任何表达式都可以用标签来标记。 标签的格式为标识符后跟 <code>@</code> 符号，例如：<code>abc@</code>、<code>fooBar@</code>。 要为一个表达式加标签，我们只要在其前加标签即可。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-symbol">loop@</span> <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.100</span>) &#123;<br>    <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们可以用标签限定 <code>break</code> 或者 <code>continue</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-symbol">loop@</span> <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.100</span>) &#123;<br>    <span class="hljs-keyword">for</span> (j <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.100</span>) &#123;<br>        <span class="hljs-keyword">if</span> (……) <span class="hljs-keyword">break</span><span class="hljs-symbol">@loop</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>标签限定的 <code>break</code> 跳转到刚好位于该标签指定的循环后面的执行点。 <code>continue</code> 继续标签指定的循环的下一次迭代。</p><h3 id="返回到标签"><a href="#返回到标签" class="headerlink" title="返回到标签"></a>返回到标签</h3><p>Kotlin 中函数可以使用函数字面量、局部函数与对象表达式实现嵌套。 标签限定的 <code>return</code> 允许我们从外层函数返回。 最重要的一个用途就是从 lambda 表达式中返回。回想一下我们这么写的时候， 这个 <code>return</code> 表达式从最直接包围它的函数——<code>foo</code> 中返回：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>    listOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>).forEach &#123;<br>        <span class="hljs-keyword">if</span> (it == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> <span class="hljs-comment">// 非局部直接返回到 foo() 的调用者</span><br>        print(it)<br>    &#125;<br>    println(<span class="hljs-string">&quot;this point is unreachable&quot;</span>)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    foo()<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，这种非局部的返回只支持传给<a href="https://book.kotlincn.net/text/inline-functions.html">内联函数</a>的 lambda 表达式。 如需从 lambda 表达式中返回，可给它加标签并用以限定 <code>return</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>    listOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>).forEach <span class="hljs-symbol">lit@</span>&#123;<br>        <span class="hljs-keyword">if</span> (it == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span><span class="hljs-symbol">@lit</span> <span class="hljs-comment">// 局部返回到该 lambda 表达式的调用者——forEach 循环</span><br>        print(it)<br>    &#125;<br>    print(<span class="hljs-string">&quot; done with explicit label&quot;</span>)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    foo()<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，它只会从 lambda 表达式中返回。通常情况下使用<em>隐式标签</em>更方便，因为该标签与接受该 lambda 的函数同名。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>    listOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>).forEach &#123;<br>        <span class="hljs-keyword">if</span> (it == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span><span class="hljs-symbol">@forEach</span> <span class="hljs-comment">// 局部返回到该 lambda 表达式的调用者——forEach 循环</span><br>        print(it)<br>    &#125;<br>    print(<span class="hljs-string">&quot; done with implicit label&quot;</span>)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    foo()<br>&#125;<br></code></pre></td></tr></table></figure><p>或者，我们用一个<a href="https://book.kotlincn.net/text/lambdas.html#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">匿名函数</a>替代 lambda 表达式。 匿名函数内部的 <code>return</code> 语句将从该匿名函数自身返回</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>    listOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>).forEach(<span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(value: <span class="hljs-type">Int</span>)</span></span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span>  <span class="hljs-comment">// 局部返回到匿名函数的调用者——forEach 循环</span><br>        print(value)<br>    &#125;)<br>    print(<span class="hljs-string">&quot; done with anonymous function&quot;</span>)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    foo()<br>&#125;<br></code></pre></td></tr></table></figure><p>请注意，前文三个示例中使用的局部返回类似于在常规循环中使用 <code>continue</code>。</p><p>并没有 <code>break</code> 的直接等价形式，不过可以通过增加另一层嵌套 lambda 表达式并从其中非局部返回来模拟：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>    run <span class="hljs-symbol">loop@</span>&#123;<br>        listOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>).forEach &#123;<br>            <span class="hljs-keyword">if</span> (it == <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span><span class="hljs-symbol">@loop</span> <span class="hljs-comment">// 从传入 run 的 lambda 表达式非局部返回</span><br>            print(it)<br>        &#125;<br>    &#125;<br>    print(<span class="hljs-string">&quot; done with nested loop&quot;</span>)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    foo()<br>&#125;<br></code></pre></td></tr></table></figure><p>当要返一个回值的时候，解析器优先选用标签限定的返回：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span><span class="hljs-symbol">@a</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这意味着“返回 <code>1</code> 到 <code>@a</code>”，而不是“返回一个标签标注的表达式 <code>(@a 1)</code>”。</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h3><p>Kotlin 中所有异常类继承自 <code>Throwable</code> 类。 每个异常都有消息、堆栈回溯信息以及可选的原因。</p><p>使用 <code>throw</code> 表达式来抛出异常：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">throw</span> Exception(<span class="hljs-string">&quot;Hi There!&quot;</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>try</code>……<code>catch</code> 表达式来捕获异常：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 一些代码</span><br>&#125; <span class="hljs-keyword">catch</span> (e: SomeException) &#123;<br>    <span class="hljs-comment">// 处理程序</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 可选的 finally 块</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以有零到多个 <code>catch</code> 块，<code>finally</code> 块可以省略。 但是 <code>catch</code> 与 <code>finally</code> 块至少需有一个。</p><h4 id="Try-是一个表达式"><a href="#Try-是一个表达式" class="headerlink" title="Try 是一个表达式"></a>Try 是一个表达式</h4><p><code>try</code> 是一个表达式，意味着它可以有一个返回值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span>? = <span class="hljs-keyword">try</span> &#123; input.toInt() &#125; <span class="hljs-keyword">catch</span> (e: NumberFormatException) &#123; <span class="hljs-literal">null</span> &#125;<br></code></pre></td></tr></table></figure><p><code>try</code>-表达式的返回值是 <code>try</code> 块中的最后一个表达式或者是（所有）<code>catch</code> 块中的最后一个表达式。 <code>finally</code> 块中的内容不会影响表达式的结果。</p><h3 id="受检异常"><a href="#受检异常" class="headerlink" title="受检异常"></a>受检异常</h3><p>Kotlin 没有受检异常。这其中有很多原因，但我们会提供一个简单的示例 that illustrates why it is the case。</p><p>以下是 JDK 中 <code>StringBuilder</code> 类实现的一个示例接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Appendable <span class="hljs-title function_">append</span><span class="hljs-params">(CharSequence csq)</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure><p>这个签名是说，每次我追加一个字符串到一些东西（一个 <code>StringBuilder</code>、某种日志、一个控制台等）上时，我就必须捕获 <code>IOException</code>。 为什么？因为相应实现可能正在执行 IO 操作（<code>Writer</code> 也实现了 <code>Appendable</code>）。 其结果是这种代码随处可见：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">try</span> &#123;<br>    log.append(message)<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    <span class="hljs-comment">// 必须要安全</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这并不好，看看<a href="https://www.oracle.com/technetwork/java/effectivejava-136174.html">《Effective Java》第三版</a> 第 77 条：<em>不要忽略异常</em> 就知道了。</p><p>Bruce Eckel says this about checked exceptions:</p><blockquote><p>通过一些小程序测试得出的结论是异常规范会同时提高开发者的生产力与代码质量，但是大型软件项目的经验表明一个不同的结论——生产力降低、代码质量很少或没有提高。</p></blockquote><p>And here are some additional thoughts on the matter:</p><ul><li><a href="https://radio-weblogs.com/0122027/stories/2003/04/01/JavasCheckedExceptionsWereAMistake.html">《Java 的受检异常是一个错误》（Java’s checked exceptions were a mistake）</a>（Rod Waldhoff）</li><li><a href="https://www.artima.com/intv/handcuffs.html">《受检异常的烦恼》（The Trouble with Checked Exceptions）</a>（Anders Hejlsberg）</li></ul><p>If you want to alert callers about possible exceptions when calling Kotlin code from Java, Swift, or Objective-C, you can use the <code>@Throws</code> annotation. Read more about using this annotation <a href="https://book.kotlincn.net/text/java-to-kotlin-interop.html#%E5%8F%97%E6%A3%80%E5%BC%82%E5%B8%B8">for Java</a> and <a href="https://book.kotlincn.net/text/native-objc-interop.html#errors-and-exceptions">for Swift and Objective-C</a>.</p><h3 id="Nothing-类型"><a href="#Nothing-类型" class="headerlink" title="Nothing 类型"></a>Nothing 类型</h3><p>在 Kotlin 中 <code>throw</code> 是表达式，所以你可以使用它（比如）作为 Elvis 表达式的一部分：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> s = person.name ?: <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">&quot;Name required&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>throw</code> 表达式的类型是 <code>Nothing</code> 类型。 这个类型没有值，而是用于标记永远不能达到的代码位置。 在你自己的代码中，你可以使用 <code>Nothing</code> 来标记一个永远不会返回的函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fail</span><span class="hljs-params">(message: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Nothing</span> &#123;<br>    <span class="hljs-keyword">throw</span> IllegalArgumentException(message)<br>&#125;<br></code></pre></td></tr></table></figure><p>当你调用该函数时，编译器会知道在该调用后就不再继续执行了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> s = person.name ?: fail(<span class="hljs-string">&quot;Name required&quot;</span>)<br>println(s)     <span class="hljs-comment">// 在此已知“s”已初始化</span><br></code></pre></td></tr></table></figure><p>当处理类型推断时还可能会遇到这个类型。这个类型的可空变体 <code>Nothing?</code> 有一个可能的值是 <code>null</code>。如果用 <code>null</code> 来初始化一个要推断类型的值，而又没有其他信息可用于确定更具体的类型时，编译器会推断出 <code>Nothing?</code> 类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> x = <span class="hljs-literal">null</span>           <span class="hljs-comment">// “x”具有类型 `Nothing?`</span><br><span class="hljs-keyword">val</span> l = listOf(<span class="hljs-literal">null</span>)   <span class="hljs-comment">// “l”具有类型 `List&lt;Nothing?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Java-互操作性"><a href="#Java-互操作性" class="headerlink" title="Java 互操作性"></a>Java 互操作性</h3><p>与 Java 互操作性相关的信息，请参见 <a href="https://book.kotlincn.net/text/java-interop.html">Java 互操作性章节</a>中的异常部分。</p>]]></content>
    
    
    <categories>
      
      <category>Kotlin学习笔记</category>
      
      <category>Kotlin概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin类型</title>
    <link href="/2023/11/01/Kotlin04%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/11/01/Kotlin04%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>在 Kotlin 中，所有东西都是对象，在这个意义上讲可以在任何变量上调用成员函数与属性。 一些类型可以有特殊的内部表示——例如，数字、字符以及布尔可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p>Kotlin 提供了一组表示数字的内置类型。 对于整数，有四种不同大小的类型，因此值的范围也不同：</p><table><thead><tr><th>类型</th><th>大小（比特数）</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td><code>Byte</code></td><td>8</td><td>-128</td><td>127</td></tr><tr><td><code>Short</code></td><td>16</td><td>-32768</td><td>32767</td></tr><tr><td><code>Int</code></td><td>32</td><td>-2,147,483,648 (-231)</td><td>2,147,483,647 (231 - 1)</td></tr><tr><td><code>Long</code></td><td>64</td><td>-9,223,372,036,854,775,808 (-263)</td><td>9,223,372,036,854,775,807 (263 - 1)</td></tr></tbody></table><p>当初始化一个没有显式指定类型的变量时，编译器会自动推断为自 <code>Int</code> 起足以表示该值的最小类型。 如果不超过 <code>Int</code> 的表示范围，那么类型是 <code>Int</code>。 如果超过了，那么类型是 <code>Long</code>。 如需显式指定 <code>Long</code> 值，请给该值追加后缀 <code>L</code>。 显式指定类型会触发编译器检测该值是否超出指定类型的表示范围。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> one = <span class="hljs-number">1</span> <span class="hljs-comment">// Int</span><br><span class="hljs-keyword">val</span> threeBillion = <span class="hljs-number">3000000000</span> <span class="hljs-comment">// Long</span><br><span class="hljs-keyword">val</span> oneLong = <span class="hljs-number">1L</span> <span class="hljs-comment">// Long</span><br><span class="hljs-keyword">val</span> oneByte: <span class="hljs-built_in">Byte</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>除了整数类型之外，Kotlin 还提供无符号整数类型。 更多信息请参见<a href="https://book.kotlincn.net/text/unsigned-integer-types.html">无符号整数类型</a>。</p><p><svg width="24" height="24" fill="rgba(25,25,28,0.7)" viewBox="0 0 24 24"><circle cx="12.042" cy="4" r="2"></circle><path d="M18.339 7a6.982 6.982 0 0 0-6.3 4 6.982 6.982 0 0 0-6.3-4H3v10h2.739a6.983 6.983 0 0 1 6.3 4 6.582 6.582 0 0 1 6-4.033h2.994L21 7z"></path></svg></p></blockquote><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><p>对于实数，Kotlin 提供了浮点类型 <code>Float</code> 与 <code>Double</code> 类型，遵循 <a href="https://zh.wikipedia.org/wiki/IEEE_754">IEEE 754 标准</a>。 <code>Float</code> 表达 IEEE 754 <em>单精度</em>，而 <code>Double</code> 表达<em>双精度</em>。</p><p>这两个类型的大小不同，并为两种不同精度的浮点数提供存储：</p><table><thead><tr><th>类型</th><th>大小（比特数）</th><th>有效数字比特数</th><th>指数比特数</th><th>十进制位数</th></tr></thead><tbody><tr><td><code>Float</code></td><td>32</td><td>24</td><td>8</td><td>6-7</td></tr><tr><td><code>Double</code></td><td>64</td><td>53</td><td>11</td><td>15-16</td></tr></tbody></table><p>可以使用带小数部分的数字初始化 <code>Double</code> 与 <code>Float</code> 变量。 小数部分与整数部分之间用句点（<code>.</code>）分隔 对于以小数初始化的变量，编译器会推断为 <code>Double</code> 类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> pi = <span class="hljs-number">3.14</span> <span class="hljs-comment">// Double</span><br><span class="hljs-comment">// val one: Double = 1 // 错误：类型不匹配</span><br><span class="hljs-keyword">val</span> oneDouble = <span class="hljs-number">1.0</span> <span class="hljs-comment">// Double</span><br></code></pre></td></tr></table></figure><p>如需将一个值显式指定为 <code>Float</code> 类型，请添加 <code>f</code> 或 <code>F</code> 后缀。 如果这样的值包含多于 6～7 位十进制数，那么会将其舍入：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> e = <span class="hljs-number">2.7182818284</span> <span class="hljs-comment">// Double</span><br><span class="hljs-keyword">val</span> eFloat = <span class="hljs-number">2.7182818284f</span> <span class="hljs-comment">// Float，实际值为 2.7182817</span><br></code></pre></td></tr></table></figure><p>与一些其他语言不同，Kotlin 中的数字没有隐式拓宽转换。 例如，具有 <code>Double</code> 参数的函数只能对 <code>Double</code> 值调用，而不能对 <code>Float</code>、 <code>Int</code> 或者其他数字值调用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printDouble</span><span class="hljs-params">(d: <span class="hljs-type">Double</span>)</span></span> &#123; print(d) &#125;<br><br>    <span class="hljs-keyword">val</span> i = <span class="hljs-number">1</span>    <br>    <span class="hljs-keyword">val</span> d = <span class="hljs-number">1.0</span><br>    <span class="hljs-keyword">val</span> f = <span class="hljs-number">1.0f</span> <br><br>    printDouble(d)<br><span class="hljs-comment">//    printDouble(i) // 错误：类型不匹配</span><br><span class="hljs-comment">//    printDouble(f) // 错误：类型不匹配</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如需将数值转换为不同的类型，请使用<a href="https://book.kotlincn.net/text/numbers.html#%E6%98%BE%E5%BC%8F%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2">显式转换</a>。</p><h4 id="数字字面常量"><a href="#数字字面常量" class="headerlink" title="数字字面常量"></a>数字字面常量</h4><p>数值常量字面值有以下几种:</p><ul><li><p>十进制:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">123<br></code></pre></td></tr></table></figure><ul><li>Long 类型用大写 <code>L</code> 标记: <code>123L</code></li></ul></li><li><p>十六进制: <code>0x0F</code></p></li><li><p>二进制: <code>0b00001011</code></p></li></ul><blockquote><p>Kotlin 不支持八进制。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><p>Kotlin 同样支持浮点数的常规表示方法:</p><ul><li>默认 double：<code>123.5</code>、<code>123.5e10</code></li><li>Float 用 <code>f</code> 或者 <code>F</code> 标记: <code>123.5f</code></li></ul><p>你可以使用下划线使数字常量更易读：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> oneMillion = <span class="hljs-number">1_000_000</span><br><span class="hljs-keyword">val</span> creditCardNumber = <span class="hljs-number">1234_5678_9012_3456L</span><br><span class="hljs-keyword">val</span> socialSecurityNumber = <span class="hljs-number">999_99_9999L</span><br><span class="hljs-keyword">val</span> hexBytes = <span class="hljs-number">0xFF_EC_DE_5E</span><br><span class="hljs-keyword">val</span> bytes = <span class="hljs-number">0b11010010_01101001_10010100_10010010</span><br></code></pre></td></tr></table></figure><blockquote><p>无符号整数字面值也有特殊标记。<br>更多内容请参阅<a href="https://book.kotlincn.net/text/unsigned-integer-types.html">无符号整型字面值</a>。</p><p><svg width="24" height="24" fill="rgba(25,25,28,0.7)" viewBox="0 0 24 24"><circle cx="12.042" cy="4" r="2"></circle><path d="M18.339 7a6.982 6.982 0 0 0-6.3 4 6.982 6.982 0 0 0-6.3-4H3v10h2.739a6.983 6.983 0 0 1 6.3 4 6.582 6.582 0 0 1 6-4.033h2.994L21 7z"></path></svg></p></blockquote><h4 id="JVM-平台的数字表示"><a href="#JVM-平台的数字表示" class="headerlink" title="JVM 平台的数字表示"></a>JVM 平台的数字表示</h4><p>在 JVM 平台数字存储为原生类型 <code>int</code>、 <code>double</code> 等。 例外情况是当创建可空数字引用如 <code>Int?</code> 或者使用泛型时。 在这些场景中，数字会装箱为 Java 类 <code>Integer</code>、 <code>Double</code> 等。</p><p>对相同数字的可为空引用可能会引用不同的对象：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span> = <span class="hljs-number">100</span><br>    <span class="hljs-keyword">val</span> boxedA: <span class="hljs-built_in">Int</span>? = a<br>    <span class="hljs-keyword">val</span> anotherBoxedA: <span class="hljs-built_in">Int</span>? = a<br><br>    <span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Int</span> = <span class="hljs-number">10000</span><br>    <span class="hljs-keyword">val</span> boxedB: <span class="hljs-built_in">Int</span>? = b<br>    <span class="hljs-keyword">val</span> anotherBoxedB: <span class="hljs-built_in">Int</span>? = b<br><br>    println(boxedA === anotherBoxedA) <span class="hljs-comment">// true</span><br>    println(boxedB === anotherBoxedB) <span class="hljs-comment">// false</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>由于 JVM 对 <code>-128</code> 到 <code>127</code> 的整数（<code>Integer</code>）应用了内存优化，因此，<code>a</code> 的所有可空引用实际上都是同一对象。但是没有对 <code>b</code> 应用内存优化，所以它们是不同对象。</p><p>另一方面，它们仍然相等:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Int</span> = <span class="hljs-number">10000</span><br>    println(b == b) <span class="hljs-comment">// 输出“true”</span><br>    <span class="hljs-keyword">val</span> boxedB: <span class="hljs-built_in">Int</span>? = b<br>    <span class="hljs-keyword">val</span> anotherBoxedB: <span class="hljs-built_in">Int</span>? = b<br>    println(boxedB == anotherBoxedB) <span class="hljs-comment">// 输出“true”</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="显式数字转换"><a href="#显式数字转换" class="headerlink" title="显式数字转换"></a>显式数字转换</h4><p>由于不同的表示方式，较小类型并<em>不是</em>较大类型的子类型。 如果它们是的话，就会出现下述问题：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 假想的代码，实际上并不能编译：</span><br><span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span>? = <span class="hljs-number">1</span> <span class="hljs-comment">// 一个装箱的 Int (java.lang.Integer)</span><br><span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Long</span>? = a <span class="hljs-comment">// 隐式转换产生一个装箱的 Long (java.lang.Long)</span><br>print(b == a) <span class="hljs-comment">// 惊！这将输出“false”鉴于 Long 的 equals() 会检测另一个是否也为 Long</span><br></code></pre></td></tr></table></figure><p>所以会悄无声息地失去相等性，更别说同一性了。</p><p>因此较小的类型<em><strong>不能</strong> 隐式转换</em>为较大的类型。 这意味着把 <code>Byte</code> 型值赋给一个 <code>Int</code> 变量必须显式转换：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Byte</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// OK, 字面值会静态检测</span><br>    <span class="hljs-comment">// val i: Int = b // 错误</span><br>    <span class="hljs-keyword">val</span> i1: <span class="hljs-built_in">Int</span> = b.toInt()<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>所有数字类型都支持转换为其他类型：</p><ul><li><code>toByte(): Byte</code></li><li><code>toShort(): Short</code></li><li><code>toInt(): Int</code></li><li><code>toLong(): Long</code></li><li><code>toFloat(): Float</code></li><li><code>toDouble(): Double</code></li></ul><p>很多情况都不需要显式类型转换，因为类型会从上下文推断出来， 而算术运算会有重载做适当转换，例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> l = <span class="hljs-number">1L</span> + <span class="hljs-number">3</span> <span class="hljs-comment">// Long + Int =&gt; Long</span><br></code></pre></td></tr></table></figure><h4 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h4><p>Kotlin支持数字运算的标准集：<code>+</code>、 <code>-</code>、 <code>*</code>、 <code>/</code>、 <code>%</code>。它们已定义为相应的类成员：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    println(<span class="hljs-number">1</span> + <span class="hljs-number">2</span>)<br>    println(<span class="hljs-number">2_500_000_000L</span> - <span class="hljs-number">1L</span>)<br>    println(<span class="hljs-number">3.14</span> * <span class="hljs-number">2.71</span>)<br>    println(<span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还可以为自定义类覆盖这些操作符。详情请参见<a href="https://book.kotlincn.net/text/operator-overloading.html">操作符重载</a>。</p><h5 id="整数除法"><a href="#整数除法" class="headerlink" title="整数除法"></a>整数除法</h5><p>整数间的除法总是返回整数。会丢弃任何小数部分。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> x = <span class="hljs-number">5</span> / <span class="hljs-number">2</span><br>    <span class="hljs-comment">//println(x == 2.5) // ERROR: Operator &#x27;==&#x27; cannot be applied to &#x27;Int&#x27; and &#x27;Double&#x27;</span><br>    println(x == <span class="hljs-number">2</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对于任何两个整数类型之间的除法来说都是如此：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> x = <span class="hljs-number">5L</span> / <span class="hljs-number">2</span><br>    println(x == <span class="hljs-number">2L</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如需返回浮点类型，请将其中的一个参数显式转换为浮点类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> x = <span class="hljs-number">5</span> / <span class="hljs-number">2.</span>toDouble()<br>    println(x == <span class="hljs-number">2.5</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h5><p>Kotlin 对整数提供了一组<em>位运算</em>。它们直接使用数字的比特表示在二进制级别进行操作。 位运算有可以通过中缀形式调用的函数表示。只能应用于 <code>Int</code> 与 <code>Long</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> x = (<span class="hljs-number">1</span> shl <span class="hljs-number">2</span>) and <span class="hljs-number">0x000FF000</span><br></code></pre></td></tr></table></figure><p>这是完整的位运算列表：</p><ul><li><code>shl(bits)</code> – 有符号左移</li><li><code>shr(bits)</code> – 有符号右移</li><li><code>ushr(bits)</code> – 无符号右移</li><li><code>and(bits)</code> – 位<strong>与</strong></li><li><code>or(bits)</code> – 位<strong>或</strong></li><li><code>xor(bits)</code> – 位<strong>异或</strong></li><li><code>inv()</code> – 位非</li></ul><h5 id="浮点数比较"><a href="#浮点数比较" class="headerlink" title="浮点数比较"></a>浮点数比较</h5><p>本节讨论的浮点数操作如下：</p><ul><li>相等性检测：<code>a == b</code> 与 <code>a != b</code></li><li>比较操作符：<code>a &lt; b</code>、 <code>a &gt; b</code>、 <code>a &lt;= b</code>、 <code>a &gt;= b</code></li><li>区间实例以及区间检测：<code>a..b</code>、 <code>x in a..b</code>、 <code>x !in a..b</code></li></ul><p>当其中的操作数 <code>a</code> 与 <code>b</code> 都是静态已知的 <code>Float</code> 或 <code>Double</code> 或者它们对应的可空类型（声明为该类型，或者推断为该类型，或者<a href="https://book.kotlincn.net/text/typecasts.html#%E6%99%BA%E8%83%BD%E8%BD%AC%E6%8D%A2">智能类型转换</a>的结果是该类型），两数字所形成的操作或者区间遵循 <a href="https://zh.wikipedia.org/wiki/IEEE_754">IEEE 754 浮点运算标准</a>。</p><p>然而，为了支持泛型场景并提供全序支持，对于<strong>并非</strong>静态类型就是浮点数的情况，行为是不同的。例如是 <code>Any</code>、 <code>Comparable&lt;...&gt;</code> 或者 <code>Collection&lt;T&gt;</code> 类型。 这种情况下，这些操作使用为 <code>Float</code> 与 <code>Double</code> 实现的 <code>equals</code> 与 <code>compareTo</code>。 因此：</p><ul><li>认为 <code>NaN</code> 与其自身相等</li><li>认为 <code>NaN</code> 比包括正无穷大（<code>POSITIVE_INFINITY</code>）在内的任何其他元素都大</li><li>认为 <code>-0.0</code> 小于 <code>0.0</code></li></ul><p>以下示例显示了静态类型作为浮点数 （<code>Double.NaN</code>）的操作数与静态类型<strong>并非</strong>作为浮点数的操作数（<code>listOf(T)</code>）之间的行为差异。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-comment">// 静态类型作为浮点数的操作数</span><br>    println(<span class="hljs-built_in">Double</span>.NaN == <span class="hljs-built_in">Double</span>.NaN)                 <span class="hljs-comment">// false</span><br>    <span class="hljs-comment">// 静态类型并非作为浮点数的操作数</span><br>    <span class="hljs-comment">// 所以 NaN 等于它本身</span><br>    println(listOf(<span class="hljs-built_in">Double</span>.NaN) == listOf(<span class="hljs-built_in">Double</span>.NaN)) <span class="hljs-comment">// true</span><br><br>    <span class="hljs-comment">// 静态类型作为浮点数的操作数</span><br>    println(<span class="hljs-number">0.0</span> == -<span class="hljs-number">0.0</span>)                              <span class="hljs-comment">// true</span><br>    <span class="hljs-comment">// 静态类型并非作为浮点数的操作数</span><br>    <span class="hljs-comment">// 所以 -0.0 小于 0.0</span><br>    println(listOf(<span class="hljs-number">0.0</span>) == listOf(-<span class="hljs-number">0.0</span>))              <span class="hljs-comment">// false</span><br><br>    println(listOf(<span class="hljs-built_in">Double</span>.NaN, <span class="hljs-built_in">Double</span>.POSITIVE_INFINITY, <span class="hljs-number">0.0</span>, -<span class="hljs-number">0.0</span>).sorted())<br>    <span class="hljs-comment">// [-0.0, 0.0, Infinity, NaN]</span><br>    <span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><p><code>Boolean</code> 类型表示可以有 <code>true</code> 与 <code>false</code> 两个值的布尔对象。</p><p><code>Boolean</code> 的可空版 <code>Boolean?</code> 还有 <code>null</code> 值。</p><p>布尔值的内置运算有：</p><ul><li><code>||</code>——析取（逻辑<em>或</em>）</li><li><code>&amp;&amp;</code>——合取（逻辑<em>与</em>）</li><li><code>!</code>——否定（逻辑<em>非</em>）</li></ul><p><code>||</code> 与 <code>&amp;&amp;</code> 都是惰性（短路）的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> myTrue: <span class="hljs-built_in">Boolean</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">val</span> myFalse: <span class="hljs-built_in">Boolean</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">val</span> boolNull: <span class="hljs-built_in">Boolean</span>? = <span class="hljs-literal">null</span><br><br>    println(myTrue || myFalse)<br>    println(myTrue &amp;&amp; myFalse)<br>    println(!myTrue)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>JVM 平台</strong>： 布尔对象的可空引用会装箱，类似于<a href="https://book.kotlincn.net/text/numbers.html#jvm-%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%95%B0%E5%AD%97%E8%A1%A8%E7%A4%BA">数字</a>。</p></blockquote><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p>字符用 <code>Char</code> 类型表示。 字符字面值用单引号括起来: <code>&#39;1&#39;</code>。</p><p>特殊字符可以以转义反斜杠 <code>\</code> 开始。 支持这几个转义序列：</p><ul><li><code>\t</code>——制表符</li><li><code>\b</code>——退格符</li><li><code>\n</code>——换行（LF）</li><li><code>\r</code>——回车（CR）</li><li><code>\&#39;</code>——单引号</li><li><code>\&quot;</code>——双引号</li><li><code>\\</code>——反斜杠</li><li><code>\$</code>——美元符</li></ul><p>编码其他字符要用 Unicode 转义序列语法：<code>&#39;\uFF00&#39;</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> aChar: <span class="hljs-built_in">Char</span> = <span class="hljs-string">&#x27;a&#x27;</span><br><br>    println(aChar)<br>    println(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 输出一个额外的换行符</span><br>    println(<span class="hljs-string">&#x27;\uFF00&#x27;</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果字符变量的值是数字，那么可以使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html"><code>digitToInt()</code></a> 函数将其显式转换为 <code>Int</code> 数字。</p><blockquote><p><strong>JVM 平台</strong>： 与<a href="https://book.kotlincn.net/text/numbers.html#jvm-%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%95%B0%E5%AD%97%E8%A1%A8%E7%A4%BA">数字</a>一样，当需要可空引用时会将字符装箱。 装箱操作不保留同一性。</p></blockquote><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>Kotlin 中字符串用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/"><code>String</code></a> 类型表示。 通常，字符串值是双引号（<code>&quot;</code>）中的字符序列：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;abcd 123&quot;</span><br></code></pre></td></tr></table></figure><p>字符串的元素——字符可以使用索引运算符访问: <code>s[i]</code>。 可以使用 <code>for</code> 循环遍历这些字符：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;abcd&quot;</span><br><span class="hljs-comment">//sampleStart</span><br><span class="hljs-keyword">for</span> (c <span class="hljs-keyword">in</span> str) &#123;<br>    println(c)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>字符串是不可变的。 一旦初始化了一个字符串，就不能改变它的值或者给它赋新值。 所有转换字符串的操作都以一个新的 <code>String</code> 对象来返回结果，而保持原始字符串不变：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;abcd&quot;</span><br>    println(str.uppercase()) <span class="hljs-comment">// 创建并输出一个新的 String 对象</span><br>    println(str) <span class="hljs-comment">// 原始字符串保持不变</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如需连接字符串，可以用 <code>+</code> 操作符。这也适用于连接字符串与其他类型的值， 只要表达式中的第一个元素是字符串：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br><span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">1</span><br>println(s + <span class="hljs-string">&quot;def&quot;</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在大多数情况下，优先使用<a href="https://book.kotlincn.net/text/strings.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF">字符串模板</a>或<a href="https://book.kotlincn.net/text/strings.html#%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2">多行字符串</a>而不是字符串连接。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><h2 id="字符串字面值"><a href="#字符串字面值" class="headerlink" title="字符串字面值"></a>字符串字面值</h2><p>Kotlin 有两种类型的字符串字面值:</p><ul><li><a href="https://book.kotlincn.net/text/strings.html#%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%B2">转义字符串</a></li><li><a href="https://book.kotlincn.net/text/strings.html#%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2">多行字符串</a></li></ul><h3 id="转义字符串"><a href="#转义字符串" class="headerlink" title="转义字符串"></a>转义字符串</h3><p><em>转义字符串</em>可以包含转义字符。<br>以下是转义字符串的一个示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;Hello, world!\n&quot;</span><br></code></pre></td></tr></table></figure><p>转义采用传统的反斜杠（<code>\</code>）方式。<br>所支持的转义序列请参见 <a href="https://book.kotlincn.net/text/characters.html">字符</a> 页。</p><h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><p><em>多行字符串</em>可以包含换行以及任意文本。 它使用三个引号（<code>&quot;&quot;&quot;</code>）分界符括起来，内部没有转义并且可以包含换行以及任何其他字符：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> text = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    for (c in &quot;foo&quot;)</span><br><span class="hljs-string">        print(c)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>如需删掉多行字符串中的前导空格，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html"><code>trimMargin()</code></a> 函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> text = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">|Tell me and I forget.</span><br><span class="hljs-string">|Teach me and I remember.</span><br><span class="hljs-string">|Involve me and I learn.</span><br><span class="hljs-string">|(Benjamin Franklin)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.trimMargin()<br></code></pre></td></tr></table></figure><p>默认以竖线 <code>|</code> 作为边界前缀，但你可以选择其他字符并作为参数传入，比如 <code>trimMargin(&quot;&gt;&quot;)</code>。</p><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><p>字符串字面值可以包含<em>模板表达式</em>——一些小段代码，会求值并把结果合并到字符串中。 模板表达式以美元符（<code>$</code>）开头，要么由一个的名称构成:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> i = <span class="hljs-number">10</span><br>    println(<span class="hljs-string">&quot;i = <span class="hljs-variable">$i</span>&quot;</span>) <span class="hljs-comment">// 输出“i = 10”</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>要么是用花括号括起来的表达式:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;abc&quot;</span><br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$s</span>.length is <span class="hljs-subst">$&#123;s.length&#125;</span>&quot;</span>) <span class="hljs-comment">// 输出 &quot;abc.length is 3&quot;</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在多行字符串及转义字符串中都可以使用模板。 如需在多行字符串（不支持反斜杠转义）中的允许作为<a href="https://kotlinlang.org/docs/reference/grammar.html#identifiers">标识符（identifier）</a>开头的任意符号之前插入美元符 <code>$</code>， 请使用以下语法：s</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> price = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;$&#x27;</span>&#125;</span>_9.99</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p>Kotlin 中字符串用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/"><code>String</code></a> 类型表示。 通常，字符串值是双引号（<code>&quot;</code>）中的字符序列：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;abcd 123&quot;</span><br></code></pre></td></tr></table></figure><p>字符串的元素——字符可以使用索引运算符访问: <code>s[i]</code>。 可以使用 <code>for</code> 循环遍历这些字符：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;abcd&quot;</span><br><span class="hljs-comment">//sampleStart</span><br><span class="hljs-keyword">for</span> (c <span class="hljs-keyword">in</span> str) &#123;<br>    println(c)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>字符串是不可变的。 一旦初始化了一个字符串，就不能改变它的值或者给它赋新值。 所有转换字符串的操作都以一个新的 <code>String</code> 对象来返回结果，而保持原始字符串不变：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;abcd&quot;</span><br>    println(str.uppercase()) <span class="hljs-comment">// 创建并输出一个新的 String 对象</span><br>    println(str) <span class="hljs-comment">// 原始字符串保持不变</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如需连接字符串，可以用 <code>+</code> 操作符。这也适用于连接字符串与其他类型的值， 只要表达式中的第一个元素是字符串：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br><span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">1</span><br>println(s + <span class="hljs-string">&quot;def&quot;</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在大多数情况下，优先使用<a href="https://book.kotlincn.net/text/strings.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF">字符串模板</a>或<a href="https://book.kotlincn.net/text/strings.html#%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2">多行字符串</a>而不是字符串连接。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><h4 id="字符串字面值-1"><a href="#字符串字面值-1" class="headerlink" title="字符串字面值"></a>字符串字面值</h4><p>Kotlin 有两种类型的字符串字面值:</p><ul><li><a href="https://book.kotlincn.net/text/strings.html#%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E4%B8%B2">转义字符串</a></li><li><a href="https://book.kotlincn.net/text/strings.html#%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2">多行字符串</a></li></ul><h5 id="转义字符串-1"><a href="#转义字符串-1" class="headerlink" title="转义字符串"></a>转义字符串</h5><p><em>转义字符串</em>可以包含转义字符。<br>以下是转义字符串的一个示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;Hello, world!\n&quot;</span><br></code></pre></td></tr></table></figure><p>转义采用传统的反斜杠（<code>\</code>）方式。<br>所支持的转义序列请参见 <a href="https://book.kotlincn.net/text/characters.html">字符</a> 页。</p><h5 id="多行字符串-1"><a href="#多行字符串-1" class="headerlink" title="多行字符串"></a>多行字符串</h5><p><em>多行字符串</em>可以包含换行以及任意文本。 它使用三个引号（<code>&quot;&quot;&quot;</code>）分界符括起来，内部没有转义并且可以包含换行以及任何其他字符：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> text = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    for (c in &quot;foo&quot;)</span><br><span class="hljs-string">        print(c)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>如需删掉多行字符串中的前导空格，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html"><code>trimMargin()</code></a> 函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> text = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">|Tell me and I forget.</span><br><span class="hljs-string">|Teach me and I remember.</span><br><span class="hljs-string">|Involve me and I learn.</span><br><span class="hljs-string">|(Benjamin Franklin)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.trimMargin()<br></code></pre></td></tr></table></figure><p>默认以竖线 <code>|</code> 作为边界前缀，但你可以选择其他字符并作为参数传入，比如 <code>trimMargin(&quot;&gt;&quot;)</code>。</p><h4 id="字符串模板-1"><a href="#字符串模板-1" class="headerlink" title="字符串模板"></a>字符串模板</h4><p>字符串字面值可以包含<em>模板表达式</em>——一些小段代码，会求值并把结果合并到字符串中。 模板表达式以美元符（<code>$</code>）开头，要么由一个的名称构成:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> i = <span class="hljs-number">10</span><br>    println(<span class="hljs-string">&quot;i = <span class="hljs-variable">$i</span>&quot;</span>) <span class="hljs-comment">// 输出“i = 10”</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>要么是用花括号括起来的表达式:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;abc&quot;</span><br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$s</span>.length is <span class="hljs-subst">$&#123;s.length&#125;</span>&quot;</span>) <span class="hljs-comment">// 输出 &quot;abc.length is 3&quot;</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在多行字符串及转义字符串中都可以使用模板。 如需在多行字符串（不支持反斜杠转义）中的允许作为<a href="https://kotlinlang.org/docs/reference/grammar.html#identifiers">标识符（identifier）</a>开头的任意符号之前插入美元符 <code>$</code>， 请使用以下语法：s</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> price = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;$&#x27;</span>&#125;</span>_9.99</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是一种保存固定数量相同类型或其子类型的值的数据结构。 Kotlin 中最常见的数组类型是对象类型数组，由 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/"><code>Array</code></a> 类表示。</p><blockquote><p>如果在对象类型数组中使用原生类型，那么会对性能产生影响，因为原生值都<a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html">装箱</a>成了对象。 为了避免装箱开销，请改用<a href="https://book.kotlincn.net/text/arrays.html#%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84">原生类型数组</a>。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><h4 id="何时使用数组"><a href="#何时使用数组" class="headerlink" title="何时使用数组"></a>何时使用数组</h4><p>当需要满足特殊的底层需求时，可以在 Kotlin 中使用数组。 例如，如果性能要求超出了常规应用程序的需要，或者需要构建自定义的数据结构。 如果没有这些限制，那么请改用<a href="https://book.kotlincn.net/text/collections-overview.html">集合</a>。</p><p>与数组相比，集合具有以下优点：</p><ul><li><p>集合可以是只读的，这提供了更多的控制权而支持编写具有明确意图的健壮代码。</p></li><li><p>易于对集合增删元素。相比之下，数组大小是固定的。 对数组增删元素的唯一方式是每次创建一个新数组，效率很低：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">var</span> riversArray = arrayOf(<span class="hljs-string">&quot;Nile&quot;</span>, <span class="hljs-string">&quot;Amazon&quot;</span>, <span class="hljs-string">&quot;Yangtze&quot;</span>)<br><br>    <span class="hljs-comment">// 使用 += 赋值操作创建了一个新的 riversArray，</span><br>    <span class="hljs-comment">// 复制了原始元素并添加了“Mississippi”</span><br>    riversArray += <span class="hljs-string">&quot;Mississippi&quot;</span><br>    println(riversArray.joinToString())<br>    <span class="hljs-comment">// Nile, Amazon, Yangtze, Mississippi</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可以使用相等操作符(<code>==</code>)来检验两个集合是否在结构上相等。但不能对数组使用这个操作符。 相反，必须使用一个特殊函数，关于这点可以参阅<a href="https://book.kotlincn.net/text/arrays.html#%E6%AF%94%E8%BE%83%E6%95%B0%E7%BB%84">比较数组</a>了解更多信息。</p></li></ul><p>关于集合的更多信息请参见<a href="https://book.kotlincn.net/text/collections-overview.html">集合概述</a>。</p><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><p>在Kotlin中创建数组，你应该使用：</p><ul><li>方法, 比如 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/array-of.html"><code>arrayOf()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/array-of-nulls.html#kotlin$arrayOfNulls(kotlin.Int)"><code>arrayOfNulls()</code></a> 或<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/empty-array.html"><code>emptyArray()</code></a>.</li><li><code>Array</code> 构造.</li></ul><p>这个例子使用了 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/array-of.html"><code>arrayOf()</code></a> 方法，举例如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-comment">// Creates an array with values [1, 2, 3]</span><br>    <span class="hljs-keyword">val</span> simpleArray = arrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>    println(simpleArray.joinToString())<br>    <span class="hljs-comment">// 1, 2, 3</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此示例使用该函数<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/array-of-nulls.html#kotlin$arrayOfNulls(kotlin.Int)"><code>arrayOfNulls()</code></a> 创建一个给定大小的数组，其中填充了<code>null</code>元素：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-comment">// Creates an array with values [null, null, null]</span><br>    <span class="hljs-keyword">val</span> nullArray: Array&lt;<span class="hljs-built_in">Int</span>?&gt; = arrayOfNulls(<span class="hljs-number">3</span>)<br>    println(nullArray.joinToString())<br>    <span class="hljs-comment">// null, null, null</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>此示例使用函数 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/empty-array.html"><code>emptyArray()</code></a> 创建一个空数组：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> exampleArray = emptyArray&lt;String&gt;()<br></code></pre></td></tr></table></figure><blockquote><p>由于 Kotlin 的类型推断，您可以在赋值的左侧或右侧指定空数组的类型。</p><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-keyword">var</span> exampleArray = emptyArray&lt;String&gt;()<br><br><span class="hljs-keyword">var</span> exampleArray: Array&lt;String&gt; = emptyArray()<br></code></pre></td></tr></table></figure><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><p><code>Array</code>构造函数采用数组大小和一个函数，该函数返回给定其索引的数组元素的值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-comment">// Creates an Array&lt;Int&gt; that initializes with zeros [0, 0, 0]</span><br>    <span class="hljs-keyword">val</span> initArray = Array&lt;<span class="hljs-built_in">Int</span>&gt;(<span class="hljs-number">3</span>) &#123; <span class="hljs-number">0</span> &#125;<br>    println(initArray.joinToString())<br>    <span class="hljs-comment">// 0, 0, 0</span><br><br>    <span class="hljs-comment">// 创建一个 Array&lt;String&gt; 初始化为 [&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, &quot;16&quot;]</span><br>    <span class="hljs-keyword">val</span> asc = Array(<span class="hljs-number">5</span>) &#123; i -&gt; (i * i).toString() &#125;<br>    asc.forEach &#123; print(it) &#125;<br>    <span class="hljs-comment">// 014916</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>与大多数编程语言一样，Kotlin 中的索引从 0 开始。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><h5 id="嵌套数组"><a href="#嵌套数组" class="headerlink" title="嵌套数组"></a>嵌套数组</h5><p>数组可以相互嵌套以创建多维数组：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-comment">// Creates a two-dimensional array</span><br>    <span class="hljs-keyword">val</span> twoDArray = Array(<span class="hljs-number">2</span>) &#123; Array&lt;<span class="hljs-built_in">Int</span>&gt;(<span class="hljs-number">2</span>) &#123; <span class="hljs-number">0</span> &#125; &#125;<br>    println(twoDArray.contentDeepToString())<br>    <span class="hljs-comment">// [[0, 0], [0, 0]]</span><br><br>    <span class="hljs-comment">// Creates a three-dimensional array</span><br>    <span class="hljs-keyword">val</span> threeDArray = Array(<span class="hljs-number">3</span>) &#123; Array(<span class="hljs-number">3</span>) &#123; Array&lt;<span class="hljs-built_in">Int</span>&gt;(<span class="hljs-number">3</span>) &#123; <span class="hljs-number">0</span> &#125; &#125; &#125;<br>    println(threeDArray.contentDeepToString())<br>    <span class="hljs-comment">// [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>嵌套数组不必具有相同的类型或大小。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><h4 id="访问与修改元素"><a href="#访问与修改元素" class="headerlink" title="访问与修改元素"></a>访问与修改元素</h4><p>数组始终是可变的。访问和修改数组中的元素, 使用 <a href="https://book.kotlincn.net/text/operator-overloading.html#%E7%B4%A2%E5%BC%95%E8%AE%BF%E9%97%AE%E6%93%8D%E4%BD%9C%E7%AC%A6">indexed access operator</a><code>[]</code>:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> simpleArray = arrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">val</span> twoDArray = Array(<span class="hljs-number">2</span>) &#123; Array&lt;<span class="hljs-built_in">Int</span>&gt;(<span class="hljs-number">2</span>) &#123; <span class="hljs-number">0</span> &#125; &#125;<br><br>    <span class="hljs-comment">// Accesses the element and modifies it</span><br>    simpleArray[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br>    twoDArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br><br>    <span class="hljs-comment">// Prints the modified element</span><br>    println(simpleArray[<span class="hljs-number">0</span>].toString()) <span class="hljs-comment">// 10</span><br>    println(twoDArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].toString()) <span class="hljs-comment">// 2</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Kotlin 中的数组是<em>不变</em>的。这意味着 Kotlin 不允许您将<code>Array&lt;String&gt;</code>分配给<code>Array&lt;Any&gt;</code>以防止可能的运行时故障。相反，您可以使用<code>Array&lt;out Any&gt;</code>。欲了解更多信息查看 <a href="https://book.kotlincn.net/text/generics.html#%E7%B1%BB%E5%9E%8B%E6%8A%95%E5%BD%B1">Type Projections</a>。</p><h4 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h4><p>在 Kotlin 中，您可以使用数组将可变数量的参数传递给函数或对数组本身执行操作。例如，比较数组、转换其内容或将它们转换为集合。</p><h5 id="向函数传入可变数量的实参"><a href="#向函数传入可变数量的实参" class="headerlink" title="向函数传入可变数量的实参"></a>向函数传入可变数量的实参</h5><p>在 Kotlin 中，您可以通过 <a href="https://book.kotlincn.net/text/functions.html#%E5%8F%AF%E5%8F%98%E6%95%B0%E9%87%8F%E7%9A%84%E5%8F%82%E6%95%B0(varargs">‘vararg’</a>参数将可变数量的参数传递给函数。当您事先不知道参数的数量时，例如在格式化消息或创建 SQL 查询时，这很有用。</p><p>若要将包含可变数量参数的数组传递给函数，请使用运算符 <code>*</code>。<code>*</code>运算符将数组的每个元素作为单独的参数传递给您选择的函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> lettersArray = arrayOf(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>)<br>    printAllStrings(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, *lettersArray)<br>    <span class="hljs-comment">// abcd</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printAllStrings</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> strings: <span class="hljs-type">String</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> (string <span class="hljs-keyword">in</span> strings) &#123;<br>        print(string)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更多信息请访问 <a href="https://book.kotlincn.net/text/functions.html#%E5%8F%AF%E5%8F%98%E6%95%B0%E9%87%8F%E7%9A%84%E5%8F%82%E6%95%B0(varargs)">Variable number of arguments (varargs)</a>.</p><h5 id="比较数组"><a href="#比较数组" class="headerlink" title="比较数组"></a>比较数组</h5><p>要比较两个数组是否具有相同顺序的相同元素，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/content-equals.html"><code>.contentEquals()</code></a> 和<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/content-deep-equals.html"><code>.contentDeepEquals()</code></a> 方法:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> simpleArray = arrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">val</span> anotherArray = arrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br>    <span class="hljs-comment">// Compares contents of arrays</span><br>    println(simpleArray.contentEquals(anotherArray))<br>    <span class="hljs-comment">// true</span><br><br>    <span class="hljs-comment">// Using infix notation, compares contents of arrays after an element </span><br>    <span class="hljs-comment">// is changed</span><br>    simpleArray[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br>    println(simpleArray contentEquals anotherArray)<br>    <span class="hljs-comment">// false</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不要使用相等 <code>==</code> 和不等式 <code>！=</code>操作符来比较数组的内容。这些运算符检查分配的变量是否指向同一对象。</p><p><svg width="24" height="24" fill="#f45b4a" viewBox="0 0 24 24"><path d="M12.946 3.552L21.52 18.4c.424.735.33 1.6-.519 1.6H3.855c-.85 0-1.817-.865-1.392-1.6l8.573-14.848a1.103 1.103 0 0 1 1.91 0zm.545 12.948a1.5 1.5 0 1 0-1.5 1.5 1.5 1.5 0 0 0 1.5-1.5zM13 8h-2v5h2z"></path></svg></p></blockquote><h5 id="转换数组"><a href="#转换数组" class="headerlink" title="转换数组"></a>转换数组</h5><p>Kotlin有许多有用的函数来转换数组。本文档重点介绍了一些，但这并不是一个详尽的列表。对于功能的完整列表，参看 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/">API reference</a>.</p><p><strong>Sum</strong></p><p>返回数组中所有元素的总和, 使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sum.html"><code>.sum()</code></a> 方法:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> sumArray = arrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br>    <span class="hljs-comment">// Sums array elements</span><br>    println(sumArray.sum())<br>    <span class="hljs-comment">// 6</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>The <code>.sum()</code> function can only be used with arrays of <a href="https://book.kotlincn.net/text/numbers.html">numeric data types</a>, such as <code>Int</code>.</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><p><strong>Shuffle</strong></p><p>要随机打乱数组中的元素，请使用<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/shuffle.html"><code>.shuffle()</code></a>功能：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> simpleArray = arrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br>    <span class="hljs-comment">// Shuffles elements [3, 2, 1]</span><br>    simpleArray.shuffle()<br>    println(simpleArray.joinToString())<br><br>    <span class="hljs-comment">// Shuffles elements again [2, 3, 1]</span><br>    simpleArray.shuffle()<br>    println(simpleArray.joinToString())<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="将数组转换为集合"><a href="#将数组转换为集合" class="headerlink" title="将数组转换为集合"></a>将数组转换为集合</h5><p>如果您使用不同的API，其中一些使用数组，另一些使用集合，那么您可以将数组转换为<a href="https://book.kotlincn.net/text/collections-overview.html">collections</a>反之亦然.</p><p><strong>转换为 List 或 Set</strong></p><p>要将数组转换为“List”或“Set”，请使用<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-list.html"><code>.toList()</code></a>和<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-set.html"><code>.toSet()</code></a>功能。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> simpleArray = arrayOf(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br><br>    <span class="hljs-comment">// Converts to a Set</span><br>    println(simpleArray.toSet())<br>    <span class="hljs-comment">// [a, b, c]</span><br><br>    <span class="hljs-comment">// Converts to a List</span><br>    println(simpleArray.toList())<br>    <span class="hljs-comment">// [a, b, c, c]</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>转换为 Map</strong></p><p>要将数组转换为<code>map</code>，请使用<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-map.html"><code>.toMap()</code></a>功能。</p><p>只有<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-pair/"><code>Pair</code></a>数组可以转换为<code>map</code>。“Pair”实例的第一个值变成键，第二个值变成值。此示例使用<a href="https://book.kotlincn.net/text/functions.html#%E4%B8%AD%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95">infix表示法</a> 调用<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/to.html"><code>to</code></a>用于创建“Pair”元组的函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> pairArray = arrayOf(<span class="hljs-string">&quot;apple&quot;</span> to <span class="hljs-number">120</span>, <span class="hljs-string">&quot;banana&quot;</span> to <span class="hljs-number">150</span>, <span class="hljs-string">&quot;cherry&quot;</span> to <span class="hljs-number">90</span>, <span class="hljs-string">&quot;apple&quot;</span> to <span class="hljs-number">140</span>)<br><br>    <span class="hljs-comment">// Converts to a Map</span><br>    <span class="hljs-comment">// The keys are fruits and the values are their number of calories</span><br>    <span class="hljs-comment">// Note how keys must be unique, so the latest value of &quot;apple&quot;</span><br>    <span class="hljs-comment">// overwrites the first</span><br>    println(pairArray.toMap())<br>    <span class="hljs-comment">// &#123;apple=140, banana=150, cherry=90&#125;</span><br><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="原生类型数组"><a href="#原生类型数组" class="headerlink" title="原生类型数组"></a>原生类型数组</h4><p>如果将<code>Array</code>类与基元值一起使用，则这些值将被装箱到对象中。作为一种选择，您可以使用基元类型数组，这允许您将基元存储在数组中，而不会产生装箱开销的副作用：</p><table><thead><tr><th>Primitive-type array</th><th>Equivalent in Java</th></tr></thead><tbody><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-boolean-array/"><code>BooleanArray</code></a></td><td><code>boolean[]</code></td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/"><code>ByteArray</code></a></td><td><code>byte[]</code></td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-char-array/"><code>CharArray</code></a></td><td><code>char[]</code></td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-double-array/"><code>DoubleArray</code></a></td><td><code>double[]</code></td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-float-array/"><code>FloatArray</code></a></td><td><code>float[]</code></td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int-array/"><code>IntArray</code></a></td><td><code>int[]</code></td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-long-array/"><code>LongArray</code></a></td><td><code>long[]</code></td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-short-array/"><code>ShortArray</code></a></td><td><code>short[]</code></td></tr></tbody></table><p>这些类与<code>Array</code>类没有继承关系，但它们具有相同的一组函数和属性。</p><p>此示例创建<code>IntArray</code>类的一个实例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-comment">// Creates an array of Int of size 5 with values</span><br>    <span class="hljs-keyword">val</span> exampleArray = IntArray(<span class="hljs-number">5</span>)<br>    println(exampleArray.joinToString())<br>    <span class="hljs-comment">// 0, 0, 0, 0, 0</span><br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>要将基元类型数组转换为对象类型数组，请使用<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-typed-array.html"><code>.toTypedArray()</code></a>功能。</p><p>要将对象类型数组转换为基元类型数组，请使用<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-boolean-array.html"><code>.toBooleanArray()</code></a>，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-byte-array.html"><code>.toByteArray()</code></a>，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-char-array.html"><code>.toCharArray()</code></a>，等等。</p></blockquote><h3 id="无符号整型"><a href="#无符号整型" class="headerlink" title="无符号整型"></a>无符号整型</h3><p>除了<a href="https://book.kotlincn.net/text/numbers.html#%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B">整数类型</a>，对于无符号整数，Kotlin 还提供了以下类型：</p><ul><li><code>UByte</code>: 无符号 8 比特整数，范围是 0 到 255</li><li><code>UShort</code>: 无符号 16 比特整数，范围是 0 到 65535</li><li><code>UInt</code>: 无符号 32 比特整数，范围是 0 到 2^32 - 1</li><li><code>ULong</code>: 无符号 64 比特整数，范围是 0 到 2^64 - 1</li></ul><p>无符号类型支持其对应有符号类型的大多数操作。</p><blockquote><p>无符号数实现为具有单个存储属性的<a href="https://book.kotlincn.net/text/inline-classes.html">内联类</a>， 该属性类型为与其宽度相同的对应有符号类型。 尽管如此，将类型从无符号类型更改为对应的有符号类型(反之亦然) 是<em>二进制不兼容</em>变更。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><h4 id="无符号数组与区间"><a href="#无符号数组与区间" class="headerlink" title="无符号数组与区间"></a>无符号数组与区间</h4><blockquote><p>无符号数组及其对应操作处于 <a href="https://book.kotlincn.net/text/components-stability.html">Beta</a> 状态。 它们可能随时进行不兼容变更。 需要选择加入(详见下文)。</p><p><svg width="24" height="24" fill="#f45b4a" viewBox="0 0 24 24"><path d="M12.946 3.552L21.52 18.4c.424.735.33 1.6-.519 1.6H3.855c-.85 0-1.817-.865-1.392-1.6l8.573-14.848a1.103 1.103 0 0 1 1.91 0zm.545 12.948a1.5 1.5 0 1 0-1.5 1.5 1.5 1.5 0 0 0 1.5-1.5zM13 8h-2v5h2z"></path></svg></p></blockquote><p>与原生类型相同，每个无符号类型都有表示相应类型数组的类型：</p><ul><li><code>UByteArray</code>: 无符号字节数组</li><li><code>UShortArray</code>: 无符号短整型数组</li><li><code>UIntArray</code>: 无符号整型数组</li><li><code>ULongArray</code>: 无符号长整型数组</li></ul><p>与有符号整型数组一样，它们提供了类似于 <code>Array</code> 类的 API 而没有装箱开销。</p><p>使用无符号数组时，将收到一条警告，指示此功能尚不稳定。要删除警告，请选择启用<code>@ExperimentalUnsignedTypes</code>注解。由您决定您的客户端是否必须明确选择使用您的 API，但请记住，无符号数组不是一个稳定的功能，因此使用它们的 API 可能会被语言更改破坏。</p><p><a href="https://book.kotlincn.net/text/ranges.html">区间与数列</a>也支持 <code>UInt</code> 与 <code>ULong</code>(通过这些类 <code>UIntRange</code>、 <code>UIntProgression</code>、 <code>ULongRange</code>、 <code>ULongProgression</code>)。 Together with the unsigned integer types, these classes are stable.</p><h4 id="无符号整数字面值"><a href="#无符号整数字面值" class="headerlink" title="无符号整数字面值"></a>无符号整数字面值</h4><p>为使无符号整型更易于使用，Kotlin 提供了用后缀标记整型字面值来表示指定无符号类型(类似于 <code>Float</code> 或 <code>Long</code>)：</p><ul><li><p><code>u</code>和<code>U</code>标记用于无符号文字。确切的类型是根据预期的类型确定的。如果未提供预期的类型，编译器将根据文本的大小使用<code>UInt</code>或<code>ULong</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> b: UByte = 1u  <span class="hljs-comment">// UByte，已提供预期类型</span><br><span class="hljs-keyword">val</span> s: UShort = 1u <span class="hljs-comment">// UShort，已提供预期类型</span><br><span class="hljs-keyword">val</span> l: ULong = 1u  <span class="hljs-comment">// ULong，已提供预期类型</span><br><br><span class="hljs-keyword">val</span> a1 = 42u <span class="hljs-comment">// UInt：未提供预期类型，常量适于 UInt</span><br><span class="hljs-keyword">val</span> a2 = 0xFFFF_FFFF_FFFFu <span class="hljs-comment">// ULong：未提供预期类型，常量不适于 UInt</span><br></code></pre></td></tr></table></figure></li><li><p><code>uL</code> 与 <code>UL</code> 显式将字面值标记为无符号长整型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> a = 1UL <span class="hljs-comment">// ULong，即使未提供预期类型并且常量适于 UInt</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>无符号数字的主要用例是利用整数的全位范围来表示正值。<br>例如，要表示不适合有符号类型的十六进制常量，例如 32 位<code>AARRGGBB</code>格式的颜色：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span>(<span class="hljs-keyword">val</span> representation: UInt)<br><br><span class="hljs-keyword">val</span> yellow = Color(0xFFCC00CCu)<br></code></pre></td></tr></table></figure><p>您可以使用无符号数字来初始化字节数组，而无需显式的<code>toByte()</code>文字转换：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> byteOrderMarkUtf8 = ubyteArrayOf(0xEFu, 0xBBu, 0xBFu)<br></code></pre></td></tr></table></figure><p>另一个用例是与本机 API 的互操作性。Kotlin 允许表示签名中包含无符号类型的原生声明。映射不会将无符号整数替换为有符号整数，从而保持语义不变。</p><h5 id="非目标"><a href="#非目标" class="headerlink" title="非目标"></a>非目标</h5><p>虽然无符号整数只能表示正数和零，但在应用程序域需要非负整数的情况下使用它们并不是目标。例如，作为集合大小或集合索引值的类型。</p><p>有几个原因：</p><ul><li>使用有符号整数有助于检测意外溢出和信号错误情况，例如 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/last-index.html">‘List.lastIndex’</a> 为空列表的 -1。</li><li>无符号整数不能被视为有符号整数的范围限制版本，因为它们的值范围不是有符号整数范围的子集。有符号整数和无符号整数都不是彼此的子类型。</li></ul><h2 id="类型检测与类型转换"><a href="#类型检测与类型转换" class="headerlink" title="类型检测与类型转换"></a>类型检测与类型转换</h2><p>在 Kotlin 中，您可以执行类型检查以在运行时检查对象的类型。类型转换将对象转换为其他类型。</p><blockquote><p>若要具体了解 <strong>泛型</strong> 类型检查和强制转换，例如 <code>List&lt;T&gt;</code>，<code>Map&lt;K，V&gt;</code>，请参阅 <a href="https://book.kotlincn.net/text/generics.html#%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">Generics type checks and casts</a>.</p><p><svg width="24" height="24" fill="rgba(25,25,28,0.7)" viewBox="0 0 24 24"><circle cx="12.042" cy="4" r="2"></circle><path d="M18.339 7a6.982 6.982 0 0 0-6.3 4 6.982 6.982 0 0 0-6.3-4H3v10h2.739a6.983 6.983 0 0 1 6.3 4 6.582 6.582 0 0 1 6-4.033h2.994L21 7z"></path></svg></p></blockquote><h3 id="is-与-is-操作符"><a href="#is-与-is-操作符" class="headerlink" title="is 与 !is 操作符"></a>is 与 !is 操作符</h3><p>使用 <code>is</code> 操作符或其否定形式 <code>!is</code> 在运行时检测对象是否符合给定类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> String) &#123;<br>    print(obj.length)<br>&#125;<br><br><span class="hljs-keyword">if</span> (obj !<span class="hljs-keyword">is</span> String) &#123; <span class="hljs-comment">// 与 !(obj is String) 相同</span><br>    print(<span class="hljs-string">&quot;Not a String&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    print(obj.length)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="智能转换"><a href="#智能转换" class="headerlink" title="智能转换"></a>智能转换</h3><p>大多数场景都不需要在 Kotlin 中使用显式转换操作符，因为编译器跟踪不可变值的 <code>is</code>-检测以及<a href="https://book.kotlincn.net/text/typecasts.html#%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6">显式转换</a>，并在必要时自动插入（安全的）转换：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">demo</span><span class="hljs-params">(x: <span class="hljs-type">Any</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">is</span> String) &#123;<br>        print(x.length) <span class="hljs-comment">// x 自动转换为字符串</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译器足够聪明，能够知道如果反向检测导致返回那么该转换是安全的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (x !<span class="hljs-keyword">is</span> String) <span class="hljs-keyword">return</span><br><br>print(x.length) <span class="hljs-comment">// x 自动转换为字符串</span><br></code></pre></td></tr></table></figure><p>或者转换在 <code>&amp;&amp;</code> 或 <code>||</code> 的右侧，而相应的（正常或否定）检测在左侧：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// `||` 右侧的 x 自动转换为 String</span><br><span class="hljs-keyword">if</span> (x !<span class="hljs-keyword">is</span> String || x.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span><br><br><span class="hljs-comment">// `&amp;&amp;` 右侧的 x 自动转换为 String</span><br><span class="hljs-keyword">if</span> (x <span class="hljs-keyword">is</span> String &amp;&amp; x.length &gt; <span class="hljs-number">0</span>) &#123;<br>    print(x.length) <span class="hljs-comment">// x 自动转换为 String</span><br>&#125;<br></code></pre></td></tr></table></figure><p>智能转换用于 <a href="https://book.kotlincn.net/text/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F"><code>when</code> 表达式</a> 和 <a href="https://book.kotlincn.net/text/control-flow.html#while-%E5%BE%AA%E7%8E%AF"><code>while</code> 循环 </a>也一样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> (x) &#123;<br>    <span class="hljs-keyword">is</span> <span class="hljs-built_in">Int</span> -&gt; print(x + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">is</span> String -&gt; print(x.length + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">is</span> IntArray -&gt; print(x.sum())<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>请注意，当编译器能保证变量在检测及其使用之间不可改变时，智能转换才有效。</p><p><svg width="24" height="24" fill="#f45b4a" viewBox="0 0 24 24"><path d="M12.946 3.552L21.52 18.4c.424.735.33 1.6-.519 1.6H3.855c-.85 0-1.817-.865-1.392-1.6l8.573-14.848a1.103 1.103 0 0 1 1.91 0zm.545 12.948a1.5 1.5 0 1 0-1.5 1.5 1.5 1.5 0 0 0 1.5-1.5zM13 8h-2v5h2z"></path></svg></p></blockquote><p>智能转换适用于以下情形：</p><table><thead><tr><th><code>val</code> 局部变量</th><th>总是可以，<a href="https://book.kotlincn.net/text/delegated-properties.html">局部委托属性</a>除外。</th></tr></thead><tbody><tr><td><code>val</code> 属性</td><td>如果属性是 <code>private</code>、 <code>internal</code>，或者该检测在声明属性的同一<a href="https://book.kotlincn.net/text/visibility-modifiers.html#%E6%A8%A1%E5%9D%97">模块</a>中执行。 智能转换不能用于 <code>open</code> 的属性或者具有自定义 getter 的属性。</td></tr><tr><td><code>var</code> 局部变量</td><td>如果变量在检测及其使用之间未修改、没有在会修改它的 lambda 中捕获、并且不是局部委托属性。</td></tr><tr><td><code>var</code> 属性</td><td>决不可能，因为该变量可以随时被其他代码修改。</td></tr></tbody></table><h3 id="“不安全的”转换操作符"><a href="#“不安全的”转换操作符" class="headerlink" title="“不安全的”转换操作符"></a>“不安全的”转换操作符</h3><p>通常，如果转换是不可能的，转换操作符会抛出一个异常。因此，称为<em>不安全的</em>。 Kotlin 中的不安全转换使用中缀操作符 <code>as</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> x: String = y <span class="hljs-keyword">as</span> String<br></code></pre></td></tr></table></figure><p>请注意，<code>null</code> 不能转换为 <code>String</code> 因该类型不是<a href="https://book.kotlincn.net/text/null-safety.html">可空的</a>。 如果 <code>y</code> 为空，上面的代码会抛出一个异常。 为了让这样的代码用于可空值，请在类型转换的右侧使用可空类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> x: String? = y <span class="hljs-keyword">as</span> String?<br></code></pre></td></tr></table></figure><h3 id="“安全的”（可空）转换操作符"><a href="#“安全的”（可空）转换操作符" class="headerlink" title="“安全的”（可空）转换操作符"></a>“安全的”（可空）转换操作符</h3><p>为了避免异常，可以使用<em>安全</em>转换操作符 <code>as?</code>，它可以在失败时返回 <code>null</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> x: String? = y <span class="hljs-keyword">as</span>? String<br></code></pre></td></tr></table></figure><p>请注意，尽管事实上 <code>as?</code> 的右边是一个非空类型的 <code>String</code>，但是其转换的结果是可空的。</p>]]></content>
    
    
    <categories>
      
      <category>Kotlin学习笔记</category>
      
      <category>Kotlin概念</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin编码规范</title>
    <link href="/2023/10/30/Kotlin03%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <url>/2023/10/30/Kotlin03%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h1><p>众所周知且易于遵循的编码规范对于任何编程语言都至关重要。 在这里，我们为使用 Kotlin 的项目提供关于代码风格与代码组织的准则。</p><h2 id="在-IDE-中配置风格"><a href="#在-IDE-中配置风格" class="headerlink" title="在 IDE 中配置风格"></a>在 IDE 中配置风格</h2><p>两个最流行的 Kotlin IDE——<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a> 与 <a href="https://developer.android.com/studio/">Android Studio</a> 都为代码风格提供了强大的支持。 可以将它们配置为根据指定的代码风格自动格式化代码。</p><h3 id="应用风格指南"><a href="#应用风格指南" class="headerlink" title="应用风格指南"></a>应用风格指南</h3><ol><li>转到 <strong>Settings&#x2F;Preferences | Editor | Code Style | Kotlin</strong>。</li><li>点击 **Set from…**。</li><li>选择 <strong>Kotlin style guide</strong> 。</li></ol><h3 id="验证代码是否遵循风格指南"><a href="#验证代码是否遵循风格指南" class="headerlink" title="验证代码是否遵循风格指南"></a>验证代码是否遵循风格指南</h3><ol><li>转到 <strong>Settings&#x2F;Preferences | Editor | Inspections | General</strong>。</li><li>打开 <strong>Incorrect formatting</strong> 探查项。 默认启用验证样式指南中描述的其他问题（例如命名约定）的附加探查项。</li></ol><h2 id="源代码组织"><a href="#源代码组织" class="headerlink" title="源代码组织"></a>源代码组织</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>在纯 Kotlin 项目中，推荐的目录结构遵循省略了公共根包的包结构。例如，如果项目中的所有代码都位于 <code>org.example.kotlin</code> 包及其子包中，那么 <code>org.example.kotlin</code> 包的文件应该直接放在源代码根目录下，而 <code>org.example.kotlin.network.socket</code> 中的文件应该放在源代码根目录下的 <code>network/socket</code> 子目录中。</p><blockquote><p>对于 JVM 平台：Kotlin 源文件应当与 Java 源文件位于同一源文件根目录下， 并遵循相同的目录结构（每个文件应存储在与其 package 语句对应的目录中。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><h3 id="源文件名称"><a href="#源文件名称" class="headerlink" title="源文件名称"></a>源文件名称</h3><p>如果 Kotlin 文件包含单个类或接口（以及可能相关的顶层声明），那么文件名应该与该类的名称相同，并追加 <code>.kt</code> 扩展名。 这适用于所有类型的类和接口。 如果文件包含多个类或只包含顶层声明， 那么选择一个描述该文件所包含内容的名称，并以此命名该文件。 使用首字母大写的<a href="https://zh.wikipedia.org/wiki/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB">驼峰风格</a>（也称为 Pascal 风格）， 例如 <code>ProcessDeclarations.kt</code>。</p><p>文件的名称应该描述文件中代码的作用。因此，应避免在文件名中使用诸如 <code>Util</code> 之类的无意义词语。</p><h4 id="多平台项目"><a href="#多平台项目" class="headerlink" title="多平台项目"></a>多平台项目</h4><p>在多平台项目中，平台特有的源代码集中包含顶层声明的文件应具有与该源代码集名称相关联的后缀。 例如：</p><ul><li><strong>jvm</strong>Main&#x2F;kotlin&#x2F;Platform.<strong>jvm</strong>.kt</li><li><strong>android</strong>Main&#x2F;kotlin&#x2F;Platform.<strong>android</strong>.kt</li><li><strong>ios</strong>Main&#x2F;kotlin&#x2F;Platform.<strong>ios</strong>.kt</li></ul><p>对于公共源代码集，包含顶层声明的文件不应该有后缀。 例如，<code>commonMain/kotlin/Platform.kt</code>.</p><h5 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h5><p>由于 JVM 的限制〔不允许顶层成员（函数、属性）〕，我们建议在多平台项目中遵循这种文件命名方案。</p><p>为了解决 JVM 的这个问题，Kotlin JVM 编译器会创建包含顶层成员声明的包装类〔所谓的 “文件门面”（file facades）〕。 文件门面有一个源自文件名的内部名称。</p><p>另外，JVM 不允许多个类具有相同的完整限定名称 (FQN，fully qualified name)。 这可能会导致 Kotlin 项目无法编译到 JVM 的情况：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">root<br>|- commonMain<span class="hljs-regexp">/kotlin/my</span><span class="hljs-keyword">Package</span><span class="hljs-regexp">/Platform.kt /</span>/ 包含 <span class="hljs-string">&#x27;fun count() &#123; &#125;&#x27;</span><br>|- jvmMain<span class="hljs-regexp">/kotlin/my</span><span class="hljs-keyword">Package</span><span class="hljs-regexp">/Platform.kt /</span>/ 包含 <span class="hljs-string">&#x27;fun multiply() &#123; &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>这里两个 <code>Platform.kt</code> 文件都在同一个包中，因此 Kotlin JVM 编译器生成两个文件门面，它们都有 FQN <code>myPackage.PlatformKt</code>。 这就会产生 “Duplicate JVM classes”（“重复的 JVM 类”）错误。</p><p>避免这种情况的最简单的方式就是按照上述指南重命名其中一个文件。 这种命名方案有助于避免冲突，同时保持代码的可读性。</p><blockquote><p>对于以下两种情，上述建议可能看起来多余，但我们仍然建议遵循之：</p><ul><li><p>非 JVM 平台不存在重复文件门面的问题。 但是，这种命名方案有助于保持文件命名的一致性。</p></li><li><p>在 JVM 中，如果源文件没有顶层声明就不会生成文件门面，也就不会遇到命名冲突。</p><p>但是，这种命名方案有助于避免简单的重构或添加可能包含顶层函数并同样导致 “Duplicate JVM classes”（“重复 JVM 类”错误）的情况。</p></li></ul><p><svg width="24" height="24" fill="rgba(25,25,28,0.7)" viewBox="0 0 24 24"><circle cx="12.042" cy="4" r="2"></circle><path d="M18.339 7a6.982 6.982 0 0 0-6.3 4 6.982 6.982 0 0 0-6.3-4H3v10h2.739a6.983 6.983 0 0 1 6.3 4 6.582 6.582 0 0 1 6-4.033h2.994L21 7z"></path></svg></p></blockquote><h3 id="源文件组织"><a href="#源文件组织" class="headerlink" title="源文件组织"></a>源文件组织</h3><p>鼓励多个声明（类、顶级函数或者属性）放在同一个 Kotlin 源文件中， 只要这些声明在语义上彼此紧密关联，并且文件保持合理大小 （不超过几百行）。</p><p>特别是在为类定义与类的所有客户都相关的扩展函数时， 请将它们放在与类自身相同的地方。而在定义仅对指定客户有意义的扩展函数时，请将它们放在紧挨该客户代码之后。避免只是为了保存 某个类的所有扩展函数而创建文件。</p><h3 id="类布局"><a href="#类布局" class="headerlink" title="类布局"></a>类布局</h3><p>一个类的内容应按以下顺序排列：</p><ol><li>属性声明与初始化块</li><li>次构造函数</li><li>方法声明</li><li>伴生对象</li></ol><p>不要按字母顺序或者可见性对方法声明排序，也不要将常规方法与扩展方法分开。而是要把相关的东西放在一起，这样从上到下阅读类的人就能够跟进所发生事情的逻辑。选择一个顺序（高级别优先，或者相反）并坚持下去。</p><p>将嵌套类放在紧挨使用这些类的代码之后。如果打算在外部使用嵌套类，而且类中并没有引用这些类，那么把它们放到末尾，在伴生对象之后。</p><h3 id="接口实现布局"><a href="#接口实现布局" class="headerlink" title="接口实现布局"></a>接口实现布局</h3><p>在实现一个接口时，实现成员的顺序应该与该接口的成员顺序相同（如果需要， 还要插入用于实现的额外的私有方法）。</p><h3 id="重载布局"><a href="#重载布局" class="headerlink" title="重载布局"></a>重载布局</h3><p>在类中总是将重载放在一起。</p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p>在 Kotlin 中，包名与类名的命名规则非常简单：</p><ul><li>包的名称总是小写且不使用下划线（<code>org.example.project</code>）。 通常不鼓励使用多个词的名称，但是如果确实需要使用多个词，可以将它们连接在一起或使用驼峰风格（<code>org.example.myProject</code>）。</li><li>类与对象的名称以大写字母开头并使用驼峰风格：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeclarationProcessor</span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><br><span class="hljs-keyword">object</span> EmptyDeclarationProcessor : DeclarationProcessor() &#123; <span class="hljs-comment">/*……*/</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h3><p>函数、属性与局部变量的名称以小写字母开头、使用驼峰风格而不使用下划线：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">processDeclarations</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><span class="hljs-keyword">var</span> declarationCount = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>例外：用于创建类实例的工厂函数可以与抽象返回类型具有相同的名称：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Foo</span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FooImpl</span> : <span class="hljs-type">Foo</span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Foo</span><span class="hljs-params">()</span></span>: Foo &#123; <span class="hljs-keyword">return</span> FooImpl() &#125;<br></code></pre></td></tr></table></figure><h3 id="测试方法的名称"><a href="#测试方法的名称" class="headerlink" title="测试方法的名称"></a>测试方法的名称</h3><p><strong>当且仅当</strong>在测试中，可以使用反引号括起来的带空格的方法名。 请注意，Android 运行时目前不支持这样的方法名。测试代码中也允许方法名使用下划线。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTestCase</span> &#123;<br>     <span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> `ensure everything works`<span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><br>     <span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ensureEverythingWorks_onAndroid</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性名"><a href="#属性名" class="headerlink" title="属性名"></a>属性名</h3><p>常量名称（标有 <code>const</code> 的属性，或者保存不可变数据的没有自定义 <code>get</code> 函数的顶层&#x2F;对象 <code>val</code> 属性）应该使用大写、下划线分隔的 (<a href="https://en.wikipedia.org/wiki/Snake_case">screaming snake case</a>) 名称：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> MAX_COUNT = <span class="hljs-number">8</span><br><span class="hljs-keyword">val</span> USER_NAME_FIELD = <span class="hljs-string">&quot;UserName&quot;</span><br></code></pre></td></tr></table></figure><p>保存带有行为的对象或者可变数据的顶层&#x2F;对象属性的名称应该使用驼峰风格名称：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> mutableCollection: MutableSet&lt;String&gt; = HashSet()<br></code></pre></td></tr></table></figure><p>保存单例对象引用的属性的名称可以使用与 <code>object</code> 声明相同的命名风格：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> PersonComparator: Comparator&lt;Person&gt; = <span class="hljs-comment">/*……*/</span><br></code></pre></td></tr></table></figure><p>对于枚举常量，可以使用大写、下划线分隔的名称 (<a href="https://en.wikipedia.org/wiki/Snake_case">screaming snake case</a>) （<code>enum class Color &#123; RED, GREEN &#125;</code>）也可使用首字母大写的常规驼峰名称，具体取决于用途。</p><h3 id="幕后属性的名称"><a href="#幕后属性的名称" class="headerlink" title="幕后属性的名称"></a>幕后属性的名称</h3><p>如果一个类有两个概念上相同的属性，一个是公共 API 的一部分，另一个是实现细节，那么使用下划线作为私有属性名称的前缀：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> _elementList = mutableListOf&lt;Element&gt;()<br><br>    <span class="hljs-keyword">val</span> elementList: List&lt;Element&gt;<br>         <span class="hljs-keyword">get</span>() = _elementList<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择好名称"><a href="#选择好名称" class="headerlink" title="选择好名称"></a>选择好名称</h3><p>类的名称通常是用来解释类<em>是</em>什么的名词或者名词短语：<code>List</code>、 <code>PersonReader</code>。</p><p>方法的名称通常是动词或动词短语，说明该方法<em>做</em>什么：<code>close</code>、 <code>readPersons</code>。 修改对象或者返回一个新对象的名称也应遵循建议。例如 <code>sort</code> 是对一个集合就地排序，而 <code>sorted</code> 是返回一个排序后的集合副本。</p><p>名称应该表明实体的目的是什么，所以最好避免在名称中使用无意义的单词 （<code>Manager</code>、 <code>Wrapper</code>）。</p><p>当使用首字母缩写作为名称的一部分时，如果缩写由两个字母组成，就将其大写（<code>IOStream</code>）； 而如果缩写更长一些，就只大写其首字母（<code>XmlFormatter</code>、 <code>HttpInputStream</code>）。</p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>使用 4 个空格缩进。不要使用 tab。</p><p>对于花括号，将左花括号放在结构起始处的行尾，而将右花括号放在与左括结构横向对齐的单独一行。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (elements != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">for</span> (element <span class="hljs-keyword">in</span> elements) &#123;<br>        <span class="hljs-comment">// ……</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在 Kotlin 中，分号是可选的，因此换行很重要。语言设计采用 Java 风格的花括号格式，如果尝试使用不同的格式化风格，那么可能会遇到意外的行为。</p><p><svg width="24" height="24" fill="#4dbb5f" viewBox="0 0 24 24"><path d="M21 12a9 9 0 1 1-9-9 9 9 0 0 1 9 9zM10.5 7.5A1.5 1.5 0 1 0 12 6a1.5 1.5 0 0 0-1.5 1.5zm-.5 3.54v1h1V18h2v-6a.96.96 0 0 0-.96-.96z"></path></svg></p></blockquote><h3 id="横向空白"><a href="#横向空白" class="headerlink" title="横向空白"></a>横向空白</h3><ul><li>在二元操作符左右留空格（<code>a + b</code>）。例外：不要在“range to”操作符（<code>0..i</code>）左右留空格。</li><li>不要在一元运算符左右留空格（<code>a++</code>）。</li><li>在控制流关键字（<code>if</code>、 <code>when</code>、 <code>for</code> 以及 <code>while</code>）与相应的左括号之间留空格。</li><li>不要在主构造函数声明、方法声明或者方法调用的左括号之前留空格。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-keyword">val</span> x: <span class="hljs-built_in">Int</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">(x: <span class="hljs-type">Int</span>)</span></span> &#123; …… &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;<br>    foo(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>绝不在 <code>(</code>、 <code>[</code> 之后或者 <code>]</code>、 <code>)</code> 之前留空格</li><li>绝不在<code>.</code> 或者 <code>?.</code> 左右留空格：<code>foo.bar().filter &#123; it &gt; 2 &#125;.joinToString()</code>, <code>foo?.bar()</code></li><li>在 <code>//</code> 之后留一个空格：<code>// 这是一条注释</code></li><li>不要在用于指定类型参数的尖括号前后留空格：<code>class Map&lt;K, V&gt; &#123; …… &#125;</code></li><li>不要在 <code>::</code> 前后留空格：<code>Foo::class</code>、 <code>String::length</code></li><li>不要在用于标记可空类型的 <code>?</code> 前留空格：<code>String?</code></li></ul><p>作为一般规则，避免任何类型的水平对齐。将标识符重命名为不同长度的名称不应该影响声明或者任何用法的格式。</p><h3 id="冒号"><a href="#冒号" class="headerlink" title="冒号"></a>冒号</h3><p>在以下场景中的 <code>:</code> 之前留一个空格：</p><ul><li>当它用于分隔类型与超类型时</li><li>当委托给一个超类的构造函数或者同一类的另一个构造函数时</li><li>在 <code>object</code> 关键字之后</li></ul><p>而当分隔声明与其类型时，不要在 <code>:</code> 之前留空格。</p><p>在 <code>:</code> 之后总要留一个空格。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>&lt;<span class="hljs-type">out T : Any</span>&gt; : <span class="hljs-type">IFoo</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>)</span></span>: T<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FooImpl</span> : <span class="hljs-type">Foo</span>() &#123;<br>    <span class="hljs-keyword">constructor</span>(x: String) : <span class="hljs-keyword">this</span>(x) &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><br>    <span class="hljs-keyword">val</span> x = <span class="hljs-keyword">object</span> : IFoo &#123; <span class="hljs-comment">/*……*/</span> &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类头"><a href="#类头" class="headerlink" title="类头"></a>类头</h3><p>具有少数主构造函数参数的类可以写成一行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(id: <span class="hljs-built_in">Int</span>, name: String)<br></code></pre></td></tr></table></figure><p>具有较长类头的类应该格式化，以使每个主构造函数参数都在带有缩进的独立的行中。 另外，右括号应该位于一个新行上。如果使用了继承，那么超类的构造函数调用或者所实现接口的列表应该与右括号位于同一行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<br>    id: <span class="hljs-built_in">Int</span>,<br>    name: String,<br>    surname: String<br>) : Human(id, name) &#123; <span class="hljs-comment">/*……*/</span> &#125;<br></code></pre></td></tr></table></figure><p>对于多个接口，应该将超类构造函数调用放在首位，然后将每个接口应放在不同的行中：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<br>    id: <span class="hljs-built_in">Int</span>,<br>    name: String,<br>    surname: String<br>) : Human(id, name),<br>    KotlinMaker &#123; <span class="hljs-comment">/*……*/</span> &#125;<br></code></pre></td></tr></table></figure><p>对于具有很长超类型列表的类，在冒号后面换行，并横向对齐所有超类型名：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFavouriteVeryLongClassHolder</span> :<br>    <span class="hljs-type">MyLongHolder</span>&lt;<span class="hljs-type">MyFavouriteVeryLongClass</span>&gt;(),<br>    SomeOtherInterface,<br>    AndAnotherOne &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了将类头与类体分隔清楚，当类头很长时，可以在类头后放一空行 （如上例所示）或者将左花括号放在独立行上：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFavouriteVeryLongClassHolder</span> :<br>    <span class="hljs-type">MyLongHolder</span>&lt;<span class="hljs-type">MyFavouriteVeryLongClass</span>&gt;(),<br>    SomeOtherInterface,<br>    AndAnotherOne <br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造函数参数使用常规缩进（4 个空格）。这确保了在主构造函数中声明的属性与 在类体中声明的属性具有相同的缩进。</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>如果一个声明有多个修饰符，请始终按照以下顺序安放：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> / <span class="hljs-keyword">protected</span> / <span class="hljs-keyword">private</span> / <span class="hljs-keyword">internal</span><br><span class="hljs-keyword">expect</span> / <span class="hljs-keyword">actual</span><br><span class="hljs-keyword">final</span> / <span class="hljs-keyword">open</span> / <span class="hljs-keyword">abstract</span> / <span class="hljs-keyword">sealed</span> / <span class="hljs-keyword">const</span><br><span class="hljs-keyword">external</span><br><span class="hljs-keyword">override</span><br><span class="hljs-keyword">lateinit</span><br><span class="hljs-keyword">tailrec</span><br><span class="hljs-keyword">vararg</span><br><span class="hljs-keyword">suspend</span><br><span class="hljs-keyword">inner</span><br><span class="hljs-keyword">enum</span> / <span class="hljs-keyword">annotation</span> / <span class="hljs-function"><span class="hljs-keyword">fun</span> // 在 `<span class="hljs-keyword">fun</span> <span class="hljs-keyword">interface</span>` 中是修饰符</span><br><span class="hljs-keyword">companion</span><br><span class="hljs-keyword">inline</span>/ value<br><span class="hljs-keyword">infix</span><br><span class="hljs-keyword">operator</span><br><span class="hljs-keyword">data</span><br></code></pre></td></tr></table></figure><p>将所有注解放在修饰符前：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Named(<span class="hljs-string">&quot;Foo&quot;</span>)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> foo: Foo<br></code></pre></td></tr></table></figure><p>除非你在编写库，否则请省略多余的修饰符（例如 <code>public</code>）。</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>通常将注解放在单独的行上，在它们所依附的声明之前，并使用相同的缩进：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Target(AnnotationTarget.PROPERTY)</span><br><span class="hljs-keyword">annotation</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonExclude</span><br></code></pre></td></tr></table></figure><p>无参数的注解可以放在同一行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@JsonExclude</span> <span class="hljs-meta">@JvmField</span><br><span class="hljs-keyword">var</span> x: String<br></code></pre></td></tr></table></figure><p>无参数的单个注解可以与相应的声明放在同一行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="文件注解"><a href="#文件注解" class="headerlink" title="文件注解"></a>文件注解</h3><p>文件注解位于文件注释（如果有的话）之后、<code>package</code> 语句之前， 并且用一个空白行与 <code>package</code> 分开（为了强调其针对文件而不是包）。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/** 授权许可、版权以及任何其他内容 */</span><br><span class="hljs-meta">@file:JvmName</span>(<span class="hljs-string">&quot;FooBar&quot;</span>)<br><br><span class="hljs-keyword">package</span> foo.bar<br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>如果函数签名不适合单行，请使用以下语法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">longMethodName</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    argument: <span class="hljs-type">ArgumentType</span> = defaultValue,</span></span><br><span class="hljs-params"><span class="hljs-function">    argument2: <span class="hljs-type">AnotherArgumentType</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>: ReturnType &#123;<br>    <span class="hljs-comment">// 函数体</span><br>&#125;<br></code></pre></td></tr></table></figure><p>函数参数使用常规缩进（4 个空格）。有助于确保与构造函数参数一致</p><p>对于由单个表达式构成的函数体，优先使用表达式形式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> &#123;     <span class="hljs-comment">// 不良</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> = <span class="hljs-number">1</span>        <span class="hljs-comment">// 良好</span><br></code></pre></td></tr></table></figure><h3 id="表达式函数体格式化"><a href="#表达式函数体格式化" class="headerlink" title="表达式函数体格式化"></a>表达式函数体格式化</h3><p>如果函数的表达式函数体与函数声明不适合放在同一行，那么将 <code>=</code> 留在第一， 并将表达式函数体缩进 4 个空格。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">f</span><span class="hljs-params">(x: <span class="hljs-type">String</span>, y: <span class="hljs-type">String</span>, z: <span class="hljs-type">String</span>)</span></span> =<br>    veryLongFunctionCallWithManyWords(andLongParametersToo(), x, y, z)<br></code></pre></td></tr></table></figure><h3 id="属性格式化"><a href="#属性格式化" class="headerlink" title="属性格式化"></a>属性格式化</h3><p>对于非常简单的只读属性，请考虑单行格式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> isEmpty: <span class="hljs-built_in">Boolean</span> <span class="hljs-keyword">get</span>() = size == <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>对于更复杂的属性，总是将 <code>get</code> 与 <code>set</code> 关键字放在不同的行上：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> foo: String<br>    <span class="hljs-keyword">get</span>() &#123; <span class="hljs-comment">/*……*/</span> &#125;<br></code></pre></td></tr></table></figure><p>对于具有初始化器的属性，如果初始化器很长，那么在 <code>=</code> 号后增加一个换行并将初始化器缩进四个空格：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> defaultCharset: Charset? =<br>    EncodingRegistry.getInstance().getDefaultCharsetForPropertiesFiles(file)<br></code></pre></td></tr></table></figure><h3 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h3><p>如果 <code>if</code> 或 <code>when</code> 语句的条件有多行，那么在语句体外边总是使用大括号。 将该条件的每个后续行相对于条件语句起始处缩进 4 个空格。 将该条件的右圆括号与左花括号放在单独一行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (!component.isSyncing &amp;&amp;<br>    !hasAnyKotlinRuntimeInScope(module)<br>) &#123;<br>    <span class="hljs-keyword">return</span> createKotlinNotConfiguredPanel(module)<br>&#125;<br></code></pre></td></tr></table></figure><p>这有助于对齐条件与语句体。</p><p>将 <code>else</code>、 <code>catch</code>、 <code>finally</code> 关键字以及 <code>do-while</code> 循环的 <code>while</code> 关键字与之前的花括号放在相同的行上：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (condition) &#123;<br>    <span class="hljs-comment">// 主体</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// else 部分</span><br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 主体</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 清理</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>when</code> 语句中，如果一个分支不止一行，可以考虑用空行将其与相邻的分支块分开：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parsePropertyValue</span><span class="hljs-params">(propName: <span class="hljs-type">String</span>, token: <span class="hljs-type">Token</span>)</span></span> &#123;<br>    <span class="hljs-keyword">when</span> (token) &#123;<br>        <span class="hljs-keyword">is</span> Token.ValueToken -&gt;<br>            callback.visitValue(propName, token.value)<br><br>        Token.LBRACE -&gt; &#123; <span class="hljs-comment">// ……</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将短分支放在与条件相同的行上，无需花括号。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> (foo) &#123;<br>    <span class="hljs-literal">true</span> -&gt; bar() <span class="hljs-comment">// 良好</span><br>    <span class="hljs-literal">false</span> -&gt; &#123; baz() &#125; <span class="hljs-comment">// 不良</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法调用格式化"><a href="#方法调用格式化" class="headerlink" title="方法调用格式化"></a>方法调用格式化</h3><p>在较长参数列表的左括号后添加一个换行符。按 4 个空格缩进参数。 将密切相关的多个参数分在同一行。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">drawSquare(<br>    x = <span class="hljs-number">10</span>, y = <span class="hljs-number">10</span>,<br>    width = <span class="hljs-number">100</span>, height = <span class="hljs-number">100</span>,<br>    fill = <span class="hljs-literal">true</span><br>)<br></code></pre></td></tr></table></figure><p>在分隔参数名与值的 <code>=</code> 左右留空格。</p><h3 id="链式调用换行"><a href="#链式调用换行" class="headerlink" title="链式调用换行"></a>链式调用换行</h3><p>当对链式调用换行时，将 <code>.</code> 字符或者 <code>?.</code> 操作符放在下一行，并带有单倍缩进：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> anchor = owner<br>    ?.firstChild!!<br>    .siblings(forward = <span class="hljs-literal">true</span>)<br>    .dropWhile &#123; it <span class="hljs-keyword">is</span> PsiComment || it <span class="hljs-keyword">is</span> PsiWhiteSpace &#125;<br></code></pre></td></tr></table></figure><p>调用链的第一个调用通常在换行之前，当然如果能让代码更有意义也可以忽略这点。</p><h3 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h3><p>在 lambda 表达式中，应该在花括号左右以及分隔参数与代码体的箭头左右留空格。 如果一个调用接受单个 lambda 表达式，尽可能将其放在圆括号外边传入。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">list.filter &#123; it &gt; <span class="hljs-number">10</span> &#125;<br></code></pre></td></tr></table></figure><p>如果为 lambda 表达式分配一个标签，那么不要在该标签与左花括号之间留空格：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>    ints.forEach <span class="hljs-symbol">lit@</span>&#123;<br>        <span class="hljs-comment">// ……</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在多行的 lambda 表达式中声明参数名时，将参数名放在第一行，后跟箭头与换行符：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">appendCommaSeparated(properties) &#123; prop -&gt;<br>    <span class="hljs-keyword">val</span> propertyValue = prop.<span class="hljs-keyword">get</span>(obj)  <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果参数列表太长而无法放在一行上，请将箭头放在单独一行：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">foo &#123;<br>   context: Context,<br>   environment: Env<br>   -&gt;<br>   context.configureEnv(environment)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="尾部逗号"><a href="#尾部逗号" class="headerlink" title="尾部逗号"></a>尾部逗号</h3><p>尾部逗号是一系列元素中最后一项之后的逗号符号：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<br>    <span class="hljs-keyword">val</span> firstName: String,<br>    <span class="hljs-keyword">val</span> lastName: String,<br>    <span class="hljs-keyword">val</span> age: <span class="hljs-built_in">Int</span>, <span class="hljs-comment">// 尾部逗号</span><br>)<br></code></pre></td></tr></table></figure><p>使用尾部逗号有以下几点收益：</p><ul><li>使版本控制差异更清晰——因为所有焦点都集中在变更的值上。</li><li>使添加及重新排序元素更容易——操作元素时无需再添加或删除逗号。</li><li>简化了代码生成逻辑（例如对象初始化器）。 最后一个元素也可以有逗号。</li></ul><p>尾部逗号完全是可选的——没有它们代码仍可以照常工作。 Kotlin 风格指南鼓励在声明处使用尾部逗号，而自行决定在调用处是否使用。</p><p>如需在 IntelliJ IDEA 格式化程序中启用尾部逗号，请转到 <strong>Settings&#x2F;Preferences | Editor | Code Style | Kotlin</strong>， 打开 <strong>Other</strong> 选项卡并选择 <strong>Use trailing comma</strong> 选项。</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Direction</span> &#123;<br>    NORTH,<br>    SOUTH,<br>    WEST,<br>    EAST, <span class="hljs-comment">// 尾部逗号</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="值实参"><a href="#值实参" class="headerlink" title="值实参"></a>值实参</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">shift</span><span class="hljs-params">(x: <span class="hljs-type">Int</span>, y: <span class="hljs-type">Int</span>)</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br>shift(<br>    <span class="hljs-number">25</span>,<br>    <span class="hljs-number">20</span>, <span class="hljs-comment">// 尾部逗号</span><br>)<br><span class="hljs-keyword">val</span> colors = listOf(<br>    <span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-string">&quot;green&quot;</span>,<br>    <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-comment">// 尾部逗号</span><br>)<br></code></pre></td></tr></table></figure><h4 id="类属性与形参"><a href="#类属性与形参" class="headerlink" title="类属性与形参"></a>类属性与形参</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span>(<br>    <span class="hljs-keyword">val</span> name: String,<br>    <span class="hljs-keyword">val</span> lastName: String, <span class="hljs-comment">// 尾部逗号</span><br>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span>(<br>    <span class="hljs-keyword">val</span> name: String,<br>    lastName: String, <span class="hljs-comment">// 尾部逗号</span><br>)<br></code></pre></td></tr></table></figure><h4 id="函数值形参"><a href="#函数值形参" class="headerlink" title="函数值形参"></a>函数值形参</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">powerOf</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    number: <span class="hljs-type">Int</span>, </span></span><br><span class="hljs-params"><span class="hljs-function">    exponent: <span class="hljs-type">Int</span>, <span class="hljs-comment">// 尾部逗号</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><span class="hljs-keyword">constructor</span>(<br>    x: Comparable&lt;Number&gt;,<br>    y: Iterable&lt;Number&gt;, <span class="hljs-comment">// 尾部逗号</span><br>) &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">vararg</span> quantity: <span class="hljs-type">Int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    description: <span class="hljs-type">String</span>, <span class="hljs-comment">// 尾部逗号</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="类型可选的形参（包括-setter）"><a href="#类型可选的形参（包括-setter）" class="headerlink" title="类型可选的形参（包括 setter）"></a>类型可选的形参（包括 setter）</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> sum: (<span class="hljs-built_in">Int</span>, <span class="hljs-built_in">Int</span>, <span class="hljs-built_in">Int</span>) -&gt; <span class="hljs-built_in">Int</span> = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    x,</span></span><br><span class="hljs-params"><span class="hljs-function">    y,</span></span><br><span class="hljs-params"><span class="hljs-function">    z, <span class="hljs-comment">// 尾部逗号</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y + x<br>&#125;<br>println(sum(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure><h4 id="索引后缀"><a href="#索引后缀" class="headerlink" title="索引后缀"></a>索引后缀</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Surface</span> &#123;<br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">get</span><span class="hljs-params">(x: <span class="hljs-type">Int</span>, y: <span class="hljs-type">Int</span>)</span></span> = <span class="hljs-number">2</span> * x + <span class="hljs-number">4</span> * y - <span class="hljs-number">10</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getZValue</span><span class="hljs-params">(mySurface: <span class="hljs-type">Surface</span>, xValue: <span class="hljs-type">Int</span>, yValue: <span class="hljs-type">Int</span>)</span></span> =<br>    mySurface[<br>        xValue,<br>        yValue, <span class="hljs-comment">// 尾部逗号</span><br>    ]<br></code></pre></td></tr></table></figure><h4 id="lambda-表达式形参"><a href="#lambda-表达式形参" class="headerlink" title="lambda 表达式形参"></a>lambda 表达式形参</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> x = &#123;<br>            x: Comparable&lt;Number&gt;,<br>            y: Iterable&lt;Number&gt;, <span class="hljs-comment">// 尾部逗号</span><br>        -&gt;<br>        println(<span class="hljs-string">&quot;1&quot;</span>)<br>    &#125;<br>    println(x)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="when-条目"><a href="#when-条目" class="headerlink" title="when 条目"></a><code>when</code> 条目</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isReferenceApplicable</span><span class="hljs-params">(myReference: <span class="hljs-type">KClass</span>&lt;*&gt;)</span></span> = <span class="hljs-keyword">when</span> (myReference) &#123;<br>    Comparable::<span class="hljs-keyword">class</span>,<br>    Iterable::<span class="hljs-keyword">class</span>,<br>    String::<span class="hljs-keyword">class</span>, <span class="hljs-comment">// 尾部逗号</span><br>        -&gt; <span class="hljs-literal">true</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（注解中的）集合字面值"><a href="#（注解中的）集合字面值" class="headerlink" title="（注解中的）集合字面值"></a>（注解中的）集合字面值</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">annotation</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApplicableFor</span>(<span class="hljs-keyword">val</span> services: Array&lt;String&gt;)<br><span class="hljs-meta">@ApplicableFor([</span><br><span class="hljs-meta">    <span class="hljs-string">&quot;serializer&quot;</span>,</span><br><span class="hljs-meta">    <span class="hljs-string">&quot;balancer&quot;</span>,</span><br><span class="hljs-meta">    <span class="hljs-string">&quot;database&quot;</span>,</span><br><span class="hljs-meta">    <span class="hljs-string">&quot;inMemoryCache&quot;</span>, // 尾部逗号</span><br><span class="hljs-meta">])</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="类型实参"><a href="#类型实参" class="headerlink" title="类型实参"></a>类型实参</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T1, T2&gt;</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    foo&lt;<br>            Comparable&lt;Number&gt;,<br>            Iterable&lt;Number&gt;, <span class="hljs-comment">// 尾部逗号</span><br>            &gt;()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类型形参"><a href="#类型形参" class="headerlink" title="类型形参"></a>类型形参</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMap</span>&lt;<span class="hljs-type"></span><br><span class="hljs-type">        MyKey,</span><br><span class="hljs-type">        MyValue, // 尾部逗号</span><br><span class="hljs-type">        </span>&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="解构声明"><a href="#解构声明" class="headerlink" title="解构声明"></a>解构声明</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>(<span class="hljs-keyword">val</span> manufacturer: String, <span class="hljs-keyword">val</span> model: String, <span class="hljs-keyword">val</span> year: <span class="hljs-built_in">Int</span>)<br><span class="hljs-keyword">val</span> myCar = Car(<span class="hljs-string">&quot;Tesla&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-number">2019</span>)<br><span class="hljs-keyword">val</span> (<br>    manufacturer,<br>    model,<br>    year, <span class="hljs-comment">// 尾部逗号</span><br>) = myCar<br><span class="hljs-keyword">val</span> cars = listOf&lt;Car&gt;()<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printMeanValue</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> meanValue: <span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ((<br>        _,<br>        _,<br>        year, <span class="hljs-comment">// 尾部逗号</span><br>    ) <span class="hljs-keyword">in</span> cars) &#123;<br>        meanValue += year<br>    &#125;<br>    println(meanValue/cars.size)<br>&#125;<br>printMeanValue()<br></code></pre></td></tr></table></figure><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p>对于较长的文档注释，将开头 <code>/**</code> 放在一个独立行中，并且后续每行都以星号开头：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这是一条多行</span><br><span class="hljs-comment"> * 文档注释。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>简短注释可以放在一行内：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/** 这是一条简短文档注释。 */</span><br></code></pre></td></tr></table></figure><p>通常，避免使用 <code>@param</code> 与 <code>@return</code> 标记。而是将参数与返回值的描述直接合并到文档注释中，并在提到参数的任何地方加上参数链接。 只有当需要不适合放进主文本流程的冗长描述时才应使用 <code>@param</code> 与 <code>@return</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 避免这样：</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns the absolute value of the given number.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> number The number to return the absolute value for.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> The absolute value.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">abs</span><span class="hljs-params">(number: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><br><span class="hljs-comment">// 而要这样：</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Returns the absolute value of the given [number].</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">abs</span><span class="hljs-params">(number: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="避免重复结构"><a href="#避免重复结构" class="headerlink" title="避免重复结构"></a>避免重复结构</h2><p>一般来说，如果 Kotlin 中的某种语法结构是可选的并且被 IDE 高亮为冗余的，那么应该在代码中省略之。为了清楚起见，不要在代码中保留不必要的语法元素 。</p><h3 id="Unit-返回类型"><a href="#Unit-返回类型" class="headerlink" title="Unit 返回类型"></a>Unit 返回类型</h3><p>如果函数返回 Unit，那么应该省略返回类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// 这里省略了“: Unit”</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>尽可能省略分号。</p><h3 id="字符串模版"><a href="#字符串模版" class="headerlink" title="字符串模版"></a>字符串模版</h3><p>将简单变量传入到字符串模版中时不要使用花括号。只有用到更长表达式时才使用花括号。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">println(<span class="hljs-string">&quot;<span class="hljs-variable">$name</span> has <span class="hljs-subst">$&#123;children.size&#125;</span> children&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="语言特性的惯用法"><a href="#语言特性的惯用法" class="headerlink" title="语言特性的惯用法"></a>语言特性的惯用法</h2><h3 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h3><p>优先使用不可变（而不是可变）数据。初始化后未修改的局部变量与属性，总是将其声明为 <code>val</code> 而不是 <code>var</code> 。</p><p>总是使用不可变集合接口（<code>Collection</code>, <code>List</code>, <code>Set</code>, <code>Map</code>）来声明无需改变的集合。使用工厂函数创建集合实例时，尽可能选用返回不可变集合类型的函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 不良：使用可变集合类型作为无需改变的值</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">validateValue</span><span class="hljs-params">(actualValue: <span class="hljs-type">String</span>, allowedValues: <span class="hljs-type">HashSet</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123; …… &#125;<br><br><span class="hljs-comment">// 良好：使用不可变集合类型</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">validateValue</span><span class="hljs-params">(actualValue: <span class="hljs-type">String</span>, allowedValues: <span class="hljs-type">Set</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123; …… &#125;<br><br><span class="hljs-comment">// 不良：arrayListOf() 返回 ArrayList&lt;T&gt;，这是一个可变集合类型</span><br><span class="hljs-keyword">val</span> allowedValues = arrayListOf(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br><br><span class="hljs-comment">// 良好：listOf() 返回 List&lt;T&gt;</span><br><span class="hljs-keyword">val</span> allowedValues = listOf(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h3><p>优先声明带有默认参数的函数而不是声明重载函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 不良</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> = foo(<span class="hljs-string">&quot;a&quot;</span>)<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">(a: <span class="hljs-type">String</span>)</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br><br><span class="hljs-comment">// 良好</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">(a: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;a&quot;</span>)</span></span> &#123; <span class="hljs-comment">/*……*/</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>如果有一个在代码库中多次用到的函数类型或者带有类型参数的类型，那么最好为它定义一个类型别名：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">typealias</span> MouseClickHandler = (Any, MouseEvent) -&gt; <span class="hljs-built_in">Unit</span><br><span class="hljs-keyword">typealias</span> PersonIndex = Map&lt;String, Person&gt;<br></code></pre></td></tr></table></figure><p>如果使用一个 private 或者 internal 的类型别名来避免名称冲突，请优先使用<a href="https://book.kotlincn.net/text/packages.html">包与导入</a>中提到的 <code>import …… as ……</code>。</p><h3 id="Lambda-表达式参数"><a href="#Lambda-表达式参数" class="headerlink" title="Lambda 表达式参数"></a>Lambda 表达式参数</h3><p>在简短、非嵌套的 lambda 表达式中建议使用 <code>it</code> 用法而不是显式声明参数。而在有参数的嵌套 lambda 表达式中，始终显式声明参数。</p><h3 id="在-lambda-表达式中返回"><a href="#在-lambda-表达式中返回" class="headerlink" title="在 lambda 表达式中返回"></a>在 lambda 表达式中返回</h3><p>避免在 lambda 表达式中使用多个返回到标签。请考虑重新组织这样的 lambda 表达式使其只有单一退出点。 如果这无法做到或者不够清晰，请考虑将 lambda 表达式转换为匿名函数。</p><p>不要在 lambda 表达式的最后一条语句中使用返回到标签。</p><h3 id="具名参数"><a href="#具名参数" class="headerlink" title="具名参数"></a>具名参数</h3><p>当一个方法接受多个相同的原生类型参数或者多个 <code>Boolean</code> 类型参数时，请使用具名参数语法， 除非在上下文中的所有参数的含义都已绝对清楚。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">drawSquare(x = <span class="hljs-number">10</span>, y = <span class="hljs-number">10</span>, width = <span class="hljs-number">100</span>, height = <span class="hljs-number">100</span>, fill = <span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>优先使用 <code>try</code>、<code>if</code> 与 <code>when</code> 的表达形式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span> (x) foo() <span class="hljs-keyword">else</span> bar()<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">when</span>(x) &#123;<br>    <span class="hljs-number">0</span> -&gt; <span class="hljs-string">&quot;zero&quot;</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-string">&quot;nonzero&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>优先选用上述代码而不是：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (x)<br>    <span class="hljs-keyword">return</span> foo()<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> bar()<br><span class="hljs-keyword">when</span>(x) &#123;<br>    <span class="hljs-number">0</span> -&gt; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;zero&quot;</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;nonzero&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if-还是-when"><a href="#if-还是-when" class="headerlink" title="if 还是 when"></a>if 还是 when</h3><p>二元条件优先使用 <code>if</code> 而不是 <code>when</code>。 例如，使用 <code>if</code> 的这种语法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>) …… <span class="hljs-keyword">else</span> ……<br></code></pre></td></tr></table></figure><p>而不是使用 <code>when</code> 的这种：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> (x) &#123;<br>    <span class="hljs-literal">null</span> -&gt; <span class="hljs-comment">// ……</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果有三个或多个选项时优先使用 <code>when</code>。</p><h3 id="在条件中的可空的布尔值"><a href="#在条件中的可空的布尔值" class="headerlink" title="在条件中的可空的布尔值"></a>在条件中的可空的布尔值</h3><p>如果需要在条件语句中用到可空的 <code>Boolean</code>, 使用 <code>if (value == true)</code> 或 <code>if (value == false)</code> 检测。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>优先使用高阶函数（<code>filter</code>、<code>map</code> 等）而不是循环。例外：<code>forEach</code>（优先使用常规的 <code>for</code> 循环， 除非 <code>forEach</code> 的接收者是可空的或者 <code>forEach</code> 用做长调用链的一部分。）</p><p>当在使用多个高阶函数的复杂表达式与循环之间进行选择时，请了解每种情况下所执行操作的开销并且记得考虑性能因素。</p><h3 id="区间上循环"><a href="#区间上循环" class="headerlink" title="区间上循环"></a>区间上循环</h3><p>使用 <code>..&lt;</code> 操作符在一个左闭右开区间上循环：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>.n - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">/*……*/</span> &#125;  <span class="hljs-comment">// 不良</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>.&lt;n) &#123; <span class="hljs-comment">/*……*/</span> &#125;  <span class="hljs-comment">// 良好</span><br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>优先使用字符串模板而不是字符串拼接。</p><p>优先使用多行字符串而不是将 <code>\n</code> 转义序列嵌入到常规字符串字面值中。</p><p>如需在多行字符串中维护缩进，当生成的字符串不需要任何内部缩进时使用 <code>trimIndent</code>，而需要内部缩进时使用 <code>trimMargin</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>   println(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Not</span><br><span class="hljs-string">    trimmed</span><br><span class="hljs-string">    text</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>   )<br><br>   println(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Trimmed</span><br><span class="hljs-string">    text</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.trimIndent()<br>   )<br><br>   println()<br><br>   <span class="hljs-keyword">val</span> a = <span class="hljs-string">&quot;&quot;&quot;Trimmed to margin text:</span><br><span class="hljs-string">|if(a &gt; 1) &#123;</span><br><span class="hljs-string">|    return a</span><br><span class="hljs-string">|&#125;&quot;&quot;&quot;</span>.trimMargin()<br><br>   println(a)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>了解 <a href="https://book.kotlincn.net/text/java-to-kotlin-idioms-strings.html#%E4%BD%BF%E7%94%A8%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2">Java 与 Kotlin 多行字符串</a>的区别。</p><h3 id="函数还是属性"><a href="#函数还是属性" class="headerlink" title="函数还是属性"></a>函数还是属性</h3><p>在某些情况下，不带参数的函数可与只读属性互换。 虽然语义相似，但是在某种程度上有一些风格上的约定。</p><p>底层算法优先使用属性而不是函数：</p><ul><li>不会抛异常</li><li>计算开销小（或者在首次运行时缓存）</li><li>如果对象状态没有改变，那么多次调用都会返回相同结果</li></ul><h3 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h3><p>放手去用扩展函数。每当你有一个主要用于某个对象的函数时，可以考虑使其成为一个以该对象为接收者的扩展函数。为了尽量减少 API 污染，尽可能地限制扩展函数的可见性。根据需要，使用局部扩展函数、成员扩展函数或者具有私有可视性的顶层扩展函数。</p><h3 id="中缀函数"><a href="#中缀函数" class="headerlink" title="中缀函数"></a>中缀函数</h3><p>一个函数只有用于两个角色类似的对象时才将其声明为中缀（<code>infix</code>）函数。良好示例如：<code>and</code>、 <code>to</code>、<code>zip</code>。 不良示例如：<code>add</code>。</p><p>如果一个方法会改动其接收者，那么不要声明为中缀（<code>infix</code>）形式。</p><h3 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h3><p>如果为一个类声明一个工厂函数，那么不要让它与类自身同名。优先使用独特的名称， 该名称能表明为何该工厂函数的行为与众不同。只有当确实没有特殊的语义时， 才可以使用与该类相同的名称。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>(<span class="hljs-keyword">val</span> x: <span class="hljs-built_in">Double</span>, <span class="hljs-keyword">val</span> y: <span class="hljs-built_in">Double</span>) &#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fromPolar</span><span class="hljs-params">(angle: <span class="hljs-type">Double</span>, radius: <span class="hljs-type">Double</span>)</span></span> = Point(……)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果一个对象有多个重载的构造函数，它们并非调用不同的超类构造函数，并且不能简化为具有默认参数值的单个构造函数，那么优先用工厂函数取代这些重载的构造函数。</p><h3 id="平台类型"><a href="#平台类型" class="headerlink" title="平台类型"></a>平台类型</h3><p>返回平台类型表达式的公有函数&#x2F;方法必须显式声明其 Kotlin 类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">apiCall</span><span class="hljs-params">()</span></span>: String = MyJavaApi.getProperty(<span class="hljs-string">&quot;name&quot;</span>)<br></code></pre></td></tr></table></figure><p>任何使用平台类型表达式初始化的属性（包级别或类级别）必须显式声明其 Kotlin 类型：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">val</span> name: String = MyJavaApi.getProperty(<span class="hljs-string">&quot;name&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>使用平台类型表达式初始化的局部值可以有也可以没有类型声明：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> name = MyJavaApi.getProperty(<span class="hljs-string">&quot;name&quot;</span>)<br>    println(name)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="作用域函数-apply-with-run-also-let"><a href="#作用域函数-apply-with-run-also-let" class="headerlink" title="作用域函数 apply&#x2F;with&#x2F;run&#x2F;also&#x2F;let"></a>作用域函数 apply&#x2F;with&#x2F;run&#x2F;also&#x2F;let</h3><p>Kotlin 提供了一系列用来在给定对象上下文中执行代码块的函数：<code>let</code>、 <code>run</code>、 <code>with</code>、 <code>apply</code> 以及 <code>also</code>。 关于不同情况下选择正确作用域函数的准则，请参考<a href="https://book.kotlincn.net/text/scope-functions.html">作用域函数</a>。</p><h2 id="库的编码规范"><a href="#库的编码规范" class="headerlink" title="库的编码规范"></a>库的编码规范</h2><p>在编写库时，建议遵循一组额外的规则以确保 API 的稳定性：</p><ul><li>总是显式指定成员的可见性（以避免将声明意外暴露为公有 API ）</li><li>总是显式指定函数返回类型以及属性类型（以避免当实现改变时意外更改返回类型）</li><li>为所有公有成员提供 <a href="https://book.kotlincn.net/text/kotlin-doc.html">KDoc</a> 注释，不需要任何新文档的覆盖成员除外 （以支持为该库生成文档）</li></ul><p>在<a href="https://book.kotlincn.net/text/jvm-api-guidelines-introduction.html">库创建者指南</a>中详细了解为库编写 API 时需要考虑的最佳实践与意见。</p>]]></content>
    
    
    <categories>
      
      <category>Kotlin学习笔记</category>
      
      <category>Kotlin基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin习惯用法</title>
    <link href="/2023/10/30/Kotlin02%E4%B9%A0%E6%83%AF%E7%94%A8%E6%B3%95/"/>
    <url>/2023/10/30/Kotlin02%E4%B9%A0%E6%83%AF%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="习惯用法"><a href="#习惯用法" class="headerlink" title="习惯用法"></a>习惯用法</h1><p>一些在 Kotlin 中广泛使用的语法习惯，如果你有更喜欢的语法习惯或者风格，建一个 pull request 贡献给我们吧！</p><h3 id="创建-DTO（POJO-POCO）"><a href="#创建-DTO（POJO-POCO）" class="headerlink" title="创建 DTO（POJO&#x2F;POCO）"></a>创建 DTO（POJO&#x2F;POCO）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-keyword">val</span> name: String, <span class="hljs-keyword">val</span> email: String)<br></code></pre></td></tr></table></figure><p>会为 <code>Customer</code> 类提供以下功能：</p><ul><li>所有属性的 getter （对于 <code>var</code> 定义的还有 setter）</li><li><code>equals()</code></li><li><code>hashCode()</code></li><li><code>toString()</code></li><li><code>copy()</code></li><li>所有属性的 <code>component1()</code>、 <code>component2()</code>……等等（参见<a href="https://book.kotlincn.net/text/data-classes.html">数据类</a>）</li></ul><h3 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">(a: <span class="hljs-type">Int</span> = <span class="hljs-number">0</span>, b: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;&quot;</span>)</span></span> &#123; …… &#125;<br></code></pre></td></tr></table></figure><h3 id="过滤-list"><a href="#过滤-list" class="headerlink" title="过滤 list"></a>过滤 list</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> positives = list.filter &#123; x -&gt; x &gt; <span class="hljs-number">0</span> &#125;<br></code></pre></td></tr></table></figure><p>或者可以更短:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> positives = list.filter &#123; it &gt; <span class="hljs-number">0</span> &#125;<br></code></pre></td></tr></table></figure><p>了解 <a href="https://book.kotlincn.net/text/java-to-kotlin-collections-guide.html#%E8%BF%87%E6%BB%A4%E5%85%83%E7%B4%A0">Java 与 Kotlin 过滤</a>的区别。</p><h3 id="检测元素是否存在于集合中"><a href="#检测元素是否存在于集合中" class="headerlink" title="检测元素是否存在于集合中"></a>检测元素是否存在于集合中</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;john@example.com&quot;</span> <span class="hljs-keyword">in</span> emailsList) &#123; …… &#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jane@example.com&quot;</span> !<span class="hljs-keyword">in</span> emailsList) &#123; …… &#125;<br></code></pre></td></tr></table></figure><h3 id="字符串内插"><a href="#字符串内插" class="headerlink" title="字符串内插"></a>字符串内插</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">println(<span class="hljs-string">&quot;Name <span class="hljs-variable">$name</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>了解 <a href="https://book.kotlincn.net/text/java-to-kotlin-idioms-strings.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5">Java 与 Kotlin 字符串连接</a>的区别。</p><h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">when</span> (x) &#123;<br>    <span class="hljs-keyword">is</span> Foo -&gt; ……<br>    <span class="hljs-keyword">is</span> Bar -&gt; ……<br>    <span class="hljs-keyword">else</span>   -&gt; ……<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="只读-list"><a href="#只读-list" class="headerlink" title="只读 list"></a>只读 list</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> list = listOf(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="只读-map"><a href="#只读-map" class="headerlink" title="只读 map"></a>只读 map</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> map = mapOf(<span class="hljs-string">&quot;a&quot;</span> to <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span> to <span class="hljs-number">2</span>, <span class="hljs-string">&quot;c&quot;</span> to <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h2 id="访问-map-条目"><a href="#访问-map-条目" class="headerlink" title="访问 map 条目"></a>访问 map 条目</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">println(map[<span class="hljs-string">&quot;key&quot;</span>])<br>map[<span class="hljs-string">&quot;key&quot;</span>] = value<br></code></pre></td></tr></table></figure><h2 id="遍历-map-或者-pair-型-list"><a href="#遍历-map-或者-pair-型-list" class="headerlink" title="遍历 map 或者 pair 型 list"></a>遍历 map 或者 pair 型 list</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> ((k, v) <span class="hljs-keyword">in</span> map) &#123;<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$k</span> -&gt; <span class="hljs-variable">$v</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>k</code> 与 <code>v</code> 可以是任何适宜的名称，例如 <code>name</code> 与 <code>age</code>。</p><h3 id="区间迭代"><a href="#区间迭代" class="headerlink" title="区间迭代"></a>区间迭代</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.100</span>) &#123; …… &#125;  <span class="hljs-comment">// 闭区间：包含 100</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span>.&lt; <span class="hljs-number">100</span>) &#123; …… &#125; <span class="hljs-comment">// 左开右闭区间：不包含 100</span><br><span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> <span class="hljs-number">2.</span><span class="hljs-number">.10</span> step <span class="hljs-number">2</span>) &#123; …… &#125;<br><span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> <span class="hljs-number">10</span> downTo <span class="hljs-number">1</span>) &#123; …… &#125;<br>(<span class="hljs-number">1.</span><span class="hljs-number">.10</span>).forEach &#123; …… &#125;<br></code></pre></td></tr></table></figure><h2 id="延迟属性"><a href="#延迟属性" class="headerlink" title="延迟属性"></a>延迟属性</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> p: String <span class="hljs-keyword">by</span> lazy &#123; <span class="hljs-comment">// 该值仅在首次访问时计算</span><br>    <span class="hljs-comment">// 计算该字符串</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="扩展函数"><a href="#扩展函数" class="headerlink" title="扩展函数"></a>扩展函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> String.<span class="hljs-title">spaceToCamelCase</span><span class="hljs-params">()</span></span> &#123; …… &#125;<br><br><span class="hljs-string">&quot;Convert this to camelcase&quot;</span>.spaceToCamelCase()<br></code></pre></td></tr></table></figure><h2 id="创建单例"><a href="#创建单例" class="headerlink" title="创建单例"></a>创建单例</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">object</span> Resource &#123;<br>    <span class="hljs-keyword">val</span> name = <span class="hljs-string">&quot;Name&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实例化一个抽象类"><a href="#实例化一个抽象类" class="headerlink" title="实例化一个抽象类"></a>实例化一个抽象类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAbstractClass</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> myObject = <span class="hljs-keyword">object</span> : MyAbstractClass() &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-comment">// ……</span><br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">// ……</span><br>        &#125;<br>    &#125;<br>    myObject.doSomething()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="if-not-null-缩写"><a href="#if-not-null-缩写" class="headerlink" title="if-not-null 缩写"></a>if-not-null 缩写</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> files = File(<span class="hljs-string">&quot;Test&quot;</span>).listFiles()<br><br>println(files?.size) <span class="hljs-comment">// 如果 files 不是 null，那么输出其大小（size）</span><br></code></pre></td></tr></table></figure><h2 id="if-not-null-else-缩写"><a href="#if-not-null-else-缩写" class="headerlink" title="if-not-null-else 缩写"></a>if-not-null-else 缩写</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> files = File(<span class="hljs-string">&quot;Test&quot;</span>).listFiles()<br><br><span class="hljs-comment">// For simple fallback values:</span><br>println(files?.size ?: <span class="hljs-string">&quot;empty&quot;</span>) <span class="hljs-comment">// 如果 files 为 null，那么输出“empty”</span><br><br><span class="hljs-comment">// 如需在代码块中计算更复杂的备用值，请使用 `run`</span><br><span class="hljs-keyword">val</span> filesSize = files?.size ?: run &#123; <br>    <span class="hljs-keyword">val</span> someSize = getSomeSize()<br>    someSize * <span class="hljs-number">2</span><br>&#125;<br>println(filesSize)<br></code></pre></td></tr></table></figure><h2 id="if-null-执行一个语句"><a href="#if-null-执行一个语句" class="headerlink" title="if null 执行一个语句"></a>if null 执行一个语句</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> values = ……<br><span class="hljs-keyword">val</span> email = values[<span class="hljs-string">&quot;email&quot;</span>] ?: <span class="hljs-keyword">throw</span> IllegalStateException(<span class="hljs-string">&quot;Email is missing!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="在可能会空的集合中取第一元素"><a href="#在可能会空的集合中取第一元素" class="headerlink" title="在可能会空的集合中取第一元素"></a>在可能会空的集合中取第一元素</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> emails = …… <span class="hljs-comment">// 可能会是空集合</span><br><span class="hljs-keyword">val</span> mainEmail = emails.firstOrNull() ?: <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>了解 <a href="https://book.kotlincn.net/text/java-to-kotlin-collections-guide.html#%E8%8E%B7%E5%8F%96%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%A9%BA%E7%9A%84%E9%9B%86%E5%90%88%E7%9A%84%E9%A6%96%E6%9C%AB%E5%85%83%E7%B4%A0">Java 与 Kotlin 获取第一元素</a>的差别。</p><h2 id="if-not-null-执行代码"><a href="#if-not-null-执行代码" class="headerlink" title="if not null 执行代码"></a>if not null 执行代码</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> value = ……<br><br>value?.let &#123;<br>    …… <span class="hljs-comment">// 如果非空会执行这个代码块</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="映射可空值（如果非空的话）"><a href="#映射可空值（如果非空的话）" class="headerlink" title="映射可空值（如果非空的话）"></a>映射可空值（如果非空的话）</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> value = ……<br><br><span class="hljs-keyword">val</span> mapped = value?.let &#123; transformValue(it) &#125; ?: defaultValue <br><span class="hljs-comment">// 如果该值或其转换结果为空，那么返回 defaultValue。</span><br></code></pre></td></tr></table></figure><h2 id="返回-when-表达式"><a href="#返回-when-表达式" class="headerlink" title="返回 when 表达式"></a>返回 when 表达式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">transform</span><span class="hljs-params">(color: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">when</span> (color) &#123;<br>        <span class="hljs-string">&quot;Red&quot;</span> -&gt; <span class="hljs-number">0</span><br>        <span class="hljs-string">&quot;Green&quot;</span> -&gt; <span class="hljs-number">1</span><br>        <span class="hljs-string">&quot;Blue&quot;</span> -&gt; <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span> -&gt; <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid color param value&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="try-catch-表达式"><a href="#try-catch-表达式" class="headerlink" title="try-catch 表达式"></a>try-catch 表达式</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> result = <span class="hljs-keyword">try</span> &#123;<br>        count()<br>    &#125; <span class="hljs-keyword">catch</span> (e: ArithmeticException) &#123;<br>        <span class="hljs-keyword">throw</span> IllegalStateException(e)<br>    &#125;<br><br>    <span class="hljs-comment">// 使用 result</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if-表达式"><a href="#if-表达式" class="headerlink" title="if 表达式"></a>if 表达式</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> y = <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-string">&quot;one&quot;</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-string">&quot;two&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-string">&quot;other&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="返回类型为-Unit-的方法的构建器风格用法"><a href="#返回类型为-Unit-的方法的构建器风格用法" class="headerlink" title="返回类型为 Unit 的方法的构建器风格用法"></a>返回类型为 Unit 的方法的构建器风格用法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">arrayOfMinusOnes</span><span class="hljs-params">(size: <span class="hljs-type">Int</span>)</span></span>: IntArray &#123;<br>    <span class="hljs-keyword">return</span> IntArray(size).apply &#123; fill(-<span class="hljs-number">1</span>) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="单表达式函数"><a href="#单表达式函数" class="headerlink" title="单表达式函数"></a>单表达式函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">theAnswer</span><span class="hljs-params">()</span></span> = <span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">theAnswer</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">42</span><br>&#125;<br></code></pre></td></tr></table></figure><p>单表达式函数与其它惯用法一起使用能简化代码，例如和 <code>when</code> 表达式一起使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">transform</span><span class="hljs-params">(color: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Int</span> = <span class="hljs-keyword">when</span> (color) &#123;<br>    <span class="hljs-string">&quot;Red&quot;</span> -&gt; <span class="hljs-number">0</span><br>    <span class="hljs-string">&quot;Green&quot;</span> -&gt; <span class="hljs-number">1</span><br>    <span class="hljs-string">&quot;Blue&quot;</span> -&gt; <span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid color param value&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对一个对象实例调用多个方法-（with）"><a href="#对一个对象实例调用多个方法-（with）" class="headerlink" title="对一个对象实例调用多个方法 （with）"></a>对一个对象实例调用多个方法 （with）</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Turtle</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">penDown</span><span class="hljs-params">()</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">penUp</span><span class="hljs-params">()</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">turn</span><span class="hljs-params">(degrees: <span class="hljs-type">Double</span>)</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">forward</span><span class="hljs-params">(pixels: <span class="hljs-type">Double</span>)</span></span><br>&#125;<br><br><span class="hljs-keyword">val</span> myTurtle = Turtle()<br>with(myTurtle) &#123; <span class="hljs-comment">// 画一个 100 像素的正方形</span><br>    penDown()<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.4</span>) &#123;<br>        forward(<span class="hljs-number">100.0</span>)<br>        turn(<span class="hljs-number">90.0</span>)<br>    &#125;<br>    penUp()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置对象的属性（apply）"><a href="#配置对象的属性（apply）" class="headerlink" title="配置对象的属性（apply）"></a>配置对象的属性（apply）</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> myRectangle = Rectangle().apply &#123;<br>    length = <span class="hljs-number">4</span><br>    breadth = <span class="hljs-number">5</span><br>    color = <span class="hljs-number">0xFAFAFA</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这对于配置未出现在对象构造函数中的属性非常有用。</p><h2 id="Java-7-的-try-with-resources"><a href="#Java-7-的-try-with-resources" class="headerlink" title="Java 7 的 try-with-resources"></a>Java 7 的 try-with-resources</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> stream = Files.newInputStream(Paths.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;/some/file.txt&quot;</span>))<br>stream.buffered().reader().use &#123; reader -&gt;<br>    println(reader.readText())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="需要泛型信息的泛型函数"><a href="#需要泛型信息的泛型函数" class="headerlink" title="需要泛型信息的泛型函数"></a>需要泛型信息的泛型函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//  public final class Gson &#123;</span><br><span class="hljs-comment">//     ……</span><br><span class="hljs-comment">//     public &lt;T&gt; T fromJson(JsonElement json, Class&lt;T&gt; classOfT) throws JsonSyntaxException &#123;</span><br><span class="hljs-comment">//     ……</span><br><br><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;<span class="hljs-keyword">reified</span> T: Any&gt;</span> Gson.<span class="hljs-title">fromJson</span><span class="hljs-params">(json: <span class="hljs-type">JsonElement</span>)</span></span>: T = <span class="hljs-keyword">this</span>.fromJson(json, T::<span class="hljs-keyword">class</span>.java)<br></code></pre></td></tr></table></figure><h2 id="交换两个变量"><a href="#交换两个变量" class="headerlink" title="交换两个变量"></a>交换两个变量</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span><br>a = b.also &#123; b = a &#125;<br></code></pre></td></tr></table></figure><h3 id="将代码标记为不完整（TODO）"><a href="#将代码标记为不完整（TODO）" class="headerlink" title="将代码标记为不完整（TODO）"></a>将代码标记为不完整（TODO）</h3><p>Kotlin 的标准库有一个 <code>TODO()</code> 函数，该函数总是抛出一个 <code>NotImplementedError</code>。 其返回类型为 <code>Nothing</code>，因此无论预期类型是什么都可以使用它。 还有一个接受原因参数的重载：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">calcTaxes</span><span class="hljs-params">()</span></span>: BigDecimal = TODO(<span class="hljs-string">&quot;Waiting for feedback from accounting&quot;</span>)<br></code></pre></td></tr></table></figure><p>IntelliJ IDEA 的 kotlin 插件理解 <code>TODO()</code> 的语言，并且会自动在 TODO 工具窗口中添加代码指示。</p>]]></content>
    
    
    <categories>
      
      <category>Kotlin学习笔记</category>
      
      <category>Kotlin基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin基本语法</title>
    <link href="/2023/10/30/Kotlin01%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/10/30/Kotlin01%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>这是一组基本语法元素及示例。在每段的末尾都有一个指向相关主题详述的链接。</p><h2 id="包的定义与导入"><a href="#包的定义与导入" class="headerlink" title="包的定义与导入"></a>包的定义与导入</h2><p>包的声明应处于源文件顶部。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> my.demo<br><br><span class="hljs-keyword">import</span> kotlin.text.*<br><br><span class="hljs-comment">// ……</span><br></code></pre></td></tr></table></figure><p>目录与包的结构无需匹配：源代码可以在文件系统的任意位置。</p><p>参见<a href="https://book.kotlincn.net/text/packages.html">包</a>。</p><h2 id="程序入口点"><a href="#程序入口点" class="headerlink" title="程序入口点"></a>程序入口点</h2><p>Kotlin 应用程序的入口点是 <code>main</code> 函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    println(<span class="hljs-string">&quot;Hello world!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main</code> 的另一种形式接受可变数量的 <code>String</code> 参数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    println(args.contentToString())<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输出打到标准输出"><a href="#输出打到标准输出" class="headerlink" title="输出打到标准输出"></a>输出打到标准输出</h2><p><code>print</code> 将其参数打到标准输出。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    print(<span class="hljs-string">&quot;Hello &quot;</span>)<br>    print(<span class="hljs-string">&quot;world!&quot;</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>println</code> 输出其参数并添加换行符，以便接下来输出的内容出现在下一行。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    println(<span class="hljs-string">&quot;Hello world!&quot;</span>)<br>    println(<span class="hljs-number">42</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>带有两个 <code>Int</code> 参数、返回 <code>Int</code> 的函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    print(<span class="hljs-string">&quot;sum of 3 and 5 is &quot;</span>)<br>    println(sum(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>函数体可以是表达式。其返回类型可以推断出来。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span> = a + b<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    println(<span class="hljs-string">&quot;sum of 19 and 23 is <span class="hljs-subst">$&#123;sum(<span class="hljs-number">19</span>, <span class="hljs-number">23</span>)&#125;</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>返回无意义的值的函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printSum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Unit</span> &#123;<br>    println(<span class="hljs-string">&quot;sum of <span class="hljs-variable">$a</span> and <span class="hljs-variable">$b</span> is <span class="hljs-subst">$&#123;a + b&#125;</span>&quot;</span>)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    printSum(-<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Unit</code> 返回类型可以省略。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printSum</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span> &#123;<br>    println(<span class="hljs-string">&quot;sum of <span class="hljs-variable">$a</span> and <span class="hljs-variable">$b</span> is <span class="hljs-subst">$&#123;a + b&#125;</span>&quot;</span>)<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    printSum(-<span class="hljs-number">1</span>, <span class="hljs-number">8</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/functions.html">函数</a>。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义只读局部变量使用关键字 <code>val</code> 定义。只能为其赋值一次。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span> = <span class="hljs-number">1</span>  <span class="hljs-comment">// 立即赋值</span><br>    <span class="hljs-keyword">val</span> b = <span class="hljs-number">2</span>   <span class="hljs-comment">// 自动推断出 `Int` 类型</span><br>    <span class="hljs-keyword">val</span> c: <span class="hljs-built_in">Int</span>  <span class="hljs-comment">// 如果没有初始值类型不能省略</span><br>    c = <span class="hljs-number">3</span>       <span class="hljs-comment">// 明确赋值</span><br><span class="hljs-comment">//sampleEnd</span><br>    println(<span class="hljs-string">&quot;a = <span class="hljs-variable">$a</span>, b = <span class="hljs-variable">$b</span>, c = <span class="hljs-variable">$c</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可重新赋值的变量使用 <code>var</code> 关键字。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span> <span class="hljs-comment">// 自动推断出 `Int` 类型</span><br>    x += <span class="hljs-number">1</span><br><span class="hljs-comment">//sampleEnd</span><br>    println(<span class="hljs-string">&quot;x = <span class="hljs-variable">$x</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在顶层声明变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-keyword">val</span> PI = <span class="hljs-number">3.14</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">incrementX</span><span class="hljs-params">()</span></span> &#123; <br>    x += <span class="hljs-number">1</span> <br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    println(<span class="hljs-string">&quot;x = <span class="hljs-variable">$x</span>; PI = <span class="hljs-variable">$PI</span>&quot;</span>)<br>    incrementX()<br>    println(<span class="hljs-string">&quot;incrementX()&quot;</span>)<br>    println(<span class="hljs-string">&quot;x = <span class="hljs-variable">$x</span>; PI = <span class="hljs-variable">$PI</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/properties.html">属性</a>。</p><h2 id="创建类与实例"><a href="#创建类与实例" class="headerlink" title="创建类与实例"></a>创建类与实例</h2><p>使用 <code>class</code> 关键字定义类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span><br></code></pre></td></tr></table></figure><p>类的属性可以在其声明或主体中列出。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-keyword">var</span> height: <span class="hljs-built_in">Double</span>, <span class="hljs-keyword">var</span> length: <span class="hljs-built_in">Double</span>) &#123;<br>    <span class="hljs-keyword">var</span> perimeter = (height + length) * <span class="hljs-number">2</span> <br>&#125;<br></code></pre></td></tr></table></figure><p>具有类声明中所列参数的默认构造函数会自动可用。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-keyword">var</span> height: <span class="hljs-built_in">Double</span>, <span class="hljs-keyword">var</span> length: <span class="hljs-built_in">Double</span>) &#123;<br>    <span class="hljs-keyword">var</span> perimeter = (height + length) * <span class="hljs-number">2</span> <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> rectangle = Rectangle(<span class="hljs-number">5.0</span>, <span class="hljs-number">2.0</span>)<br>    println(<span class="hljs-string">&quot;The perimeter is <span class="hljs-subst">$&#123;rectangle.perimeter&#125;</span>&quot;</span>)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>类之间继承由冒号（<code>:</code>）声明。默认情况下类都是 final 的；如需让一个类可继承， 请将其标记为 <code>open</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>(<span class="hljs-keyword">var</span> height: <span class="hljs-built_in">Double</span>, <span class="hljs-keyword">var</span> length: <span class="hljs-built_in">Double</span>): Shape() &#123;<br>    <span class="hljs-keyword">var</span> perimeter = (height + length) * <span class="hljs-number">2</span> <br>&#125;<br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/classes.html">类</a>以及<a href="https://book.kotlincn.net/text/object-declarations.html">对象与实例</a>。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>与大多数现代语言一样，Kotlin 支持单行（或<em>行末</em>）与多行（<em>块</em>）注释。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 这是一个行注释</span><br><br><span class="hljs-comment">/* 这是一个多行的</span><br><span class="hljs-comment">   块注释。 */</span><br></code></pre></td></tr></table></figure><p>Kotlin 中的块注释可以嵌套。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/* 注释从这里开始</span><br><span class="hljs-comment"><span class="hljs-comment">/* 包含嵌套的注释 *&amp;#8288;/     </span></span><br><span class="hljs-comment"><span class="hljs-comment">并且在这里结束。 */</span></span><br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/kotlin-doc.html">编写 Kotlin 代码文档</a> 查看关于文档注释语法的信息。</p><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 模板中的简单名称：</span><br>    <span class="hljs-keyword">val</span> s1 = <span class="hljs-string">&quot;a is <span class="hljs-variable">$a</span>&quot;</span> <br><br>    a = <span class="hljs-number">2</span><br>    <span class="hljs-comment">// 模板中的任意表达式：</span><br>    <span class="hljs-keyword">val</span> s2 = <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;s1.replace(<span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-string">&quot;was&quot;</span>)&#125;</span>, but now is <span class="hljs-variable">$a</span>&quot;</span><br><span class="hljs-comment">//sampleEnd</span><br>    println(s2)<br>&#125;<br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/strings.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF">字符串模板</a>。</p><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">maxOf</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>        <span class="hljs-keyword">return</span> a<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> b<br>    &#125;<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    println(<span class="hljs-string">&quot;max of 0 and 42 is <span class="hljs-subst">$&#123;maxOf(<span class="hljs-number">0</span>, <span class="hljs-number">42</span>)&#125;</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在 Kotlin 中，<code>if</code> 也可以用作表达式。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">maxOf</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>)</span></span> = <span class="hljs-keyword">if</span> (a &gt; b) a <span class="hljs-keyword">else</span> b<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    println(<span class="hljs-string">&quot;max of 0 and 42 is <span class="hljs-subst">$&#123;maxOf(<span class="hljs-number">0</span>, <span class="hljs-number">42</span>)&#125;</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/control-flow.html#if-%E8%A1%A8%E8%BE%BE%E5%BC%8F"><code>if</code> 表达式</a>。</p><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> items = listOf(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;kiwifruit&quot;</span>)<br>    <span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> items) &#123;<br>        println(item)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> items = listOf(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;kiwifruit&quot;</span>)<br>    <span class="hljs-keyword">for</span> (index <span class="hljs-keyword">in</span> items.indices) &#123;<br>        println(<span class="hljs-string">&quot;item at <span class="hljs-variable">$index</span> is <span class="hljs-subst">$&#123;items[index]&#125;</span>&quot;</span>)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>参见 <a href="https://book.kotlincn.net/text/control-flow.html#for-%E5%BE%AA%E7%8E%AF">for 循环</a>。</p><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> items = listOf(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;kiwifruit&quot;</span>)<br>    <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (index &lt; items.size) &#123;<br>        println(<span class="hljs-string">&quot;item at <span class="hljs-variable">$index</span> is <span class="hljs-subst">$&#123;items[index]&#125;</span>&quot;</span>)<br>        index++<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>参见 <a href="https://book.kotlincn.net/text/control-flow.html#while-%E5%BE%AA%E7%8E%AF">while 循环</a>。</p><h2 id="when-表达式"><a href="#when-表达式" class="headerlink" title="when 表达式"></a>when 表达式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">describe</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span>: String =<br>    <span class="hljs-keyword">when</span> (obj) &#123;<br>        <span class="hljs-number">1</span>          -&gt; <span class="hljs-string">&quot;One&quot;</span><br>        <span class="hljs-string">&quot;Hello&quot;</span>    -&gt; <span class="hljs-string">&quot;Greeting&quot;</span><br>        <span class="hljs-keyword">is</span> <span class="hljs-built_in">Long</span>    -&gt; <span class="hljs-string">&quot;Long&quot;</span><br>        !<span class="hljs-keyword">is</span> String -&gt; <span class="hljs-string">&quot;Not a string&quot;</span><br>        <span class="hljs-keyword">else</span>       -&gt; <span class="hljs-string">&quot;Unknown&quot;</span><br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    println(describe(<span class="hljs-number">1</span>))<br>    println(describe(<span class="hljs-string">&quot;Hello&quot;</span>))<br>    println(describe(<span class="hljs-number">1000L</span>))<br>    println(describe(<span class="hljs-number">2</span>))<br>    println(describe(<span class="hljs-string">&quot;other&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>参见 <a href="https://book.kotlincn.net/text/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式</a>。</p><h2 id="使用区间（range）"><a href="#使用区间（range）" class="headerlink" title="使用区间（range）"></a>使用区间（range）</h2><p>使用 <code>in</code> 操作符来检测某个数字是否在指定区间内。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> x = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">val</span> y = <span class="hljs-number">9</span><br>    <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span>.y+<span class="hljs-number">1</span>) &#123;<br>        println(<span class="hljs-string">&quot;fits in range&quot;</span>)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>检测某个数字是否在指定区间外。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> list = listOf(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> (-<span class="hljs-number">1</span> !<span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>.list.lastIndex) &#123;<br>        println(<span class="hljs-string">&quot;-1 is out of range&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (list.size !<span class="hljs-keyword">in</span> list.indices) &#123;<br>        println(<span class="hljs-string">&quot;list size is out of valid list indices range, too&quot;</span>)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>区间迭代。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.5</span>) &#123;<br>        print(x)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或数列迭代。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.10</span> step <span class="hljs-number">2</span>) &#123;<br>        print(x)<br>    &#125;<br>    println()<br>    <span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> <span class="hljs-number">9</span> downTo <span class="hljs-number">0</span> step <span class="hljs-number">3</span>) &#123;<br>        print(x)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/ranges.html">区间与数列</a>。</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>对集合进行迭代。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> items = listOf(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;kiwifruit&quot;</span>)<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> items) &#123;<br>        println(item)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>in</code> 操作符来判断集合内是否包含某实例。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> items = setOf(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;kiwifruit&quot;</span>)<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">when</span> &#123;<br>        <span class="hljs-string">&quot;orange&quot;</span> <span class="hljs-keyword">in</span> items -&gt; println(<span class="hljs-string">&quot;juicy&quot;</span>)<br>        <span class="hljs-string">&quot;apple&quot;</span> <span class="hljs-keyword">in</span> items -&gt; println(<span class="hljs-string">&quot;apple is fine too&quot;</span>)<br>    &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用 lambda 表达式来过滤（filter）与映射（map）集合：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-keyword">val</span> fruits = listOf(<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;avocado&quot;</span>, <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;kiwifruit&quot;</span>)<br>    fruits<br>      .filter &#123; it.startsWith(<span class="hljs-string">&quot;a&quot;</span>) &#125;<br>      .sortedBy &#123; it &#125;<br>      .map &#123; it.uppercase() &#125;<br>      .forEach &#123; println(it) &#125;<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/collections-overview.html">集合概述</a>。</p><h2 id="空值与空检测"><a href="#空值与空检测" class="headerlink" title="空值与空检测"></a>空值与空检测</h2><p>当可能用 <code>null</code> 值时，必须将引用显式标记为可空。可空类型名称以问号（<code>?</code>）结尾。</p><p>如果 <code>str</code> 的内容不是数字返回 <code>null</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(str: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>    <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用返回可空值的函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(str: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>    <span class="hljs-keyword">return</span> str.toIntOrNull()<br>&#125;<br><br><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printProduct</span><span class="hljs-params">(arg1: <span class="hljs-type">String</span>, arg2: <span class="hljs-type">String</span>)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> x = parseInt(arg1)<br>    <span class="hljs-keyword">val</span> y = parseInt(arg2)<br><br>    <span class="hljs-comment">// 直接使用 `x * y` 会导致编译错误，因为它们可能为 null</span><br>    <span class="hljs-keyword">if</span> (x != <span class="hljs-literal">null</span> &amp;&amp; y != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 在空检测后，x 与 y 会自动转换为非空值（non-nullable）</span><br>        println(x * y)<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        println(<span class="hljs-string">&quot;&#x27;<span class="hljs-variable">$arg1</span>&#x27; or &#x27;<span class="hljs-variable">$arg2</span>&#x27; is not a number&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    printProduct(<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>)<br>    printProduct(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>)<br>    printProduct(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parseInt</span><span class="hljs-params">(str: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>    <span class="hljs-keyword">return</span> str.toIntOrNull()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printProduct</span><span class="hljs-params">(arg1: <span class="hljs-type">String</span>, arg2: <span class="hljs-type">String</span>)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> x = parseInt(arg1)<br>    <span class="hljs-keyword">val</span> y = parseInt(arg2)<br><br><span class="hljs-comment">//sampleStart</span><br>    <span class="hljs-comment">// ……</span><br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>) &#123;<br>        println(<span class="hljs-string">&quot;Wrong number format in arg1: &#x27;<span class="hljs-variable">$arg1</span>&#x27;&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (y == <span class="hljs-literal">null</span>) &#123;<br>        println(<span class="hljs-string">&quot;Wrong number format in arg2: &#x27;<span class="hljs-variable">$arg2</span>&#x27;&quot;</span>)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br><br>    <span class="hljs-comment">// 在空检测后，x 与 y 会自动转换为非空值</span><br>    println(x * y)<br><span class="hljs-comment">//sampleEnd</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    printProduct(<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>)<br>    printProduct(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>)<br>    printProduct(<span class="hljs-string">&quot;99&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>参见<a href="https://book.kotlincn.net/text/null-safety.html">空安全</a>。</p><h2 id="类型检测与自动类型转换"><a href="#类型检测与自动类型转换" class="headerlink" title="类型检测与自动类型转换"></a>类型检测与自动类型转换</h2><p><code>is</code> 操作符检测一个表达式是否某类型的一个实例。 如果一个不可变的局部变量或属性已经判断出为某类型，那么检测后的分支中可以直接当作该类型使用，无需显式转换：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getStringLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> String) &#123;<br>        <span class="hljs-comment">// `obj` 在该条件分支内自动转换成 `String`</span><br>        <span class="hljs-keyword">return</span> obj.length<br>    &#125;<br><br>    <span class="hljs-comment">// 在离开类型检测分支后，`obj` 仍然是 `Any` 类型</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Getting the length of &#x27;<span class="hljs-variable">$obj</span>&#x27;. Result: <span class="hljs-subst">$&#123;getStringLength(obj) ?: <span class="hljs-string">&quot;Error: The object is not a string&quot;</span>&#125;</span> &quot;</span>)<br>    &#125;<br>    printLength(<span class="hljs-string">&quot;Incomprehensibilities&quot;</span>)<br>    printLength(<span class="hljs-number">1000</span>)<br>    printLength(listOf(Any()))<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getStringLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>    <span class="hljs-keyword">if</span> (obj !<span class="hljs-keyword">is</span> String) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br><br>    <span class="hljs-comment">// `obj` 在这一分支自动转换为 `String`</span><br>    <span class="hljs-keyword">return</span> obj.length<br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Getting the length of &#x27;<span class="hljs-variable">$obj</span>&#x27;. Result: <span class="hljs-subst">$&#123;getStringLength(obj) ?: <span class="hljs-string">&quot;Error: The object is not a string&quot;</span>&#125;</span> &quot;</span>)<br>    &#125;<br>    printLength(<span class="hljs-string">&quot;Incomprehensibilities&quot;</span>)<br>    printLength(<span class="hljs-number">1000</span>)<br>    printLength(listOf(Any()))<br>&#125;<br></code></pre></td></tr></table></figure><p>甚至</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//sampleStart</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getStringLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span>: <span class="hljs-built_in">Int</span>? &#123;<br>    <span class="hljs-comment">// `obj` 在 `&amp;&amp;` 右边自动转换成 `String` 类型</span><br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">is</span> String &amp;&amp; obj.length &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> obj.length<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-comment">//sampleEnd</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printLength</span><span class="hljs-params">(obj: <span class="hljs-type">Any</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Getting the length of &#x27;<span class="hljs-variable">$obj</span>&#x27;. Result: <span class="hljs-subst">$&#123;getStringLength(obj) ?: <span class="hljs-string">&quot;Error: The object is not a string&quot;</span>&#125;</span> &quot;</span>)<br>    &#125;<br>    printLength(<span class="hljs-string">&quot;Incomprehensibilities&quot;</span>)<br>    printLength(<span class="hljs-string">&quot;&quot;</span>)<br>    printLength(<span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="https://hyperskill.org/tracks?category=4&utm_source=jbkotlin_hs&utm_medium=referral&utm_campaign=kotlinlang-docs&utm_content=button_1&utm_term=22.03.23">Kotlin 核心课程</a></p>]]></content>
    
    
    <categories>
      
      <category>Kotlin学习笔记</category>
      
      <category>Kotlin基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDN</title>
    <link href="/2023/10/21/SDN/"/>
    <url>/2023/10/21/SDN/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是-SDN"><a href="#什么是-SDN" class="headerlink" title="什么是 SDN"></a>什么是 SDN</h1><p>软件定义网络<code>Software-defined Networking</code>，简称SDN技术是一种网络管理方法，它支持动态可编程的网络配置，提高了网络性能和管理效率，使网络服务能够像云计算一样提供灵活的定制能力。SDN 将网络设备的转发面与控制面解耦，通过控制器负责网络设备的管理、网络业务的编排和业务流量的调度，具有成本低、集中管理、灵活调度等优点。</p><h1 id="为什么需要-SDN"><a href="#为什么需要-SDN" class="headerlink" title="为什么需要 SDN"></a>为什么需要 SDN</h1><h2 id="传统网络的局限"><a href="#传统网络的局限" class="headerlink" title="传统网络的局限"></a>传统网络的局限</h2><p>传统网络是一个分布式的网络，在二层网络中，设备通过广播的方式传递设备间的可达信息。在三层网络中，设备间通过标准路由协议传递拓扑信息。这些模式要求每台设备必须使用相同的网络协议，保证各厂商的设备可以实现相互通信。随着业务的飞速发展，用户对网络的需求日新月异，一旦原有的基础网络无法满足新需求，就需要上升到协议制定与修改的层面，这样就会导致网络设备升级十分缓慢。</p><p>传统网络为了适应不同的需求和场景，发展也越来越复杂。部署一个传统网络往往需要使用到很多协议，由于标准协议中往往存在一些未明确的地方，导致各厂商的实现有差异。</p><p>传统网络以单台设备为单位，以命令行的方式进行管理。网络管理和业务调度时效率低下，运维成本高。</p><h2 id="SDN-的技术路线"><a href="#SDN-的技术路线" class="headerlink" title="SDN 的技术路线"></a>SDN 的技术路线</h2><p>为了解决传统网络发展滞后、运维成本高的问题，服务提供商开始探索新的网络架构，希望能够将控制面（操作系统和各种软件）与硬件解耦，实现底层操作系统、基础软件协议以及增值业务软件的开源自研，这就诞生了 SDN 技术。</p><p>在传统网络中，网络设备可以分为管理面、控制面和转发面。管理面负责业务的编排和策略的制定，控制面负责操作系统的运行以及各种算法的运算，转发面负责数据包的转发和接收。SDN 的理念是将网络设备的控制和转发功能解耦，使网络设备的控制面可直接编程，将网络服务从底层硬件设备中抽象出来。SDN 架构与传统网络架构的对比如下图所示。</p><p><img src="/img/SDN/%E4%BC%A0%E7%BB%9F%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84%E4%B8%8ESDN%E6%9E%B6%E6%9E%84%E5%AF%B9%E6%AF%94.png" alt="传统网络架构与SDN架构对比"></p><p>经典的 SDN 技术路线强调控制面的剥离，希望能够将网络设备变为白盒设备，实现网络功能的自定义。</p><p>但在 SDN 的发展过程中，由于底层协议的复杂性、软件开发投入等多方面原因，厂商逐渐转向了以自动化运维为主要目标，弱化控制面剥离的 SDN 技术路线。厂商们主张将操作系统以及大部分的软件仍放在硬件设备上进行，保留原有的网络设备形态，通过控制器实现与硬件设备、与网络配置管理工具的对接，由控制器在管理面的维度完成对硬件设备的统一管理和业务编排。下图为两种 SDN 技术路线的对比，经典的 SDN 技术路线又可以称为软件 SDN，而弱化控制面剥离的 SDN 技术路线可以称为硬件 SDN。</p><p><img src="/img/SDN/%E8%BD%AF%E4%BB%B6SDN%E4%B8%8E%E7%A1%AC%E4%BB%B6SDN%E5%AF%B9%E6%AF%94.png" alt="软件SDN与硬件SDN对比"></p><h1 id="SDN-架构"><a href="#SDN-架构" class="headerlink" title="SDN 架构"></a>SDN 架构</h1><p>SDN 架构可分为基础设施层、控制层和应用层。</p><ul><li>基础设施层：主要为转发设备，实现转发功能，例如数据中心交换机。</li><li>控制层：由 SDN 控制软件组成，可通过标准化协议与转发设备进行通信，实现对基础设施层的控制。</li><li>应用层：常见的有基于<code>OpenStack</code>架构的云平台。另外，也可以基于<code>OpenStack</code>构建用户自己的云管理平台。</li></ul><p>SDN 使用北向和南向应用程序接口（API）来进行层与层之间的通信，分为北向 API 和南向 API。北向 API 负责应用层和控制层之间的通信，南向 API 负责基础设施层和控制层之间的通信。</p><p><img src="/img/SDN/SDN%E6%9E%B6%E6%9E%84.png" alt="SDN架构"></p><h1 id="SDN-的优点"><a href="#SDN-的优点" class="headerlink" title="SDN 的优点"></a>SDN 的优点</h1><p>在当前主流的 SDN 架构中，保留了传统硬件设备上的操作系统和基础的协议功能，通过控制器收集整个网络中的设备信息，具有如下优点：</p><ul><li><p>网络可编程</p><p>网络设备提供应用编程接口（API），使得开发和管理人员能够通过编程语言向网络设备发送指令。网络工程师可以使用脚本自动化创建和分配任务，收集网络统计信息。将基于 CLI 与<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/SNMP.html">SNMP</a>的封装脚本变为实实在在的可编程对象，提供了更丰富的功能。</p></li><li><p>网络抽象化</p><p>控制器作为中间层，通过南北向 API 接口与网络设备和应用程序进行交互，将底层的硬件设备抽象为虚拟化的资源池，应用和服务不再与硬件紧密耦合。</p></li><li><p>降低成本</p><p>保留了原有的网络设备，硬件设备仍然具备管理、控制、转发的全部功能，方便进行整网的改造，无需进行大规模的搬迁。控制器的引入将人工配置转变为机器配置，提升运维效率，降低运维成本。</p></li><li><p>业务灵活调度</p><p>传统的硬件设备在网络中无法进行灵活的负载分担，最优路由上往往承担着最重的转发任务，即使 QoS、流控等功能缓解了这一问题，但流量的调度仍然强依赖于管理员对单台设备的配置，因此我们可以将传统的硬件设备看作是一种孤岛式的、分布式的管理模式。SDN 在没有改变硬件设备整体逻辑的基础上，通过增加开放的南北向接口，实现了将计算机语言到配置命令行的翻译，使界面式的管理、集中管理变成了可能，解决了传统网络业务调度不灵活的问题。</p></li><li><p>集中管理</p><p>传统网络设备的管理是分布式的，单台网络设备不感知整个网络的状态。网络管理员使用控制器来管理底层硬件设备，编排网络业务，分配网络资源和调整流量优先级。管理员可以直接感知整个网络的状态，及时调整带宽和优化策略，便于进行整网的管理。</p></li><li><p>开放性</p><p>SDN 架构支持供应商开发自己的生态系统，开放的 API 支持云编排、OSS&#x2F;BSS、SaaS 等多种应用程序，同时也可以通过<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/OpenFlow.html">Openflow</a>控制多个供应商的硬件。</p></li></ul><h1 id="SDN-与-NFV-有什么区别"><a href="#SDN-与-NFV-有什么区别" class="headerlink" title="SDN 与 NFV 有什么区别"></a>SDN 与 NFV 有什么区别</h1><p><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/NFV.html">NFV</a>也是一种网络架构，它将传统物理设备的网络功能封装成独立的模块化软件，通过在硬件设备上运行不同的模块化软件，在单一硬件设备上实现多样化的网络功能。</p><p>SDN 和 NFV 的相似之处主要体现在如下方面：</p><ul><li>都以实现网络虚拟化为目标，实现物理设备的资源池化。</li><li>都提升了网络管理和业务编排效率。</li><li>都希望通过界面操作或者编程语言来进行网络编排。</li></ul><p>SDN 和 NFV 的不同之处参见下图。</p><p><img src="/img/SDN/NFV%E4%B8%8ESDN%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C.png" alt="NFV与SDN有什么不同"></p><p>SDN 抽象物理网络资源（交换机、路由器等），并将决策转移到虚拟网络控制平面。控制平面决定将流量发送到哪里，而硬件继续引导和处理流量，无需依赖标准的硬件设备。NFV 的目标是将所有物理网络资源进行虚拟化，允许网络在不添加更多设备的情况下增长，这依赖于标准的硬件设备。</p><p>其实经典 SDN 架构也将硬件与软件解耦作为目标，但在实现过程中由于软件研发成本、设备替换等原因的影响，现行的 SDN 方案弱化了控制面的分离，仅以网络自动化运维为目标。</p><h1 id="SDN-的未来与挑战"><a href="#SDN-的未来与挑战" class="headerlink" title="SDN 的未来与挑战"></a>SDN 的未来与挑战</h1><p>在数据中心领域，大多数大规模数据中心已经采用扁平化架构，这给网络设备的管理带来了极大的挑战。SDN 带来的自动化运维、集中管理在数据中心的自动化调配以及扩容中有极大的应用空间。</p><p>在视频领域，由于 SDN 支持数据流的实时调配，使得网络能够承载更多的流量。</p><p>在机器学习和人工智能领域，SDN 也会受到运营需求和软件创新的影响，提供更丰富、更新潮的网络体验。</p><p>在未来的网络自动驾驶（ADN）中，SDN 架构也能够发挥重要作用。</p><p>SDN 并非没有缺点，与其他 IT 产品一样，SDN 存在安全、扩展以及缺乏广泛合作、缺乏生态的问题。</p><ul><li><p>集中管理的安全风险</p><p>虽然集中管理十分方便，但这也是一种安全风险。集中管理的单节点被攻击，整个网络可能都会受到影响。</p></li><li><p>SDN 控制器的瓶颈</p><p>对于软件完全从硬件上分离的 SDN 思路来说，控制器的软件开发难度、控制器的计算压力都是巨大的挑战。</p></li><li><p>北向 API 缺乏统一标准</p><p>缺乏标准的北向 API 导致供应商提供的接口不统一，应用程序开发困难上升，同一组开发人员必须同时开发与不同控制器的相互操作。</p></li></ul><h1 id="华为-SDN-解决方案"><a href="#华为-SDN-解决方案" class="headerlink" title="华为 SDN 解决方案"></a>华为 SDN 解决方案</h1><p>目前华为解决方案通过 iMaster-NCE 实现对网络设备的统一管理和自动化运维，为 IT 应用和云平台提供可自动运维的网络服务。面向园区网络提出了 CloudCampus 解决方案，面向数据中心网络提出了<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/CloudFabric.html">CloudFabric</a>解决方案，面向无线网络提出了<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/SD-WAN.html">SD-WAN</a>解决方案。</p><p><a href="https://info.support.huawei.com/network/ptmngsys/Web/CloudCampus/solutionDocumentation.html">CloudCampus 智简园区网络解决方案</a>：华为 CloudCampus 解决方案基于 ADN（自动驾驶网络）的理念和架构，应用 5G、<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/WiFi+6.html">Wi-Fi 6</a>、SDN、云和智能等技术，为各组织构建满足一网接入全千兆，一跳上云智体验，统一管理新运维的园区网络，可提升数字化运营效率，并综合性地降低园区网络 CAPEX 和 OPEX。</p><p><a href="https://info.support.huawei.com/network/ptmngsys/Web/CloudFabric/solutionDocumentation.html">CloudFabric 数据中心网络解决方案</a>：CloudFabric 是华为推出的数据中心网络 SDN 解决方案，该方案由华为数据中心 CloudEngine 系列交换机配合华为数据中心控制器 iMaster NCE-Fabric、智能网络分析平台 iMaster NCE-FabricInsight 以及<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/HiSec.html">安全解决方案</a><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/HiSec.html">HiSec</a>，为客户提供覆盖数据中心网络的“规划建设 → 业务发放 → 运维监控 → 变更优化”全生命周期的极简运营体验；对网络故障实现发现、分析、隔离的智能闭环；同时 CloudFabric 还能满足数据中心全以太网络演进，可融合计算专网与存储专网，实现以太零丢包，提升计算和存储性能。</p><p><a href="https://info.support.huawei.com/network/ptmngsys/Web/sdwansolution/zh/index.html#local_tool">SD-WAN 解决方案</a>：针对企业网络面临的 WAN 封闭架构、业务体验难保障、业务部署和运维困难的问题，华为 SD-WAN 解决方案为企业提供分支与分支、分支与数据中心、分支与云之间的全场景互联，通过应用级<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/%E6%99%BA%E8%83%BD%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1.html">智能选路</a>、智能加速、智能运维，构建更好的业务体验，重塑 WAN 互联全流程的业务体验。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://info.support.huawei.com/info-finder/zh/enterprise/index">华为 Info-Finder</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>运营商</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>运营商</tag>
      
      <tag>SDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VLAN</title>
    <link href="/2023/10/18/VLAN/"/>
    <url>/2023/10/18/VLAN/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是VLAN"><a href="#什么是VLAN" class="headerlink" title="什么是VLAN"></a>什么是VLAN</h1><p>VLAN（Virtual Local Area Network）即虚拟局域网，是将一个物理的LAN在逻辑上划分成多个广播域的通信技术。<br>每个VLAN是一个广播域，VLAN内的主机间可以直接通信，而VLAN间则不能直接互通。这样，广播报文就被限制在一个VLAN内。</p><h2 id="为什么需要VLAN"><a href="#为什么需要VLAN" class="headerlink" title="为什么需要VLAN"></a>为什么需要VLAN</h2><p>早期以太网是一种基于CSMA&#x2F;CD（Carrier Sense Multiple Access&#x2F;Collision Detection）的共享通讯介质的数据网络通讯技术。当主机数目较多时会导致冲突严重、广播泛滥、性能显著下降甚至造成网络不可用等问题。通过二层设备实现LAN互连虽然可以解决冲突严重的问题，但仍然不能隔离广播报文和提升网络质量。</p><p>在这种情况下出现了VLAN技术。这种技术可以把一个LAN划分成多个逻辑的VLAN，每个VLAN是一个广播域，VLAN内的主机间通信就和在一个LAN内一样，而VLAN间则不能直接互通，广播报文就被限制在一个VLAN内。</p><h2 id="VLAN的作用"><a href="#VLAN的作用" class="headerlink" title="VLAN的作用"></a>VLAN的作用</h2><p><img src="/img/VLAN/VLAN%E4%BD%9C%E7%94%A8.png" alt="VLAN作用"><br>通过划分不同的VLAN，VLAN内的主机间可以直接通信，而VLAN间不能直接互通，从而将广播报文限制在一个VLAN内。</p><h2 id="VLAN的优点"><a href="#VLAN的优点" class="headerlink" title="VLAN的优点"></a>VLAN的优点</h2><ol><li>限制广播域：广播域被限制在一个VLAN内，节省了带宽，提高了网络处理能力。</li><li>增强局域网的安全性：不同VLAN内的报文在传输时是相互隔离的，即一个VLAN内的用户不能和其它VLAN内的用户直接通信。</li><li>提高网络的健壮性：故障被限制在一个VLAN内，本VLAN内的故障不会影响其他VLAN的正常工作。</li><li>灵活构建虚拟工作组：用VLAN可以划分不同的用户到不同的工作组，同一工作组的用户也不必局限于某一固定的物理范围，网络构建和维护更方便灵活。</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>运营商</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>运营商</tag>
      
      <tag>VLAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>江西省数字政府建设三年行动计划</title>
    <link href="/2023/10/08/%E6%B1%9F%E8%A5%BF%E7%9C%81%E6%95%B0%E5%AD%97%E6%94%BF%E5%BA%9C%E5%BB%BA%E8%AE%BE%E4%B8%89%E5%B9%B4%E8%A1%8C%E5%8A%A8%E8%AE%A1%E5%88%92/"/>
    <url>/2023/10/08/%E6%B1%9F%E8%A5%BF%E7%9C%81%E6%95%B0%E5%AD%97%E6%94%BF%E5%BA%9C%E5%BB%BA%E8%AE%BE%E4%B8%89%E5%B9%B4%E8%A1%8C%E5%8A%A8%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="江西省数字政府建设三年行动计划"><a href="#江西省数字政府建设三年行动计划" class="headerlink" title="江西省数字政府建设三年行动计划"></a>江西省数字政府建设三年行动计划</h1><p>（2022-2024 年）</p><p>为贯彻落实党中央、国务院关于建设网络强国、数字中国、智慧社会的战略部署，加快政府管理和社会治理模式创新，以政府数字化转型驱动治理方式变革，推进政府决策科学化、社会治理精准化、公共服务高效化，根据《中华人民共和国国民经济和社会发展第十四个五年规划和二〇三五年远景目标纲要》《江西省国民经济和社会发展第十四个五年规划和二〇三五年远景目标纲要》等文件精神，结合我省实际，制定本行动计划。</p><h2 id="一、发展现状和总体要求"><a href="#一、发展现状和总体要求" class="headerlink" title="一、发展现状和总体要求"></a>一、发展现状和总体要求</h2><h3 id="（一）发展现状"><a href="#（一）发展现状" class="headerlink" title="（一）发展现状"></a>（一）发展现状</h3><p>基础条件不断夯实。当前，全省政务云资源体系已基本建成，政务外网实现省市县乡村五级全覆盖。构建了全省一体化大数据共享交换体系，人口、法人、电子证照、自然资源和空间地理、社会信用等基础数据库投入使用。统一电子印章、公共支付、短信服务等应用支撑平台建成使用。“赣服通”已成为江西一张靓丽名片，大数据在社会治理中的广泛应用，在新冠肺炎疫情防控中发挥了重要作用。</p><p>关键问题有待破解。政务外网使用效率不高，部门专网仍然大量存在，政务系统未全面上云，政务云不能满足系统云化需要；部分高频政务数据未共享或共享质量不高，部门业务协同水平整体偏低，一些公共数据尚未归集共享；一体化应用支撑体系尚未建成，5G（第五代移动通信）、AI（人工智能）、区块链等新技术运用水平有待提升；通过数据共享创新公共服务、社会治理手段的举措不够，数据要素流通市场建设仍处于初级阶段。</p><p>发展环境深刻变化。从数字化发展趋势看，通过数字化转型提升核心竞争力成为共识，这对深入挖掘数据价值、提升数据服务效能提出了新要求。从全面建设“六个江西”的战略全局看，推动治理体系和治理能力现代化，必须运用大数据促进经济发展、完善社会治理、提升政府服务能力。从“作示范、勇争先”的新使命看，深入推进政府自身改革，跨越式推动数字政府建设走在前列，必须运用系统理念全面推动全省各级政府加快集成创新。</p><h3 id="（二）总体要求"><a href="#（二）总体要求" class="headerlink" title="（二）总体要求"></a>（二）总体要求</h3><p>1．指导思想。</p><p>以习近平新时代中国特色社会主义思想为指导，全面贯彻党的十九大和十九届历次全会精神，深入贯彻落实习近平总书记视察江西重要讲话精神，践行“作示范、勇争先”的目标要求，立足新发展阶段，贯彻新发展理念，构建新发展格局，以政府信息化转型驱动治理方式变革，构建数字化智能化的政府运行新形态，全方位推进政府政务流程再造、业务模式优化、决策水平和履职能力提高，助推提升治理体系和治理能力现代化水平。</p><p>2．基本原则。</p><p>坚持党的全面领导。充分发挥党总揽全局、协调各方的领导核心作用，将坚持和加强党的全面领导贯穿于数字政府建设各领域各环节，贯穿于政府数字化改革和制度创新全过程，确保数字政府建设的正确方向。</p><p>坚持以人民为中心。始终把增进人民福祉、满足人民对美好生活的向往作为数字政府建设的出发点和落脚点，充分发挥数字治理优势，着力破解企业和群众反映强烈的办事难、办事慢、办事繁的问题，坚持数字普惠，缩小“数字鸿沟”，提升公共服务均等化水平，让数字政府建设成果更多更公平地惠及全体人民。</p><p>坚持改革创新引领。围绕经济社会发展迫切需要，着力强化改革思维、法治思维和创新思维，坚持目标导向、问题导向，通过技术创新和制度创新“双轮驱动”，破除体制机制障碍，以数字化转型撬动政府治理各方面改革创新。</p><p>坚持数据融合共享。加强数据汇聚融合、协调共享、有序开放和开发利用，充分发挥数据的基础资源作用和创新引擎作用，推进政府治理流程再造和模式优化，加快政府经济决策数字化，提高政府决策科学性和管理服务效率，催生经济社会发展新动能。</p><p>坚持系统整体协同。强化系统观念，加强系统集成，提升集约化建设水平，统筹推进技术融合、业务融合、数据融合，实现跨层级、跨地域、跨系统、跨部门、跨业务的协同管理和服务，注重强化与各领域改革措施有效衔接，统筹推进、协同发展。</p><p>坚持安全自主可控。全面落实总体国家安全观，坚持安全可控和开放创新并重、促进发展和依法管理相统一，严格落实网络安全各项法律法规制度，全面构建制度、管理和技术深度融合的数字政府安全防护体系，不断提升安全保障能力和风险防范水平，切实保障网络和数据安全，依法保护个人信息。</p><p>3．发展目标。</p><p>以数字化转型为抓手，通过全方位、协同性、智能化变革推进数字政府建设。2022 年底，建立高位推动、权责明确、统一协调的数字政府工作机制，数字基座能力得到有力夯实，一批数字政府重点应用项目上线运行；到 2023 年底，建成一体化数字基座，大平台共享、大数据慧治、大系统共治的顶层架构基本形成，经济调节、综合监管、协同治理、公共服务、政务运转、政务公开等领域数字化应用初见成效；到 2024 年底，建成上下联通、左右贯通，业务体系、管理体系、技术体系“三位一体”的数字政府，在经济发展、公共服务、社会治理等领域，形成一批有示范效应的数字政府特色应用，数字政府建设水平进入全国第一梯队。</p><p>——经济调节质量优秀省份。充分应用大数据技术，广泛采集、汇聚、分析经济运行、财政金融等领域数据，强化数字技术在宏观经济运行监测、管理决策、政策效能评估中广泛应用，全面提升政府经济调节智能化水平。</p><p>——综合监管模式示范省份。完善“互联网+监管”“双随机一公开”等平台，完成与国家平台及其他省市平台对接，实现跨地区、跨部门、跨行业联合监管，加强重点行业领域专业监管，构建基于信用的新型监管模式。实现执法监管平台承载的监管事项比例达 80%，公共监管重点领域全流程 90%可追溯。</p><p>——政务服务满意度一等省份。升级优化江西政务服务网，将“赣服通”打造成为全国政务服务品牌标杆，提升政务服务“一网通办”能力，实现 95%以上的服务事项线上线下全流程全省通办，100%高频政务服务事项实现跨省通办。数字鸿沟不断缩小，群众满意度显著提升。</p><p>——政务环境透明度一流省份。聚焦公开事项标准化、解读回应规范化、政府网站集约化、政务新媒体矩阵化、政务公开专区集群化，创新政务公开工作思路和方式，大力推进 26 个重点领域政务公开标准化规范化建设，深入推进政府网站集约应用，建设以省政府微信公众号为龙头的全省政务新媒体传播矩阵，提升政务公开专区建设水平，着力打造公开透明的政务环境。</p><p>——政务运转效能领先省份。健全政务运转机制，显著提升政府机关办文、办会、办事、督查督办和值班管理效能，提升部门间智能化协同能力。着力打造全省政务协同总品牌，全面提升政务协同办公平台用户覆盖面，全面实现与各部门办公系统、主要业务应用系统联通，政务外网高清视频会议系统实现省市县乡四级全覆盖，政务协同水平持续提升。协同推进乡村治理、城市治理、社会治理、应急管理、生态治理等数字化建设，提升协同治理水平，确保协同治理成效保持全国一流，公众安全感满意度达到 95%以上，打造共建共治共享的协同治理格局。</p><p>——数字基座水平先进省份。一体化数字基础支撑能力全面提升，新一代信息技术全面应用，数字基座的智能化水平和覆盖面全面提升。完成省市县乡镇（街道）电子政务外网升级改造，政务云全面扩容，政务大数据中心省市两级全覆盖。非涉密政务系统上云率达到 80%，政务外网接入率达到 80%，电子证照用证率 70%，政府部门电子印章覆盖率 90%。</p><h3 id="（三）总体架构"><a href="#（三）总体架构" class="headerlink" title="（三）总体架构"></a>（三）总体架构</h3><p>围绕品牌建设、应用体系、数字基座、保障措施，构建“1267”总体架构，引领数字政府高质量发展。</p><p>“1”：一体化数字基座。升级改造电子政务外网，提升政务网络支撑能力，优化完善政务云平台，推进政务大数据中心一体化建设，完善数据资源体系，建设统一应用、运行维护、标准规范三大基础支撑。</p><p>“2”：两大平台建设。不断优化“赣服通”政务服务平台，全面提升政务服务水平；打造“赣政通”政务协同平台，全面提升政府行政效能。</p><p>“6”：六大保障措施。做好组织领导、政策法规、资金保障、队伍建设、考核评估、安全保障六大保障，为数字政府建设保驾护航。</p><p>“7”：七大应用体系。聚焦经济调节、综合监管、协同治理、公共服务、生态治理、政务运转、政务公开七大领域数字化应用，全面推进数字政府建设。</p><h2 id="二、主要任务"><a href="#二、主要任务" class="headerlink" title="二、主要任务"></a>二、主要任务</h2><h3 id="（一）建立科学精准的数字决策体系"><a href="#（一）建立科学精准的数字决策体系" class="headerlink" title="（一）建立科学精准的数字决策体系"></a>（一）建立科学精准的数字决策体系</h3><p>1．加快政府决策数字化。</p><p>构建一体化数字决策体系。利用数据关联分析、数学建模、虚拟仿真、人工智能等技术，以经济运行、社会发展、民生服务、社会治理等领域为重点，以省直部门现有相关系统为基础，建立以省级数字决策系统为核心、省直部门和市（县、区）为分中心的全省一体化可视化数字政府决策系统。通过数字决策系统进行模块化分析和政策模拟来实施趋势预判、精准调控，开展政府数据治理、社会治理和公共服务应用等领域的决策咨询研究，为政府决策提供专业支撑，形成以大数据为支撑的科学化、精准化决策体系。</p><p>提升经济运行监测分析能力。有效整合分散在各单位、各环节、各领域中的市场主体、投资、公共资源交易、税务、社保、能源、金融、信用等业务数据，提取融合通信运营商、搜索引擎、互联网平台企业等互联网行为数据，实现各类海量信息资源的高效汇聚、存储、加工、处理、分析、融合和动态展现。探索构建包含非传统统计数据的宏观经济监测评价、景气分析和智能预测模型，形成集形势研判、景气分析、政策评价等功能于一体的宏观经济运行监测分析支撑体系。</p><p>2．推进行业经济决策应用。</p><p>工业运行监测调度和行业管理应用。加快智慧工信“一网通办”平台的推广应用，推进大数据、区块链、AI、VR（虚拟现实）、5G 等新技术在工业运行调度、行业服务和管理、安全预警等方面创新应用，推进江西工业云、江西工业大数据融合平台、无线电管理一体化平台等升级，推进重点产业高分辨率卫星观测数据共享平台建设，推进江西地方省级工业互联网安全态势感知平台、工业运行监测调度平台和产业集群管理调度系统升级改造，支持重点地市和重点行业平台建设，开展企业工控安全试点工程，构建全省工业互联网安全监测服务体系。</p><p>推进数字财政建设。构建财政一体化核心业务系统，建立预算管理、社会保障资金信息管理系统，优化财政资金全生命周期和全面绩效管理，提高财政管理的精细化和信息化水平。依托省级财政数据中心，提升财政数据分析水平，汇聚本省财政数据及相关外部数据，结合本省财政业务的紧迫性和重要性，构建财政数据分析主题模型，多方位、多角度推进财政数据综合利用，对财政资金管理各个环节结果进行反馈。用信息化手段辅助决策，促进信息系统智能化，更好发挥财政在省域治理中的作用。</p><h3 id="（二）打造全方位多领域的综合监管体系。"><a href="#（二）打造全方位多领域的综合监管体系。" class="headerlink" title="（二）打造全方位多领域的综合监管体系。"></a>（二）打造全方位多领域的综合监管体系。</h3><p>1．提升在线监管能力。</p><p>扩大“互联网+监管”平台应用广度和深度。规范监管事项名称、编码、依据和流程等，形成与全省权力清单相协同的监管事项目录清单并实施动态管理，推动“照单监管”。推动各级监管数据归集共享和有效利用，强化监管数据治理，提高监管效能及决策水平。加强市场监管、公安、生态环境、交通运输等政府部门执法监管系统与省“互联网+监管”平台数据共享，实现执法监管“一网通管”。运用物联网、视频监控、卫星遥感等技术，积极推进非现场监管，推进全省非现场监管资源应汇尽汇，强化监管信息的互联互通，及时发现防范苗头性风险，提高监管智能化水平。不断优化完善风险预警系统模型功能，扩大风险防控行业领域，提高监管的前瞻性和精准性。依托“赣政通”平台部署移动执法监管应用，实现“掌上监管”。加强与国家一体化在线监管平台的互联互通，实现跨区域联合监管。到 2023 年底，非现场监管资源对接率达 50%，监管数据共享率达 70%，部门监管系统与省“互联网+监管”系统对接率达 70%。</p><p>提升“双随机一公开”执法监督平台应用覆盖度。充分融合监管数据与公共信用信息平台、“赣服通”平台等数据，提升“双随机一公开”行政执法监督平台的应用覆盖度，为完善执法程序、规范执法行为、加强行政执法协调监督提供技术支撑，实现“双随机”执法检查“集中统一、分类分级”监管。完善网上衔接、信息共享、沟通便捷、防范有力、查处及时的行政执法与刑事司法工作协作机制，实现全省各级各类行政执法机关与司法机关间的执法信息共享、办案业务协同，增强行政执法和刑事司法工作合力。</p><p>2．深化重点领域监管。</p><p>市场监管。全面整合各类市场监管业务应用，形成全省统一的市场监管应用体系，包括市场准入准营平台、市场监管平台、行政执法平台、综合管理平台等，强化市场监管信息化水平，加强对食品、药品、医疗器械和特种设备等重点行业的全过程质量管理和安全监管执法，加强与医疗管理、医保管理等衔接，有序推进医疗器械唯一标识实施工作。依法依规整合市场监管部门的市场监管、消费维权、行政执法信息以及相关信息，形成市场监管大数据资源体系，依法运用多源数据为市场主体精准“画像”，支撑市场一体化监管的统计、预测、预警、报警、评估等分析型应用，提升市场监管风险预判和处置能力。加强对以平台经济为代表的新技术、新产业、新业态、新模式的监管，促进数字经济健康有序发展。</p><p>金融监管。推进地方金融监督信息化，利用大数据、云计算等现代金融科技手段，对地方金融组织业务活动及其风险状况进行分析、评价和监督管理。完善金融综合服务平台，依法依规将市场主体相关信用信息纳入省公共信用信息服务平台和国家企业信用信息公示系统（江西），推进金融监管及风险防范数字化应用。</p><p>工程监管。全面整合省级相关系统和数据资源，加快工程质量安全监管领域信息化建设，对危大工程、工程消防检测、工地人员、工地扬尘、施工噪声、泥头车等工程施工现场的各项监测数据进行数据采集、共享交换和深度分析，全面提升智慧工地数字化监管水平。</p><p>3．加强信用监管互联。</p><p>完善信用体系建设。升级改造省级公共信用信息平台，构建综合信用数据共享库和江西省公共信用综合评价管理体系，加强信用分级分类管理，依法依规持续推进信用主体公共信用综合评价，基本实现以评价结果为依据的信用分级分类监管体系。围绕应用服务急需的关键领域与核心数据，依法依规加快推进信用信息归集共享。推进科研诚信责任主体评价体系建设，加强科研诚信责任主体信用信息分级分类管理和应用，将科研诚信管理贯穿到科技活动全过程。优化公共信用综合评价体系，充分整合综合服务、监管、金融信用信息，生成个人、企业服务“赣通分”信用分值，重点推进公共信用综合评价在政务服务中的应用。</p><p>深化公共信用评价。依托公共信用综合评价，支持各有关单位开展行业信用评价，探索建立行业信用评价标准，实施差异化信用分级分类监管。加快建立健全以信用为基础的新型监管机制，完善信用信息采集机制，推动监管信息互联互通，构建覆盖所有市场主体的信用监管体系，推动公共信用信息在行业信用监管领域的融合应用。</p><p>加强中小企业融资综合信用服务。依法依规加强以支撑“信易贷”为重点的“双公示”数据、信贷数据、履约数据、水、电、煤气、税、社保等信息的归集，实现政府信用信息与金融机构信贷数据的有序共享共用。构建江西省中小企业融资综合信用服务体系，搭建金融机构与诚信中小微企业贷款融资桥梁，切实解决企业融资难融资贵问题，为企业提供高效、便捷、低成本的融资服务，助力实体经济发展。</p><h3 id="（三）建立共治共享的协同治理体系"><a href="#（三）建立共治共享的协同治理体系" class="headerlink" title="（三）建立共治共享的协同治理体系"></a>（三）建立共治共享的协同治理体系</h3><p>1．智慧化城市治理。</p><p>完善新型智慧城市建设。运用物联网、人工智能、大数据、BIM（建筑信息模型）、CIM（城市信息模型）等技术，完成城市地下市政基础设施（含人防设施）数字化、智能化改造，搭建供水、排水、燃气、热力等设施感知网络和地面塌陷隐患监测感知系统，实现对地下市政基础设施的安全监测与预警。统筹建设“城市大脑”，推动与 CIM 基础平台深度融合，推进城市空间“一张图”数字化管理和城市运行“一网统管”。统筹建设时空大数据平台，完善城市数字化管理平台和感知系统，打通社区末端、织密数据网格，整合多领域信息系统和数据资源，支撑城市健康高效运行和突发事件快速智能响应。完善综合管理信息平台，扩展完善实时监控、模拟仿真、事故预警等功能，实现管理精细化、智能化、科学化。到 2024 年各设区市“城市大脑”通用平台基本建设完成，打造 3-5 个新型智慧城市标杆。</p><p>推进智慧社区建设。探索构建社区智慧服务体系，完成社区基础设施数字化、智能化改造，打造数字化社区便民服务中心，推行政务服务社区“就近办”“自主办”和“一窗式”集成服务，实现便民服务更加智能、政务服务更加便捷、社区治理更加高效。创新社区治理线上线下融合模式，推进社区治理共建共治共享。到 2024 年，建成 20 个高品质智慧社区。</p><p>2．数字化乡村治理。</p><p>加快乡村信息基础设施建设。加快农村宽带通信网、移动互联网建设和下一代互联网发展，提升全省自然村组通宽带网络覆盖比例。继续深入实施信息进村入户工程，构建为农综合服务平台，推动“益农信息社”服务覆盖全省行政村。加快乡村基础设施数字化转型，推进全省乡村智慧交通、智慧电网、智慧农业等方面的建设。</p><p>提升乡村治理数字化能力。提升农村基层党建信息化水平，完善党员干部现代远程教育功能，推广网络党课教育。推进基层党建标准化、规范化、信息化建设，建成覆盖所有基层党组织和全体党员的基层党建信息化网络。探索推动党务、村务、财务网上公开，畅通社情民意。加快乡村社会治理体系现代化建设，建设农村地区“雪亮工程”，着力提升农村地区覆盖面，推进城乡视频监控连接贯通。扎实推进“万村码上通”5G+长效管护平台建设，畅通群众监督投诉渠道，切实把群众反映的问题解决在基层，实现乡村管理精细化、群众上报便捷化、问题处理及时化和长效管护科学化。</p><p>深化信息惠民服务。推动“互联网+政务服务”向乡村延伸覆盖，推进涉农服务事项在线办理，促进“网上办”“指尖办”“马上办”，提升人民群众满意度。加快政务数据资源共享，推动更多政务服务事项乡村办理“小事不出村、大事不出乡”。深入推进“互联网+”在乡村教育、医疗健康、养老、金融等方面应用，完善省市县三级融媒体中心功能，拓展“新闻+政务+服务”等服务。建立基层服务导办、帮办、代办机制，实现服务普惠化。</p><p>加强涉农信息资源融合利用。实施“互联网+基层治理”行动，完善乡镇（街道）、村（社区）地理信息等基础数据，推动基层治理数据资源共享，根据需要向基层开放使用。推动各部门涉农信息资源与省数据共享交换平台对接，充分融合农业、商务等政府部门以及银行、电信运营商、电商企业等经营主体服务站点资源，对现有乡村信息服务站点采取联合挂牌、资源共享等方式，实现一站多用、功能叠加和可持续运营。</p><p>推动数字赋能乡村振兴。通过数字技术与农业农村发展深度融合，推动乡村产业、生态、文化、治理、服务等方面的数字化转型，促进实现乡村产业兴旺、生态宜居、乡风文明、治理有效、生活富裕。实施“互联网+小农户”计划，支持新型农业经营主体和服务主体发展，推广“中国农村远程教育网”等网络平台，大力培育高素质农民，为乡村振兴提供内生动力。</p><p>3．精细化社会治理。</p><p>推进智慧司法建设。搭建网上刑罚执行一体化平台，加强“智慧监狱”的人工智能新技术应用，打造监狱安全防护的“铜墙铁壁”。以创建全国“智慧矫正中心”为抓手，全力推进“智慧矫正”应用，实现对社区矫正对象立体化的精准掌控。实施“智慧法治”工程，推进行政立法、备案审查、行政复议、行政应诉、行政执法监督工作智能化，健全法治政府建设科技保障体系，全面建设数字法治政府，积极探索“区块链+法治”示范应用，大力构建全省法治区块链大数据平台。推进“智慧戒毒”建设和应用，提升戒毒工作智慧化水平。依法依规推进特殊人群网上监管，实现对特殊人群的可查、可控、可帮、可管。推进“江西 12348”公共法律服务集群建设，促进我省公共法律服务提档升级。推进远程会见“乡乡通”工程，构建司法行政远程执法和服务体系。</p><p>推进社会治安智能化建设。加强网络、安全、运维、云计算等公安信息化基础支撑能力，夯实警综平台、视综平台、警用地理信息平台等公安应用支撑体系。持续完善公安大数据平台功能，各级政府加强推广，强化相关数据接入，强化公安业务应用，促进“智治”建设。充分利用信息化、智能化技术手段，推进“雪亮工程”建设，提升公共安全视频监控联网应用能力，提高治安防控智能化水平。开展“智慧公安”建设，提升公安机关在维护国家安全、打击违法犯罪、筑牢治安防控、优化管理服务等方面的信息化水平。推进警务工作数字化转型和警务数据的安全、合法、合规、有条件共享，推广移动警务应用。</p><p>提升社会矛盾化解能力。健全乡镇（街道）矛盾纠纷一站式、多元化解决机制和心理疏导服务机制。深化矛盾纠纷源头预防和排查调解应用能力，将覆盖面延伸到交通事故、医疗卫生、征地拆迁、物业服务、山林土地水利矿产资源权属等重点领域，推动矛盾纠纷化解相关平台互联互通，提升网上信访、网上调节、智慧普法水平。加快推进农村“法律明白人”智慧工程，打造全省农村“法律明白人网校”智慧工程，将农村“法律明白人”的管理、教育、考核、服务等工作全部推送到智能平台上，实现“掌上培养”“指尖服务”。</p><p>推进基层智慧治理。实施“互联网+基层治理”行动，加强基层党组织建设，健全完善基层治理体制机制，建设网格化管理、精细化服务、信息化支撑、开放共享的基层管理综合服务平台，推进与政务服务、数字城管、应急管理、“互联网+监管”等领域系统对接。完善乡镇（街道）与部门政务信息系统数据资源共享交换机制。</p><p>4．科学化应急管理。</p><p>提升监测预警能力。建立健全安全生产综合监控机制，强化企业监控联网，实现危险化学品、矿山、烟花爆竹等安全风险监测预警系统智能化升级，加强与相关部门实现系统资源共享，形成广域覆盖、智能预警的安全生产风险防控“一张网”。建设全省灾害数据库，构建全省灾害风险监测综合分析平台，实现多灾种和灾害链综合监测、风险早期识别和预报预警，形成应急避险转移安置“一张图”。提升省级公共安全风险监测预警能力，构建全省统一的“智赣 119”消防物联网大数据平台和省市县三级全覆盖的运维中心，全面提高社会消防安全治理的科技化、信息化、智能化水平。</p><p>提升指挥决策能力。利用大数据和人工智能，建立场景化灾害损失评估模型，提升数据核灾能力。完善应急指挥“一张图”，强化预案智能匹配、队伍调度、物资保障、应急处置等全方位、智能化救援指挥决策支持能力。实现基于“一张图”的灾情信息汇聚、现场灾情动态研判、灾害事故模拟推演、避险转移可视化演示和应急指挥辅助决策。</p><p>提升应急救援能力。完善空、天、地一体化的应急通信网络，实现全方位连接，不断提升应急救援通信保障能力。持续推进各级应急管理部门及相关成员单位部署建设信息采集设备、通信链路装备、通信警报、通信终端、现场指挥装备、辅助保障装备等，提升应急资源保障信息化水平。依据航空救援体系建设试点省的部署要求，提升航空救援快速反应能力，实现航空救援的可视化、立体化、智能化。</p><h3 id="（四）构建便捷普惠的公共服务体系"><a href="#（四）构建便捷普惠的公共服务体系" class="headerlink" title="（四）构建便捷普惠的公共服务体系"></a>（四）构建便捷普惠的公共服务体系</h3><p>1．打造泛在可及的服务体系。</p><p>打造“赣服通”全国政务服务品牌标杆。优化“赣服通”平台业务办理功能，推进“金融服务专区”“疫情防控专区”等部门及市县特色服务应用创新。完善“赣服通”服务能力考核指标体系，为移动端公共服务能力提升提供技术支撑。推动“互联网+政务服务”向基层延伸，实现省市县乡村政务服务五级全覆盖，不断拓展“赣服通”服务覆盖广度、深度，并与市县融媒体中心平台互联互通，资源共享。到 2022 年底，“赣服通”平台用户日活量达 40 万，注册用户数 3500 万，全力打造全国移动政务服务品牌标杆。</p><p>推进政务服务智慧便捷。拓展提升江西政务服务网功能，持续提升网上办理深度，重点提升政务服务“全流程网办”比例。各地、各部门非涉密业务系统全部接入“一窗式”综合服务平台，推动政务服务平台、政务服务大厅等线上线下服务渠道功能升级，做到标准统一、全面融合、服务同质。全面推行“区块链+电子证照+免证办理”在政务服务场景中应用，加快推进“免证办理”政务服务大厅建设。到 2022 年底，省市县三级政务服务大厅全面实现“免证办理”。加快推进“自助办理”“就近办理”的服务应用和覆盖延伸。梳理企业群众全生命周期事项，推出更多“一件事”主题集成服务，提升政务服务智能、精准服务能力。到 2023 年底，省直部门自建业务系统与“一窗式”综合服务平台全面实现对接，政务服务事项“一网通办”率达到 90%，初步构建覆盖省市县乡村五级的自助服务体系。</p><p>推进政务服务普惠公平。针对老年人、残疾人等群体服务需求，完善线上线下服务渠道，推进各级政府门户网站和移动应用开展适老化、适残化及无障碍改造，解决特殊群体面临的突出问题。扩大农村地区数字基础设施覆盖范围，优化数字公共品供给，统筹推进城乡数字化政务应用，将数字普惠纳入城乡协调发展总体规划，从资金、技术、人才等方面进行倾斜，不断缩小区域、城乡、社会群体“数字鸿沟”。</p><p>强化政务服务“好差评”。持续推进业务系统与政务服务“好差评”系统对接，实现政务服务事项全覆盖。推进政务服务“好差评”系统向基层延伸，构建省市县乡四级政务服务评价体系。推进“好差评”服务在线上线下多终端覆盖融合，保障企业群众办事即时可评。建立“好差评”闭环机制，做到“有评必答、有差必改”，主动识别、精确化解企业和群众在办事过程中遇到的堵点、难点问题。到 2024 年底，构建全方位的“好差评”体系。</p><p>2．提供优质便利的涉企服务。</p><p>优化主题服务应用。全面融合线上线下业务，提升企业开办、工程建设项目审批、用电用水用气、不动产登记、纳税、跨境贸易、获得信贷、办理破产、知识产权保护等主题便利化水平。不断深化商事行政审批、投资项目并联审批、工程建设项目审批、“证照分离”等改革，探索“一业一证”改革，大力推进涉企审批减环节、减材料、减时限、减费用，持续优化全省营商环境建设。</p><p>推动惠企服务精准高效。优化惠企政策在线服务模式，建立规范化常态化政企沟通机制，为企业提供精准高效的政策服务。完善政策兑现服务功能，设立政策兑现代办窗口，打通多部门数据流，精准匹配惠企政策对应企业，提前开展“模拟审批”，有效减少企业申报时间。推动“免申即享”“即申即享”理念向更多领域拓展，让“办事不求人”“申请政策不用跑”成为常态，实现惠企政策全覆盖、能落地、快兑现。及时处置政府网站、服务专线、江西政务服务网、“赣服通”等平台接收到的市场主体诉求，畅通营商环境投诉维权渠道。到 2024 年底，实现 200 项政策兑现“一件事一次办”。</p><p>3．提供普惠均等的民生服务。</p><p>社会保障。推行电子社保卡，持续深化在社会保障、看病就医、待遇补贴、政务服务等领域应用，支持社保卡跨业务、跨地区、跨部门应用，实现“人手一卡、一卡多用、全省通用”。构建精准识别、精细分类、专业指导的公共就业服务模式，为服务对象提供个性化服务。打造全省“劳动力地图”，建立劳动者和用人单位基础数据库。健全人力资源社会保障、公安、工业和信息化、统计等跨部门数据共享机制，全面提升全民参保库数据质量，为精准扩面提供数据支撑，建立社保待遇领取资格认证数据库，全面提升资格认证信息化管理水平。到 2024 年底，实现跨地区、跨部门、跨层级人力资源社会保障公共服务事项统一办理、业务协同和信息共享。</p><p>民政服务。推进民政业务应用一体化，围绕社会组织、社会救助、殡葬服务、婚姻登记、养老服务、社区、慈善、儿童收养、儿童福利、残疾人福利十大民政服务，构建“互联网+民政服务”体系，推动人脸识别、指纹认证等智能化技术和民政业务全面匹配、深度融合。到 2024 年底，实现民政主要业务信息化基本全覆盖，民政基本公共服务事项网上办理率达到 80%以上。</p><p>教育教学。整合教育信息化资源，完善全民终身学习公共服务平台和终身学习账号体系，面向不同需求学习者提供高水平多样化内容供给。深化省教育资源公共服务平台应用，推进大数据与教育管理、教育教学和教育服务深度融合，实现教育信息闭环管理。推广“互联网+教育”教学模式，推进全省各级各类学校智慧校园建设，加快智慧教学课堂改造。到 2024 年底，“互联网+教育”大平台建设初见成效，智慧阅读、智慧安防等全面推进，实现全省智慧校园全覆盖。</p><p>交通运输。建立全省综合交通大数据中心，搭建交通基础设施运营、交通运输客运信息、物流信息等平台，构建公铁水空一体化电子信息服务体系。推动公路、枢纽、港口、航道等智慧化建设，打造融合高效的智慧交通基础设施，形成一批具有全国影响力、高示范性的智慧“公+水”建设样板。试点智慧公路、智慧港口、智慧服务区、智慧客运枢纽等创新应用示范工程，重点推进南昌、赣州等地智慧出行及公共交通智能化应用、基于 5G 的车路协同的智慧物流示范区、智慧停车示范、自动驾驶开放测试道路场景等项目。到 2024 年，建成各类智慧交通工程 10 个。</p><p>医疗保障。优化医疗保障公共服务，统一服务清单，实现医疗保障一站式服务、一窗口办理、一单制结算。推进医保标准化和信息化建设，统一医疗保障业务标准和技术标准，完善全省医疗保障信息平台，全面推广应用医保电子凭证，实现全省医保经办机构和定点医药机构具备电子凭证应用条件，覆盖医保支付、经办服务等应用场景。建立统一的医疗保障服务热线，加强经办能力建设，大力推进服务下沉，实现省、市、县、乡镇（街道）、村（社区）全覆盖。增强医药服务可及性，规范“互联网+医疗”等新服务模式发展，打通“互联网+医疗”纳入医保支付，健全短缺药品监测预警和分级应对体系。到 2024 年底，加快建成覆盖全民、城乡统筹、权责清晰、保障适度、可持续的多层次医疗保障体系。</p><p>卫生健康。优化提升全省疫情防控管理平台，及时精准有效提高疫情防控水平。完善全民健康信息化业务系统，促进健康医疗大数据发展及应用，提高“互联网+医疗健康”服务水平。加快智慧医院建设，健全完善互联网医院监管平台，打造智慧医院江西样板。加快推进居民电子健康码规范应用，重点解决医疗健康服务“一院一卡、互不通用”问题。加快智慧医疗建设，打造一批典型示范应用，推进“优智卫”品牌升级版建设。开展“5G+医疗”健康服务试点，形成一批技术先进、性能优越、效果明显标志性应用。积极促进新技术与卫生健康紧密融合，构建线上线下结合的医疗健康新型服务模式。到 2024 年，全省智慧医院覆盖率达到 80%，基本建成省市县乡四级远程医疗服务体系。</p><p>安居服务。提升住房相关业务信息化水平，优化升级江西省住建云平台。建设省住建大数据平台，汇集房产交易网签数据，实现从房地产开发、房屋交易、物业服务到房屋征收的全生命周期闭环管理，防控房地产市场风险，提升房地产市场监管效能。打造保障性房屋租赁公共服务平台，构建高效、协调、共享、安全的业务办理和监测分析系统。改造住房公积金监管和服务平台。推进公积金结算应用系统联网接入，跨城市信息共享，完善公积金归集、提取、贷款、会计核算、业务统计和行政办公等各业务环节的全过程数字化管理和监督体系。</p><p>智慧商务。加快商务信息化建设。建设国际投资“单一窗口”，建立集招商推介、投资咨询、项目建设、政务服务、投诉维权于一体的投资促进体系，实现投资促进、投资对接、投资服务、落地管理、运行监测等全链条闭环管理。加强全省综合保税区统计和调度信息化建设。提升我省综合保税区统计和调度信息化水平，推进智慧口岸建设，对全省口岸、机场实现可视化监控，打造集约高效的江西国际贸易“单一窗口”。</p><p>文化旅游。加快全省旅游大数据中心和智慧监管平台提质升级，优化“云游江西”推广与服务平台。支持智慧景区、智慧图书馆、智慧文化馆、智慧博物馆建设，充分运用数字技术发展沉浸式体验、虚拟展厅、高清直播等新型文化和旅游服务，打造江西文化和旅游新业态。深化景区视频数据应用，加强我省旅游景区客流承载量预警监测能力。到 2024 年，全省 4A 级以上旅游景区、设区市级博物馆和重要景区实现智能导游、在线预订等数字应用服务全覆盖。</p><h3 id="（五）健全智能精准的生态治理体系"><a href="#（五）健全智能精准的生态治理体系" class="headerlink" title="（五）健全智能精准的生态治理体系"></a>（五）健全智能精准的生态治理体系</h3><p>1．提升生态治理智能化水平。</p><p>推进自然资源保护数字化应用。提升面向监管决策、政务服务和调查评价等“多应用”的江西省国土空间大数据共享与服务能力，完成 71 个江西省卫星导航定位基准站升级改造，采集覆盖全省的各种基本比例尺基础地理信息数据，形成江西省时空大数据库。推进江西省自然资源和不动产登记监测指挥中心、国土空间规划“一张图”实施监督信息系统、自然资源三维立体时空数据库、卫星遥感影像综合监管服务平台、地理信息公共服务平台天地图、自然资源执法监察智能管理平台、江西省国土空间基础信息平台等项目建设。</p><p>推进智慧林业综合管理信息化。整合各类林业数据，统一林业数据标准，打造林业“一张图”“一个库”“一套数”。加快智慧林业建设，打造智慧国土绿化、智慧林长制、智慧林业灾害防治、林业项目资金管理等一批示范性智慧应用，实现林草资源动态监测、智能监管。重塑林业管理机制，建设林业智慧政务服务，实现林业管理一体化、精细化和智能化，有效提升全省林业治理体系和治理能力的现代化水平。</p><p>统筹智慧水利建设。围绕水资源、水生态、水环境、水灾害问题，以数字化、网络化、智能化为主线，按照“1+2+3+N”总体框架，持续完善“江西水利云”和水利通信网、水利信息采集网络“两张网”，重点推进小型水库雨水情测报和安全监测，建设全要素动态感知的水利监测体系，提升涉水信息动态监测和全面感知能力。加强智能化应用，探索构建数字孪生流域，鼓励基层水利应用创新，努力构建具有预报、预警、预演、预案功能的智慧水利体系，提升水利业务精细管理及决策支持能力。</p><p>强化生态环境精准监测。升级生态环境大数据资源中心，加强数据标准规范建设和汇聚共享。推进生态环境智能监管应用，深化水、气、土、应对气候、固废、辐射、环评、监测、执法等核心业务系统建设。提升生态环境综合管理信息化和生态环境信息化网络安全及运维能力。加强 5G、卫星遥感、无人机、视频监控、传感器等技术应用，充分利用大数据等手段整合与挖掘环保数据资源，提升区域大气污染防治、流域污染防治等决策能力，完善生态环境监测网络，建立生态环境智能监管综合应用体系，全面提高生态环境精准监管能力。</p><p>2．推进生态文明数字化转型。</p><p>推进生态文明数字化应用。拓展江西省“生态云”大数据平台应用，持续融合各类生态文明数据，深化生态文明监测、预警、评估等，全景展示江西生态文明建设成果，全面提升我省生态文明综合决策、监管治理和公共服务水平。</p><p>推进绿色低碳数字化应用。全面集成碳考核、碳市场、能源活动等相关数据，持续推进国家统一碳市场登记系统和交易系统的联建联维，整合我省碳排放权交易系统，提高我省碳市场信息化水平。构建重点领域、重点行业碳排放智能监测和动态核算体系，推动形成集约节约、循环高效、普惠共享的绿色低碳发展新格局，助力碳达峰碳中和目标顺利实现。</p><p>推行绿色低碳生活方式。探索建立碳普惠机制，通过专业数据库和交易服务平台，对居民的减碳行为给予政策鼓励与市场激励，促进居民生活方式向低碳转型，推动全社会积极参与节能减排，共创低碳社会。</p><h3 id="（六）建立高效协同的政务运转体系"><a href="#（六）建立高效协同的政务运转体系" class="headerlink" title="（六）建立高效协同的政务运转体系"></a>（六）建立高效协同的政务运转体系</h3><p>1．促进政务一体化大协同。</p><p>升级拓展“赣政通”。加强平台覆盖范围，推动参与政务活动的国有企事业单位和乡镇（街道）、村（社区）全部接入。深化分厅门户建设，整合接入各类应用，引导各地创新应用场景。完善赣政通政务协调平台功能，推进项目迭代升级，构建功能全面、界面简洁、使用便利、运转顺畅的政务支撑平台。加快大数据、人工智能、区块链等新技术在日常办公中的应用，全面覆盖政府办文、办事、办会及督查督办等事项，实现公职人员随时办、随身办。推动跨部门公共服务线上化，实现政务办公“一网办、掌上办”。到 2024 年，基本实现省市县乡村五级全覆盖，公职人员使用率达 90%以上。</p><p>推进内部业务流程优化。实施机关内部办事“最多跑一次”改革，重点解决机关内部办事多次跑、多头跑、时间长、环节多、签字烦等问题。梳理跨部门跨层级以及部门内部办理的相关事项，编制“一次不跑”和“只跑一次”清单。按照办理“一件事”的标准，推行“一口受理，联办联结”的办事方式。全面优化部门间“一次不跑”和“只跑一次”业务协同模型和网上办理流程，构建统一的业务协同平台体系，不断推进协同办理事项网上办理。到 2024 年底，基本实现机关内部办事“最多跑一次”。</p><p>2．促进政务运转提质增效。</p><p>建立大数据辅助科学决策机制。统筹推进决策信息资源系统升级，建立政策法规咨询库和决策案例库，构建多元数据智能分析模型和大数据综合分析系统，扩展综合决策分析应用场景，在城市运行、生态环境监测、经济运行、管理效能评价等领域建立专业预测、分析、研判模型和算法，为政府决策提供监管评价、运行管理、政策管理等方面的结构性、趋势性分析，全面提升决策科学化水平。</p><p>推动公文办理高效便捷。完善省政府电子公文传输平台，畅通省、市电子公文交换通道，实现电子公文跨部门、跨层级立体流转，征求意见、文件会签、联合发文等无障碍办理。规范电子公文标准接口，推动省政府电子公文传输系统与各级政府办公系统的安全对接，推进电子文件在重点领域范围应用。进一步完善机关办公自动化系统电子文件在线归档功能，配备电子档案信息管理系统，推进机关开展来源可靠、程序规范、要素合规的电子文件以电子形式单套制归档。推进数字档案馆和数字档案室建设，加快纸质档案数字化，规范电子文件和电子档案管理，提升档案信息化水平。</p><p>实现政府会议智慧管理。加大物联网、人工智能等技术在政府会议管理中运用，实行会议预订在线化、会议签到智慧化、会场安排智能化、工作衔接精细化等全流程智慧会议管理，切实提升会议保障效率。</p><p>升级改造全省视频会议应用。融合现有各部门自建视频会议系统，汇聚各部门视频资源，提高会议系统图像清晰度标准，支持移动会议和多会议召开功能。横向打通部门视频会议联通壁垒，纵向构建一套省市县乡四级政务外网高清视频会议系统，实现全省各层级各部门随时、随地、多场景的综合视频会商服务。建成纵向贯通、横向融合、共享共用的跨区域、跨行业的省级视频传输交换平台，实现应急值守、指挥调度、日常协同等能力显著提升。</p><p>优化督查督办方式方法。充分运用现代信息技术手段，加快构建结构合理、技术先进、高效快捷、安全可靠的全省督查督办系统，不断完善督查考核方式方法，形成以“互联网+督查”为重要手段的工作格局。对重大决策部署、《政府工作报告》、目标绩效管理等落实情况全程动态跟踪、实时提示、及时办理，做到“重点事项跟踪督、难点事项反复督”。加强与国务院办公厅“互联网+督查”系统贯通融合，使数据上报、受理转办、跟踪督办更加便捷高效。推动行政审批、监管执法、公共资源交易等全流程数字化运行、管理和监督，实现行政行为全程留痕留印、风险可控和过往可溯，提升行政行为的法治化、规范化、程序化水平。</p><p>提升省政府值班调度能力。搭建数据来源广泛、逻辑关联、时效性强的政府值班综合指挥平台，推进新一代技术与政府数字化转型的深度融合，提升实时分析、即时分析能力，实现对现实世界的感知与信息捕捉，形成以大数据为支撑的个性化、科学化、精准化决策支撑系统。接入省直各部门的业务管理、指挥中心平台，实现一屏全览的综合展示，实现端到端的实时信息获取、监控。</p><p>3．优化数字政府体制机制。</p><p>优化政府职责体系。将数字政府建设与加快转变政府职能深度融合，以数字化改革整合优化政府审批、服务、监管、执法等职责，理顺各地区各部门在数据共享、业务协同等方面的职责关系，强化政府对数字经济、数字社会、数字与网络空间的管理职责，构建与数字政府相适应的政府职责体系，推动政府职能更加优化、权责更加协同。</p><p>优化组织运行架构。适应数字化转型要求，推动政府组织运行架构持续优化，实现知识信息共享、组织在线协同和业务高效运转。动态评估组织运行状况和政府履职效能，通过重塑业务流程、创新协同方式和优化机构设置，打造扁平高效、整体联动、弹性敏捷的政府组织运行架构。</p><p>创新政府治理模式。将“数字化思维”融入政府治理全过程，推进技术融合、业务融合、数据融合，建立政府主导的多元主体协同治理网络，加快政府治理模式向政民双向互动、线上线下融合转变，推进政府治理理念、治理方式全方位创新和改革，推动实现政府治理更加精准高效、规范透明。</p><h3 id="（七）构建优质均等的政务公开体系"><a href="#（七）构建优质均等的政务公开体系" class="headerlink" title="（七）构建优质均等的政务公开体系"></a>（七）构建优质均等的政务公开体系</h3><p>1．加强政务公开渠道建设。</p><p>深入推进政府网站集约化。在省市两级政府网站集约化平台的基础上，形成分类科学、集中规范、共享共用的省市两级统一政务信息资源库，对政府网站集约化平台上各网站的信息资源统一管理，实现统一分类、统一元数据、统一数据格式、统一调用、统一监管。推动政府门户网站与政务服务网深度融合，实现数据同源、服务同根。构建网上政府的数据底座，推动公开、互动、服务融合发展，推动更多政务服务事项“网上办、掌上办、一次办”，实现信息“一网通查”、互动“一网通答”、服务“一网通办”、监管“一网通管”。</p><p>建设政务新媒体传播矩阵。加强政务新媒体运营管理，常态化开展全省政府系统政务新媒体监测预警，健全政务新媒体监管机制。加快政府网站与政务新媒体融合发展，实现整体发声、联动发声。加强县级政务新媒体与本地区融媒体中心的沟通协调，提升信息发布、解读回应、政民互动的整体水平。加快建设以省政府微信公众号为龙头，各地各部门政务新媒体为主体的整体协同、响应迅速的政务新媒体矩阵体系，建成一批群众爱看爱用的优质精品账号及应用，着力提升回应关切、舆情引导能力，形成协同联动、矩阵传播的工作格局。</p><p>提升政务公开专区服务水平。建设省级政务公开专区，示范推动全省政务公开专区建设。各地依托行政服务大厅，加大政务公开专区建设力度，聚焦企业群众全生命周期事项标准化规范化，融合线上线下政务公开与服务，完善优化政务公开专区功能。在做好政府信息查阅、依申请公开受理、窗口办理等常规服务外，设立政策咨询综合服务窗口，及时准确地为企业、群众提供“一号答”“一站式”的政策咨询服务。</p><p>2．强化政策发布解读回应。</p><p>精准解读重大政策措施。依托政府网站“政府信息公开”专栏，集中统一发布解读政府规章、规范性文件和重点领域信息。升级省政府门户网站政策智能问答平台，开发更加精准智能、更加及时高效的政策问答功能和政策在线咨询办理功能。将政策文件及解读材料转换为适于新媒体传播的形式，及时通过政务微博、微信、手机客户端等渠道，向企业和群众主动推送，提高政策信息的到达率和适用度。大力开展政策推送、政策兑现、监督评价的全链条服务，提高政策兑现率。</p><p>提高政策解读工作质量。探索建立省政府政策解读专员制度，由省政府各部门确定 1-2 名工作人员担任政策解读专员，依托省级政务公开专区和省政府门户网站，为企业和群众提供政策解读和咨询服务。创新政策解读形式，综合运用新闻发布会、在线访谈、图文漫画、事例讲解、短视频等形式开展多元化解读。统筹政府信息公开咨询电话、领导信箱和行政服务大厅等线上线下互动渠道，提高解读重要政策和处理民生诉求的能力。</p><p>增强回应社会关切效果。健全完善政务舆情常态化监测、研判、处置和回应机制，加强政务舆情处置回应台账管理，以解决政务舆情背后问题的实际成效回应社会关切。增强回应工作的主动性，通过网上调研等方式，及时准确了解掌握社会公众对政策执行效果的反馈与评价，主动回应存在的共性问题，助力政策完善。密切关注涉及疫情防控、房地产、金融、工资拖欠、环境污染和生态破坏、食品药品安全、教育、医疗、养老、安全生产以及困难群众生活等方面的舆情并及时作出回应，助力防范化解重大风险。</p><h3 id="（八）构建开放共享的数据资源体系"><a href="#（八）构建开放共享的数据资源体系" class="headerlink" title="（八）构建开放共享的数据资源体系"></a>（八）构建开放共享的数据资源体系</h3><p>1．加强数据统筹管理。</p><p>建立健全数据采集机制。推进乡镇（街道）、村（社区）数据资源建设，实行乡镇（街道）、村（社区）数据综合采集，实现一次采集、多方利用。加强全省政务数据资源统筹汇聚管理，明确数据归集、共享、开放、应用、安全、存储等职责，实现政务数据应归尽归、社会数据按需归集，建立“一数一源、多源核验”的数据更新维护机制。</p><p>优化完善数据中心。2022 年底前，对省直部门和各设区市数据互通情况开展一次深入调研，进一步摸清底数，编制清单，逐一查找症结，打通堵点。重点推进高频共享库、特色主题和专题资源库、社会数据和物联感知数据库建设。完善全省统筹建设的人口、法人、电子证照、公共信用、空间地理、城乡冷链物流等高频共享数据库，提供跨业务、跨数据库的统一数据访问接口，提供高频共享库的日常维护工具和异地的容灾备份与恢复工具，提供高效、实时的数据服务，满足各地各部门业务需求。建设全省跨行业、跨部门、动态更新的特色主题库，推动业务部门依托高频共享库建设以部门业务为主线的主题库和以公共业务为主线的专题库。探索汇聚科研机构、互联网企业等社会数据。</p><p>2．完善数据共享体系。</p><p>编制完善政务数据目录和供需对接清单。推进政务数据共享开放清单化管理，组织省市县三级政务部门按照“三定”要求，依法依规梳理形成标准统一、衔接一致、完整有效的政务信息资源目录。对照政务信息资源目录，以满足业务需求为目标，编制形成政务数据供需对接清单，并纳入全省一体化政务数据共享交换平台运行管理、及时更新。采用协商、采购、合作开发等方式，推动公共服务机构、相关企业及第三方平台等方面共享的数据，并及时纳入清单管理。</p><p>强化数据共享交换平台枢纽功能。推动省政务数据共享交换平台向乡镇（街道）延伸，建立乡镇（街道）与部门政务信息系统数据资源共享交换机制，并与国家一体化政务服务平台、国家数据共享交换平台对接，形成上联国家、覆盖省市县乡四级的全省一体化政务数据共享体系。推动与人大、政协、法院、检察院数据互联共享，提升政务数据为党委决策的服务支撑能力。</p><p>3．加强数据共享应用。</p><p>推进数据高效共享。加快推进省级垂管的业务系统进行技术改造，确保已共享的政务数据及时可用。加快推进共享数据高质量应用，开展政务数据共享特色应用建设。以应用场景为牵引，建立健全政务数据供需对接、共享激励机制，开展数据共享绩效评估，提高数据共享精确性。举办全省政务数据共享应用观摩会，总结推广好的经验做法，促进全省政务数据高效共享共用。</p><p>完善数据回流。稳步推进省级统建系统数据向各设区市数据中心回流的机制和流程建设。推进全省政务数据双向流动通道建设。各设区市向省政府各部门提出数据回流需求，由省大数据管理部门统筹汇聚相关数据后，按照所属地域原则将数据回流至各设区市。实施“数据回省”，各设区市通过回流数据通道将基层政务数据向省级汇聚。</p><p>4．推进数据开发利用。</p><p>推进公共数据开放。编制公共数据开放目录和责任清单，升级完善全省统一的数据开放平台，并与国家公共数据开放平台对接，同时对接各设区市数据开放平台，形成全省一体化公共数据开放体系。做好江西省政务数据开放网站改版，加大人力资源社会保障、民政、医疗、教育、交通、环境等重点领域政务数据有序开放力度。探索政企数据融合的标准规范和对接机制，将水、电、气等主要公共服务数据纳入开放范围。制定政府部门采购社会数据管理办法，推进“统采共用”，提升数据集约化利用水平。持续举办开放数据创新应用大赛，打造赛事品牌，落地一批有竞争力的数据创新应用产品或解决方案。</p><p>推进数据要素市场化配置。建立健全覆盖原始数据、脱敏处理数据、模型化数据和人工智能化数据等不同数据开发层级的新型大数据综合交易机制，加快推动全省数据要素市场建设。探索建立省大数据交易中心，构建大数据交易平台，探索开展大数据确权、定价、交易、权益分配和规范应用，促进数据产业化发展，打造全省数据交易生态体系。在数据资源共享、数据交易、数据开发利用等方面进行立法探索，为数据要素市场化配置提供强有力支撑，打通数据流通链条的基础，保障数据交易安全。</p><h3 id="（九）构建智能安全的数字基座"><a href="#（九）构建智能安全的数字基座" class="headerlink" title="（九）构建智能安全的数字基座"></a>（九）构建智能安全的数字基座</h3><p>1．夯实基础设施体系。</p><p>升级改造电子政务外网。加强新型前沿技术应用，提升数字政府建设的支撑能力。统筹协调推进各部门非涉密业务专网和业务系统迁移至政务外网，加快提升政务外网集约化水平。2022 年，启动省政府办公厅业务专网迁移工作，启动电子政务外网改造和省政府内网二期建设。2023 年底前，完成省市县乡四级政务外网升级改造工作。持续推进政务外网村（社区）“最后一公里”网络接入，实现“村村通”和五级全覆盖。深入推进政务外网安全防护体系建设，完善网络边界检测控制能力、联网终端安全管控能力和网络安全态势监测能力，保障政务外网整体安全性。全面推进 IPv6（第六代互联网协议）规模化应用，推进政务网、数据中心及相关业务系统、应用平台等方面全面实现支持 IPv6。</p><p>扩容完善政务云平台。统筹建设全省“一朵云”，形成 1 个省级政务云、11 个设区市政务云和 N 个行业云的“1+11+N”的全省域云基础架构。扩容政务云平台计算、存储、网络和安全资源，完善政务云平台 IPv6 承载能力，为数字政府应用提供安全、稳定、可靠的云计算资源能力。统筹全省政务云灾备服务体系建设。建立安全可控的政务云灾备能力，定时同步主数据中心和灾备中心数据。完善省级政务云同城双活数据中心和异地灾备数据中心建设，提升政务信息系统容灾备份能力。鼓励各设区市政务云节点之间形成备份合作机制。</p><p>优化大数据中心建设布局。按照集约高效、共享开放、安全可靠、按需服务原则，支持各设区市打造区域政务大数据中心。引导其他地区充分整合利用现有资源，以市场需求为导向，有序发展规模适中、集约绿色的大数据中心。鼓励大型互联网企业、电信企业等开展绿色节能、高效计算的行业型数据中心建设，构建形成省级一体化大数据中心、市级大数据中心和行业级大数据中心的“1+11+N”大数据架构体系，并逐步融入全国一体化大数据中心体系，实现政务数据统筹存储、统筹治理、统筹共享、统筹安全。到 2024 年底，建成省级大数据中心和 11 个设区市大数据中心及若干个行业数据中心。</p><ol start="2"><li>强化基础支撑体系。</li></ol><p>（1）统一应用支撑。</p><p>可信身份认证。持续完善可信身份认证系统，接入、整合多种身份认证方式和认证源，建立面向自然人、法人、公职人员的全省统一账户库，加快推进全省各级各类政务信息系统接入，并对接国家政务服务平台统一身份认证系统。</p><p>统一电子证照。拓展电子证照的种类，涵盖党政机关签发的证件、执（牌）照、证明文件、批文、鉴定报告。按照国家统一规范，升级改造我省电子证照系统，完成与国家政务服务平台电子证照共享服务系统的对接，实现电子证照全国互信互认。深化电子证照在政务服务事项的应用，切实解决企业和群众办事重复提交材料、证明等问题。</p><p>统一电子印章。按照国家电子印章和电子签名标准规范，建立全省权威、规范、可信的统一电子印章系统，为政务事项的审批、办结、证照生成等环节提供电子印章制章、用章、验章等服务。推进电子印章在政府内部管理中的应用。</p><p>统一支付平台。持续完善全省统一公共支付平台，实现非税收入收缴业务全覆盖，满足群众公共服务类缴费项的需求。依托政府非税收入收缴体系，整合线上线下支付渠道，拓展各类资金结算功能，实现多种电子化支付方式接入，为“全程网办”提供安全、统一、便捷的资金结算服务。</p><p>统一业务流程管理。根据各部门政务服务业务流程共性需求，提供流程设计和管理标准化组件，推动跨部门业务流程衔接，提高业务间的交互效率，实现业务整合。</p><p>统一智能客服系统。加快整合各地、各部门非紧急非警务类服务热线，统一纳入江西 12345 政务服务便民热线，以江西政务服务网、“赣服通”平台为依托，打造全省统一的智能客服系统。充分利用大数据和人工智能技术，对服务热线信息内容进行挖掘分析，为政府决策提供参考。建立规范运行处理机制，努力让政务服务更高效、让群众办事更便捷。</p><p>统一“区块链”服务支撑。依托省电子政务外网，以区块链底层技术平台为基础，构建全省统一的政务 BaaS（区块链即服务）平台，为各部门提供“统管共用”的区块链政务应用支撑服务。研究推进基于区块链技术的数据共享体系和政务应用平台建设，重点在“赣服通”、不动产登记等领域探索应用，逐步形成一批具有代表性的区块链政务服务应用场景，进一步优化办事流程，提升服务效率。</p><p>统一人工智能服务平台。依托省电子政务外网、省政务云平台等电子政务基础设施，建设政务人工智能服务平台，为各部门提供算力、算法支撑服务。重点推动人工智能技术在身份认证、在线客服、行政审批等领域场景应用，提升政务服务智能化水平。</p><p>统一地理空间信息高频库。加快梳理汇聚各地各部门地理空间数据资源，建立政务地理信息数据共享规范及数据目录，形成全省统一的地理空间信息高频库。制定地理空间数据管理办法，形成政务地理信息数据资源体系管理与应用服务支撑信息化机制，按需提供数据服务。完善各类地理空间数据质量，提高数据共享和公共支撑能力。</p><p>（2）运行维护支撑。</p><p>统筹各地各部门运维力量，按照统一联动、分级分别负责的原则，明确基础设施、共性支撑、应用体系不同环节的运营运维责任。统一的云、网、数基础设施和共性应用支撑体系由省级主管部门负责运营运维，构建顺畅高效的运维保障机制，制定运维服务标准规范，构建“政企合作、管运分离”的长效运营机制，为数字政府建设运营提供长期、稳定的服务支撑。</p><p>（3）标准规范支撑。</p><p>推进全省数字政府建设标准化工作，贯彻落实国家、地方、行业等相关标准，协调推动标准制定、修订完善、贯彻实施等工作。按新需求梳理、优化现有标准规范，新增制定数字政府建设领域涉及体系架构、基础平台、政务服务、数据共享、业务应用、安全运维和技术应用等方面各类标准，形成完整的标准体系，赋能数字政府建设。定期开展标准实施情况监督和实施效果评估，推动标准规范全面贯彻落实。</p><h3 id="（十）构建全方位的安全保障体系"><a href="#（十）构建全方位的安全保障体系" class="headerlink" title="（十）构建全方位的安全保障体系"></a>（十）构建全方位的安全保障体系</h3><ol><li>强化安全管理责任。</li></ol><p>坚持总体国家安全观，切实维护国家主权、安全、发展利益，守住网络安全底线。明确数字政府全流程安全管理责任，各地各部门按照职责分工，统筹做好数字政府建设安全工作，构建全方位、多层级、一体化安全防护体系，形成跨地区、跨部门的协同联动机制。建立数字政府安全评估、责任落实和重大事件处置机制，加强对参与政府信息化建设和运营企业的规范管理，确保政务系统和数据安全管理边界清晰、职责明确及责任落实。</p><p>2．落实安全制度要求。</p><p>严格落实相关法律法规制度，依法推进数字政府安全防护体系建设。建立健全数据分类分级保护、风险评估、检测认证等制度，对关系国家安全、国民经济命脉、重要民生、重大公共利益等方面的国家核心数据实行更严格的管理制度，按照有关标准和技术要求进行数据清洗、脱敏、脱密、格式转换等处理，加强数据全生命周期安全防护。依法收集和使用个人和企业数据，加大对涉及国家秘密、商业秘密、个人隐私、个人信息等数据保护和监督力度，完善相应的申诉处理和问责机制，依法加强重要数据出境安全管理。加强关键信息基础设施安全保护和网络安全等级保护，建立健全网络安全监测预警机制，定期开展网络安全检查，提升数字政府领域关键信息基础设施保护水平。</p><p>3．提升安全保障能力。</p><p>建立健全动态监控、主动防御、协同响应的数字政府安全技术保障体系，持续提升全方位监测预警和安全防护水平。充分运用安全技术手段提升主动监测、态势感知和威胁预测能力，强化日常监测、通报预警、应急处置，健全完善安全事件应急体系，加强网络安全风险事件发现和预警能力。持续推动信息技术应用创新，加快推进核心技术研发，强化自主可控技术和产品应用。</p><h2 id="三、保障措施"><a href="#三、保障措施" class="headerlink" title="三、保障措施"></a>三、保障措施</h2><h3 id="（一）加强组织领导"><a href="#（一）加强组织领导" class="headerlink" title="（一）加强组织领导"></a>（一）加强组织领导</h3><p>强化统筹协调。成立全省推进数字政府建设工作专班。专班由省政府办公厅牵头，省委网信办、省政府办公厅、省发展改革委、省工业和信息化厅、省财政厅相关负责同志参加具体负责统筹推进和协调解决数字政府建设的困难和问题。同时，加强对省政府各部门政务信息化项目的日常调度，省发展改革委在审批省直部门信息化项目时，要征求工作专班意见，确保与数字政府建设整体布局相衔接。省直各部门要明确内设机构和人员负责数字政府建设工作，确保数字政府建设有力有序有效推进。鼓励各地各部门开展试点工作，2023 年底前，建设一批数字机关，形成一批可复制推广的创新模式。</p><h3 id="（二）健全政策法规"><a href="#（二）健全政策法规" class="headerlink" title="（二）健全政策法规"></a>（二）健全政策法规</h3><p>及时清理现行地方性法规、规章和制度规范中与数字政府建设不相适应的条款，推动政策补齐，为数字政府建设提供法治保障。研究制定数字政府建设工作相关制度，包括数字政府项目管理、建设运营管理、政务数据资源管理、政务公开、政务服务管理、绩效考核、数据安全和个人信息保护等制度。建立数据保障相关政策法规，完善大数据管理相关政策法规体系，形成上下联动、左右协同、规范刚性的制度体系，为全省数字政府建设提供有力的制度保障。</p><h3 id="（三）做好资金保障"><a href="#（三）做好资金保障" class="headerlink" title="（三）做好资金保障"></a>（三）做好资金保障</h3><p>各级财政要统筹做好数字政府建设经费保障工作，探索建立综合论证、联合审批、绿色通道等项目管理新模式，满足数字政府建设快速部署和弹性扩展的需求，强化项目全生命周期管理，提高项目管理效能。建立科学合理的资金审核机制，建立适应临时性、软件类和运维类项目所需的财政预算资金池，规范数字政府项目的预算编制和资金使用管理。探索“政府投资+金融资本+企业服务”相结合的多元化融资与运营服务模式，吸引各类社会资本、金融资本参与。</p><h3 id="（四）加强队伍建设"><a href="#（四）加强队伍建设" class="headerlink" title="（四）加强队伍建设"></a>（四）加强队伍建设</h3><p>将数字政府建设列入各级政府机关领导干部和公职人员学习培训内容，全面提升公职人员数字化素养。加大政府数字化专业人才引进力度，进一步畅通数字政府建设干部人才选任渠道，丰富选拔方式，建设一支既精通政府业务又善于运用互联网技术和信息化手段开展工作的复合型人才队伍。推动建立“首席数据官”或“数据专员”机制，强化大数据在政府部门中的应用。建立各级数字政府专家委员会和省级专家库，为数字政府建设提供重要决策参谋和智力支撑。</p><h3 id="（五）强化考核评估"><a href="#（五）强化考核评估" class="headerlink" title="（五）强化考核评估"></a>（五）强化考核评估</h3><p>建立健全公开、透明、公正的常态化考核评估机制，将数字政府建设纳入全省综合考核，建立创优争先机制和定期督查机制。按计划定期开展重大任务落实情况督促检查和第三方评估，加强统计监测、协调调度、绩效评估和考核监督，加强对数字政府建设成果成效及运营情况进行评估。</p><p>附件：重点任务清单</p><p>附件</p><p>重点任务清单</p><p><img src="http://www.jiangxi.gov.cn/picture/0/cc81ee57a1f94b7aac26023dc0b3c94c.png" alt="1.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/d694d4bbc3684869b92c4c1ebf3e86ea.png" alt="2.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/39d7091f2dd94a4c8e717c5d30f9ef42.png" alt="3.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/3bd57f5f842c4a8e95de45ea70093bfe.png" alt="4.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/416f9ccd3aa14f8e831c7eec51cb91ab.png" alt="5.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/65686c30787648e3a5d65a7ee7061a8f.png" alt="6.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/b2869538d3644dce87f288791630426f.png" alt="7.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/65667149c5324957839fc381ae15b681.png" alt="8.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/3f7eb99241f54ee18df7c5507845c659.png" alt="9.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/f4b66acf96e545ddb9126a46d47f6ff1.png" alt="10.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/6283a088a7fc4cb1a6601660a64f0ff5.png" alt="11.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/77dc2f33e4f740aea47af0bf7c0f7577.png" alt="12.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/ff06eb1ebeb5472aaa4302fc5f764d72.png" alt="13.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/163d3dea3cb44989a94112fd89fc28fd.png" alt="14.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/ed443d36d6ba4383942b0c87e7fe0877.png" alt="15.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/d71b6409de154b5e934f4be848ffff89.png" alt="16.png"></p><p><img src="http://www.jiangxi.gov.cn/picture/0/cbc25945168b47eebbc6fcdac5b85525.png" alt="17.png"></p>]]></content>
    
    
    <categories>
      
      <category>政务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>政务</tag>
      
      <tag>江西省</tag>
      
      <tag>数字政府</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>曝光三要素</title>
    <link href="/2023/10/04/%E6%9B%9D%E5%85%89%E4%B8%89%E8%A6%81%E7%B4%A0/"/>
    <url>/2023/10/04/%E6%9B%9D%E5%85%89%E4%B8%89%E8%A6%81%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="曝光"><a href="#曝光" class="headerlink" title="曝光"></a>曝光</h1>]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
      <tag>感光度</tag>
      
      <tag>光圈</tag>
      
      <tag>快门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HELLO算法</title>
    <link href="/2023/10/03/HELLO%E7%AE%97%E6%B3%95/"/>
    <url>/2023/10/03/HELLO%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="HELLO算法"><a href="#HELLO算法" class="headerlink" title="HELLO算法"></a>HELLO算法</h1><p><code>CPP版本</code></p><div class="row">    <embed src="/pdf/hello算法.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抚州移动企业文化体系</title>
    <link href="/2023/09/28/%E6%8A%9A%E5%B7%9E%E7%A7%BB%E5%8A%A8%E4%BC%81%E4%B8%9A%E6%96%87%E5%8C%96%E4%BD%93%E7%B3%BB/"/>
    <url>/2023/09/28/%E6%8A%9A%E5%B7%9E%E7%A7%BB%E5%8A%A8%E4%BC%81%E4%B8%9A%E6%96%87%E5%8C%96%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="抚州移动企业文化体系"><a href="#抚州移动企业文化体系" class="headerlink" title="抚州移动企业文化体系"></a>抚州移动企业文化体系</h1><p><strong>目标</strong>：成为全国最具影响力的地市信息服务公司<br><strong>责任</strong>：数智赋能文化抚州，品质铸就美好生活<br><strong>文化理念</strong>：客户至上、团结创新、追求卓越</p><h2 id="客户至上"><a href="#客户至上" class="headerlink" title="客户至上"></a>客户至上</h2><ol><li>要走近客户洞察需求，不要坐在办公室想当然；</li><li>要真实解决客户问题，不要忽悠套路客户；</li><li>要成就客户共创价值，不要打小算盘，伤害客户利益</li></ol><h2 id="团结创新"><a href="#团结创新" class="headerlink" title="团结创新"></a>团结创新</h2><ol><li>要团结一切可以团结的力量，不要推诿扯皮找借口；</li><li>要敢于创新，勇于自我革命，不要因循守旧，等靠要吃老本；</li><li>要以奋斗者为本，向贡献者倾斜，不要把苦劳当功劳；</li></ol><h2 id="追求卓越"><a href="#追求卓越" class="headerlink" title="追求卓越"></a>追求卓越</h2><ol><li>要有永争第一的霸气，不要有点成绩就飘飘然，小富即安；</li><li>要有敢想敢拼的勇气，不要应付了事，得过且过；</li><li>要有与时俱进的朝气，不要只愿留在舒适区，止步不前；</li></ol>]]></content>
    
    
    <categories>
      
      <category>移动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>移动</tag>
      
      <tag>抚州</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路由器综合测试报告</title>
    <link href="/2023/09/22/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
    <url>/2023/09/22/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="路由器综合测试报告"><a href="#路由器综合测试报告" class="headerlink" title="路由器综合测试报告"></a>路由器综合测试报告</h1><h2 id="测试概要"><a href="#测试概要" class="headerlink" title="测试概要"></a>测试概要</h2><p>本测试报告主要以路由器的性能以及结合用户的实际使用情况为标准挑选出综合最优的路由器。</p><h2 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h2><p>在室内不同位置模拟用户日常使用对路由器进行信号和网速测试。</p><ul><li>2.4G频段路由器性能测试<br><img src="/img/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/%E5%9B%BE%E7%89%871.png" alt="2.4G频段"></li><li>5G频段路由器性能测试<br><img src="/img/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%BC%E5%90%88%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/%E5%9B%BE%E7%89%872.png" alt="5G频段"></li></ul><h2 id="测试结果分析"><a href="#测试结果分析" class="headerlink" title="测试结果分析"></a>测试结果分析</h2><p>在路由器的一般使用场景中，可以分析出以下几点</p><ol><li>用户绝大多数时候都不会在距离路由器1m内网上冲浪，那么在1m内路由器的性能不那么重要；</li><li>用户通常会将路由器摆放在客厅或者卧室，那么近距离使用效果和信号穿墙情况是评判路由器性能的重要指标，四款路由器中，中兴ZXHN-E2623（5G频段）在室内5米内无阻挡、室内10米内无阻挡和室内8米内有墙阻挡都表现最好；</li><li>室内11米有门墙阻挡是用来模拟用户在卫生间和厨房的使用场景，中兴ZXHN-E2623也有不错的表现，可以流畅的观看4K视频和游玩网络游戏；</li><li>创维SK-WR9651X在2.4G频段表现最为出色，但现如今几乎所有的具有WALN功能的设备都支持5G频段的WiFi，并且根据信号强度来看，中兴ZXHN-E2623（5G频段）的WiFi足以覆盖一个120㎡的套房；</li></ol><h2 id="用户感知分析"><a href="#用户感知分析" class="headerlink" title="用户感知分析"></a>用户感知分析</h2><p>根据路由器的测试结果来看，这四款路由器都可以覆盖用户的绝大多数需求。有部分用户在选择路由器时会更关注性能之外的部分比如外观美观度、品牌认可度、易用程度、价格是否亲民等方面。<br>中兴ZXHN-E2623和华为PSDN-TC31都是白色方正外观，更容易被大多数人接受，同时这两款路由器相较于另外两款路由器有着更高的品牌认可度；华为PSDN-TC31搭载鸿蒙系统，支持智能家居控制和智能场景联动，使用华为手机的用户可能会更倾向于这款路由器；华为PSDN-TC31和创维SK-WR9651X都有相较于另外两款路由器更简单的后台控制。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如果只从性能方面来考虑的话，那么中兴ZXHN-E2623无疑是这几款路由器中的最佳选择，适合绝大多数家庭使用，但在实际中用户可能会根据自身情况做出适合他们自己的选择。</p>]]></content>
    
    
    <categories>
      
      <category>移动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>移动</tag>
      
      <tag>路由器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>物理层</title>
    <link href="/2023/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <url>/2023/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%89%A9%E7%90%86%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-物理层"><a href="#计算机网络-物理层" class="headerlink" title="计算机网络 - 物理层"></a>计算机网络 - 物理层</h1><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><p>根据信息在传输线上的传送方向，分为以下三种通信方式：</p><ul><li>单工通信：单向传输</li><li>半双工通信：双向交替传输</li><li>全双工通信：双向同时传输</li></ul><h2 id="带通调制"><a href="#带通调制" class="headerlink" title="带通调制"></a>带通调制</h2><p>模拟信号是连续的信号，数字信号是离散的信号。带通调制把数字信号转换为模拟信号。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c34f4503-f62c-4043-9dc6-3e03288657df.jpg" width="500"/> </div><br><p>Powered by <a href="https://github.com/CyC2018/CS-Notes">CS-NOTES</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链路层</title>
    <link href="/2023/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <url>/2023/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-链路层"><a href="#计算机网络-链路层" class="headerlink" title="计算机网络 - 链路层"></a>计算机网络 - 链路层</h1><h2 id="基本问题"><a href="#基本问题" class="headerlink" title="基本问题"></a>基本问题</h2><h3 id="1-封装成帧"><a href="#1-封装成帧" class="headerlink" title="1. 封装成帧"></a>1. 封装成帧</h3><p>将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/29a14735-e154-4f60-9a04-c9628e5d09f4.png" width="300"/> </div><br><h3 id="2-透明传输"><a href="#2-透明传输" class="headerlink" title="2. 透明传输"></a>2. 透明传输</h3><p>透明表示一个实际存在的事物看起来好像不存在一样。</p><p>帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e738a3d2-f42e-4755-ae13-ca23497e7a97.png" width="500"/> </div><br><h3 id="3-差错检测"><a href="#3-差错检测" class="headerlink" title="3. 差错检测"></a>3. 差错检测</h3><p>目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。</p><h2 id="信道分类"><a href="#信道分类" class="headerlink" title="信道分类"></a>信道分类</h2><h3 id="1-广播信道"><a href="#1-广播信道" class="headerlink" title="1. 广播信道"></a>1. 广播信道</h3><p>一对多通信，一个节点发送的数据能够被广播信道上所有的节点接收到。</p><p>所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。</p><p>主要有两种控制方法进行协调，一个是使用信道复用技术，一是使用 CSMA&#x2F;CD 协议。</p><h3 id="2-点对点信道"><a href="#2-点对点信道" class="headerlink" title="2. 点对点信道"></a>2. 点对点信道</h3><p>一对一通信。</p><p>因为不会发生碰撞，因此也比较简单，使用 PPP 协议进行控制。</p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><h3 id="1-频分复用"><a href="#1-频分复用" class="headerlink" title="1. 频分复用"></a>1. 频分复用</h3><p>频分复用的所有主机在相同的时间占用不同的频率带宽资源。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4aa5e057-bc57-4719-ab57-c6fbc861c505.png" width="350"/> </div><br><h3 id="2-时分复用"><a href="#2-时分复用" class="headerlink" title="2. 时分复用"></a>2. 时分复用</h3><p>时分复用的所有主机在不同的时间占用相同的频率带宽资源。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/67582ade-d44a-46a6-8757-3c1296cc1ef9.png" width="350"/> </div><br><p>使用频分复用和时分复用进行通信，在通信的过程中主机会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其它用户使用，因此这两种方式对信道的利用率都不高。</p><h3 id="3-统计时分复用"><a href="#3-统计时分复用" class="headerlink" title="3. 统计时分复用"></a>3. 统计时分复用</h3><p>是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6283be2a-814a-4a10-84bf-9592533fe6bc.png" width="350"/> </div><br><h3 id="4-波分复用"><a href="#4-波分复用" class="headerlink" title="4. 波分复用"></a>4. 波分复用</h3><p>光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</p><h3 id="5-码分复用"><a href="#5-码分复用" class="headerlink" title="5. 码分复用"></a>5. 码分复用</h3><p>为每个用户分配 m bit 的码片，并且所有的码片正交，对于任意两个码片 <img src="https://latex.codecogs.com/gif.latex?\vec{S}" class="mathjax-pic"/> 和 <img src="https://latex.codecogs.com/gif.latex?\vec{T}" class="mathjax-pic"/> 有</p><!-- <div align="center"><img src="https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{T}=0" class="mathjax-pic"/></div> <br> --><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/308a02e9-3346-4251-8c41-bd5536dab491.png" width="100px"> </div><br><p>为了讨论方便，取 m&#x3D;8，设码片 <img src="https://latex.codecogs.com/gif.latex?\vec{S}" class="mathjax-pic"/> 为 00011011。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。</p><p>在计算时将 00011011 记作 (-1 -1 -1 +1 +1 -1 +1 +1)，可以得到</p><!-- <div align="center"><img src="https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{S}=1" class="mathjax-pic"/></div> <br> --><!-- <div align="center"><img src="https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{S'}=-1" class="mathjax-pic"/></div> <br> --><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6fda1dc7-5c74-49c1-bb79-237a77e43a43.png" width="100px"> </div><br><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e325a903-f0b1-4fbd-82bf-88913dc2f290.png" width="125px"> </div><br><p>其中 <img src="https://latex.codecogs.com/gif.latex?\vec{S'}" class="mathjax-pic"/> 为 <img src="https://latex.codecogs.com/gif.latex?\vec{S}" class="mathjax-pic"/> 的反码。</p><p>利用上面的式子我们知道，当接收端使用码片 <img src="https://latex.codecogs.com/gif.latex?\vec{S}" class="mathjax-pic"/> 对接收到的数据进行内积运算时，结果为 0 的是其它用户发送的数据，结果为 1 的是用户发送的比特 1，结果为 -1 的是用户发送的比特 0。</p><p>码分复用需要发送的数据量为原先的 m 倍。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/99b6060e-099d-4201-8e86-f8ab3768a7cf.png" width="500px"> </div><br><h2 id="CSMA-CD-协议"><a href="#CSMA-CD-协议" class="headerlink" title="CSMA&#x2F;CD 协议"></a>CSMA&#x2F;CD 协议</h2><p>CSMA&#x2F;CD 表示载波监听多点接入 &#x2F; 碰撞检测。</p><ul><li><strong>多点接入</strong> ：说明这是总线型网络，许多主机以多点的方式连接到总线上。</li><li><strong>载波监听</strong> ：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。</li><li><strong>碰撞检测</strong> ：在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</li></ul><p>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 <strong>争用期</strong> 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 <strong>截断二进制指数退避算法</strong> 来确定。从离散的整数集合 {0, 1, .., (2<sup>k</sup>-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/19d423e9-74f7-4c2b-9b97-55890e0d5193.png" width="400"/> </div><br><h2 id="PPP-协议"><a href="#PPP-协议" class="headerlink" title="PPP 协议"></a>PPP 协议</h2><p>互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e1ab9f28-cb15-4178-84b2-98aad87f9bc8.jpg" width="300"/> </div><br><p>PPP 的帧格式：</p><ul><li>F 字段为帧的定界符</li><li>A 和 C 字段暂时没有意义</li><li>FCS 字段是使用 CRC 的检验序列</li><li>信息部分的长度不超过 1500</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/759013d7-61d8-4509-897a-d75af598a236.png" width="400"/> </div><br><h2 id="MAC-地址"><a href="#MAC-地址" class="headerlink" title="MAC 地址"></a>MAC 地址</h2><p>MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。</p><p>一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。</p><h2 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h2><p>局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。</p><p>主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场。</p><p>可以按照网络拓扑结构对局域网进行分类：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/807f4258-dba8-4c54-9c3c-a707c7ccffa2.jpg" width="800"/> </div><br><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><p>以太网是一种星型拓扑结构局域网。</p><p>早期使用集线器进行连接，集线器是一种物理层设备， 作用于比特而不是帧，当一个比特到达接口时，集线器重新生成这个比特，并将其能量强度放大，从而扩大网络的传输距离，之后再将这个比特发送到其它所有接口。如果集线器同时收到两个不同接口的帧，那么就发生了碰撞。</p><p>目前以太网使用交换机替代了集线器，交换机是一种链路层设备，它不会发生碰撞，能根据 MAC 地址进行存储转发。</p><p>以太网帧格式：</p><ul><li><strong>类型</strong> ：标记上层使用的协议；</li><li><strong>数据</strong> ：长度在 46-1500 之间，如果太小则需要填充；</li><li><strong>FCS</strong> ：帧检验序列，使用的是 CRC 检验方法；</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/164944d3-bbd2-4bb2-924b-e62199c51b90.png" width="500"/> </div><br><h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。</p><p>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。</p><p>下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧，主机 B 回应该帧向主机 A 发送数据包时，交换机查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 2 的映射。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a4444545-0d68-4015-9a3d-19209dc436b3.png" width="800"/> </div><br><h2 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h2><p>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</p><p>例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。</p><p>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e98e9d20-206b-4533-bacf-3448d0096f38.png" width="500"/> </div><br><p>Powered by <a href="https://github.com/CyC2018/CS-Notes">CS-NOTES</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络层</title>
    <link href="/2023/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <url>/2023/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-网络层"><a href="#计算机网络-网络层" class="headerlink" title="计算机网络 - 网络层"></a>计算机网络 - 网络层</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。</p><p>使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8d779ab7-ffcc-47c6-90ec-ede8260b2368.png" width="800"/> </div><br><p>与 IP 协议配套使用的还有三个协议：</p><ul><li>地址解析协议 ARP（Address Resolution Protocol）</li><li>网际控制报文协议 ICMP（Internet Control Message Protocol）</li><li>网际组管理协议 IGMP（Internet Group Management Protocol）</li></ul><h2 id="IP-数据报格式"><a href="#IP-数据报格式" class="headerlink" title="IP 数据报格式"></a>IP 数据报格式</h2><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg" width="700"/> </div><br><ul><li><p><strong>版本</strong> : 有 4（IPv4）和 6（IPv6）两个值；</p></li><li><p><strong>首部长度</strong> : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</p></li><li><p><strong>区分服务</strong> : 用来获得更好的服务，一般情况下不使用。</p></li><li><p><strong>总长度</strong> : 包括首部长度和数据部分长度。</p></li><li><p><strong>生存时间</strong> ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</p></li><li><p><strong>协议</strong> ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</p></li><li><p><strong>首部检验和</strong> ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</p></li><li><p><strong>标识</strong> : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</p></li><li><p><strong>片偏移</strong> : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</p></li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/23ba890e-e11c-45e2-a20c-64d217f83430.png" width="700"/> </div><br><h2 id="IP-地址编址方式"><a href="#IP-地址编址方式" class="headerlink" title="IP 地址编址方式"></a>IP 地址编址方式</h2><p>IP 地址的编址方式经历了三个历史阶段：</p><ul><li>分类</li><li>子网划分</li><li>无分类</li></ul><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h3><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p><p>IP 地址 ::&#x3D; {&lt; 网络号 &gt;, &lt; 主机号 &gt;}</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cbf50eb8-22b4-4528-a2e7-d187143d57f7.png" width="500"/> </div><br><h3 id="2-子网划分"><a href="#2-子网划分" class="headerlink" title="2. 子网划分"></a>2. 子网划分</h3><p>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</p><p>IP 地址 ::&#x3D; {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p><p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p><p>注意，外部网络看不到子网的存在。</p><h3 id="3-无分类"><a href="#3-无分类" class="headerlink" title="3. 无分类"></a>3. 无分类</h3><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p><p>IP 地址 ::&#x3D; {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p><p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7&#x2F;20 表示前 20 位为网络前缀。</p><p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p><p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 <strong>构成超网</strong> 。</p><p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p><h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/66192382-558b-4b05-a35d-ac4a2b1a9811.jpg" width="700"/> </div><br><p>ARP 实现由 IP 地址得到 MAC 地址。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b9d79a5a-e7af-499b-b989-f10483e71b8b.jpg" width="500"/> </div><br><p>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</p><p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8006a450-6c2f-498c-a928-c927f758b1d0.png" width="700"/> </div><br><h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><p>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e3124763-f75e-46c3-ba82-341e6c98d862.jpg" width="500"/> </div><br><p>ICMP 报文分为差错报告报文和询问报文。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/aa29cc88-7256-4399-8c7f-3cf4a6489559.png" width="600"/> </div><br><h3 id="1-Ping"><a href="#1-Ping" class="headerlink" title="1. Ping"></a>1. Ping</h3><p>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</p><p>Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p><h3 id="2-Traceroute"><a href="#2-Traceroute" class="headerlink" title="2. Traceroute"></a>2. Traceroute</h3><p>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</p><p>Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。</p><ul><li>源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；</li><li>源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。</li><li>不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。</li><li>之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</li></ul><h2 id="虚拟专用网-VPN"><a href="#虚拟专用网-VPN" class="headerlink" title="虚拟专用网 VPN"></a>虚拟专用网 VPN</h2><p>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。</p><p>有三个专用地址块：</p><ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul><p>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。</p><p>下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1556770b-8c01-4681-af10-46f1df69202c.jpg" width="800"/> </div><br><h2 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h2><p>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</p><p>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2719067e-b299-4639-9065-bed6729dbf0b.png" width=""/> </div><br><h2 id="路由器的结构"><a href="#路由器的结构" class="headerlink" title="路由器的结构"></a>路由器的结构</h2><p>路由器从功能上可以划分为：路由选择和分组转发。</p><p>分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c3369072-c740-43b0-b276-202bd1d3960d.jpg" width="600"/> </div><br><h2 id="路由器分组转发流程"><a href="#路由器分组转发流程" class="headerlink" title="路由器分组转发流程"></a>路由器分组转发流程</h2><ul><li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li><li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li><li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li><li>报告转发分组出错。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1ab49e39-012b-4383-8284-26570987e3c4.jpg" width="800"/> </div><br><h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2><p>路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p><p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p><p>可以把路由选择协议划分为两大类：</p><ul><li>自治系统内部的路由选择：RIP 和 OSPF</li><li>自治系统间的路由选择：BGP</li></ul><h3 id="1-内部网关协议-RIP"><a href="#1-内部网关协议-RIP" class="headerlink" title="1. 内部网关协议 RIP"></a>1. 内部网关协议 RIP</h3><p>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p><p>距离向量算法：</p><ul><li>对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；</li><li>对修改后的 RIP 报文中的每一个项目，进行以下步骤：</li><li>若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；</li><li>否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。</li><li>若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。</li></ul><p>RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p><h3 id="2-内部网关协议-OSPF"><a href="#2-内部网关协议-OSPF" class="headerlink" title="2. 内部网关协议 OSPF"></a>2. 内部网关协议 OSPF</h3><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p><p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p><p>OSPF 具有以下特点：</p><ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li><li>只有当链路状态发生变化时，路由器才会发送信息。</li></ul><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><h3 id="3-外部网关协议-BGP"><a href="#3-外部网关协议-BGP" class="headerlink" title="3. 外部网关协议 BGP"></a>3. 外部网关协议 BGP</h3><p>BGP（Border Gateway Protocol，边界网关协议）</p><p>AS 之间的路由选择很困难，主要是由于：</p><ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul><p>BGP 只能寻找一条比较好的路由，而不是最佳路由。</p><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9cd0ae20-4fb5-4017-a000-f7d3a0eb3529.png" width="600"/> </div><br><p>Powered by <a href="https://github.com/CyC2018/CS-Notes">CS-NOTES</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传输层</title>
    <link href="/2023/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <url>/2023/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-传输层"><a href="#计算机网络-传输层" class="headerlink" title="计算机网络 - 传输层"></a>计算机网络 - 传输层</h1><p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。传输层提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。</p><h2 id="UDP-和-TCP-的特点"><a href="#UDP-和-TCP-的特点" class="headerlink" title="UDP 和 TCP 的特点"></a>UDP 和 TCP 的特点</h2><ul><li><p>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</p></li><li><p>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</p></li></ul><h2 id="UDP-首部格式"><a href="#UDP-首部格式" class="headerlink" title="UDP 首部格式"></a>UDP 首部格式</h2><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/d4c3a4a1-0846-46ec-9cc3-eaddfca71254.jpg" width="600"/> </div><br><p>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p><h2 id="TCP-首部格式"><a href="#TCP-首部格式" class="headerlink" title="TCP 首部格式"></a>TCP 首部格式</h2><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/55dc4e84-573d-4c13-a765-52ed1dd251f9.png" width="700"/> </div><br><ul><li><p><strong>序号</strong> ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</p></li><li><p><strong>确认号</strong> ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</p></li><li><p><strong>数据偏移</strong> ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</p></li><li><p><strong>确认 ACK</strong> ：当 ACK&#x3D;1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</p></li><li><p><strong>同步 SYN</strong> ：在连接建立时用来同步序号。当 SYN&#x3D;1，ACK&#x3D;0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN&#x3D;1，ACK&#x3D;1。</p></li><li><p><strong>终止 FIN</strong> ：用来释放一个连接，当 FIN&#x3D;1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</p></li><li><p><strong>窗口</strong> ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p></li></ul><h2 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h2><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e92d0ebc-7d46-413b-aec1-34a39602f787.png" width="600"/> </div><br><p>假设 A 为客户端，B 为服务器端。</p><ul><li><p>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</p></li><li><p>A 向 B 发送连接请求报文，SYN&#x3D;1，ACK&#x3D;0，选择一个初始的序号 x。</p></li><li><p>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN&#x3D;1，ACK&#x3D;1，确认号为 x+1，同时也选择一个初始的序号 y。</p></li><li><p>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</p></li><li><p>B 收到 A 的确认后，连接建立。</p></li></ul><p><strong>三次握手的原因</strong></p><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h2 id="TCP-的四次挥手"><a href="#TCP-的四次挥手" class="headerlink" title="TCP 的四次挥手"></a>TCP 的四次挥手</h2><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg" width="600"/> </div><br><p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p><ul><li><p>A 发送连接释放报文，FIN&#x3D;1。</p></li><li><p>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</p></li><li><p>当 B 不再需要连接时，发送连接释放报文，FIN&#x3D;1。</p></li><li><p>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</p></li><li><p>B 收到 A 的确认后释放连接。</p></li></ul><p><strong>四次挥手的原因</strong></p><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p><strong>TIME_WAIT</strong></p><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ul><li><p>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</p></li><li><p>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</p></li></ul><h2 id="TCP-可靠传输"><a href="#TCP-可靠传输" class="headerlink" title="TCP 可靠传输"></a>TCP 可靠传输</h2><p>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p><p>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：</p><div align="center"><img src="https://latex.codecogs.com/gif.latex?RTTs=(1-a)*(RTTs)+a*RTT" class="mathjax-pic"/></div> <br>其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。<p>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：</p><div align="center"><img src="https://latex.codecogs.com/gif.latex?RTO=RTTs+4*RTT_d" class="mathjax-pic"/></div> <br>其中 RTT<sub>d</sub> 为偏差的加权平均值。<h2 id="TCP-滑动窗口"><a href="#TCP-滑动窗口" class="headerlink" title="TCP 滑动窗口"></a>TCP 滑动窗口</h2><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p><p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a3253deb-8d21-40a1-aae4-7d178e4aa319.jpg" width="800"/> </div><br><h2 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h2><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><h2 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h2><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/51e2ed95-65b8-4ae9-8af3-65602d452a25.jpg" width="500"/> </div><br><p>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。</p><p>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p><p>为了便于讨论，做如下假设：</p><ul><li>接收方有足够大的接收缓存，因此不会发生流量控制；</li><li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/910f613f-514f-4534-87dd-9b4699d59d31.png" width="800"/> </div><br><h3 id="1-慢开始与拥塞避免"><a href="#1-慢开始与拥塞避免" class="headerlink" title="1. 慢开始与拥塞避免"></a>1. 慢开始与拥塞避免</h3><p>发送的最初执行慢开始，令 cwnd &#x3D; 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;&#x3D; ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p><p>如果出现了超时，则令 ssthresh &#x3D; cwnd &#x2F; 2，然后重新执行慢开始。</p><h3 id="2-快重传与快恢复"><a href="#2-快重传与快恢复" class="headerlink" title="2. 快重传与快恢复"></a>2. 快重传与快恢复</h3><p>在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M<sub>1</sub> 和 M<sub>2</sub>，此时收到 M<sub>4</sub>，应当发送对 M<sub>2</sub> 的确认。</p><p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M<sub>2</sub>，则 M<sub>3</sub> 丢失，立即重传 M<sub>3</sub>。</p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh &#x3D; cwnd &#x2F; 2 ，cwnd &#x3D; ssthresh，注意到此时直接进入拥塞避免。</p><p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f61b5419-c94a-4df1-8d4d-aed9ae8cc6d5.png" width="600"/> </div><br><p>Powered by <a href="https://github.com/CyC2018/CS-Notes">CS-NOTES</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运营商省市县网络组织结构</title>
    <link href="/2023/09/19/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/"/>
    <url>/2023/09/19/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="省市县大致网络结构"><a href="#省市县大致网络结构" class="headerlink" title="省市县大致网络结构"></a>省市县大致网络结构</h1><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.jpg" alt="网络结构"></p><p>Bras与市CR间的结构如图，各级网络都有冗余设计从而提高网络稳定性。</p><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%841.jpg" alt="Bras到市CR"></p><h2 id="光接入网"><a href="#光接入网" class="headerlink" title="光接入网"></a>光接入网</h2><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/%E5%85%89%E6%8E%A5%E5%85%A5%E7%BD%91.jpg" alt="光接入网"></p><p>光接入网，是指在业务节点或远端模块与用户设备之间采用或部分采用光传输，共享同一网络侧接口的接入连接的集合。</p><ol><li><code>OLT</code>(Optical Line Terminal)，光线路终端，用于连接光纤干线，作用相当于传统通信网中的交换机或路由器，是外网入口和内网出入口的一个设备。放置在局端，最重要的执行功能是流量调度，缓冲区控制，以及提供面向用户的无源光纤网络接口和分配带宽。简单来说就是实现两个功能，对上游，完成 PON 网络的上行接入；对下游， 将获取到的数据通过 ODN 网络发送分配到所有 ONU 用户终端设备。</li></ol><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/OLT.jpg" alt="OLT设备"></p><ol start="2"><li><code>ODN</code>(Optical Distribution Network)，光配线网，是 OLT 和 ONU 之间的光传输物理通道，主要功能是完成光信号的双向传输，通常由光纤光缆、光连接器、光分路器以及安装连接这些器件的配套设备组成，其中最重要的部件是<strong>分光器</strong>。</li></ol><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/ODN.jpg" alt="ODN"></p><ol start="3"><li><code>ONU</code>(Optical Network Unit)，光网络单元，对 OLT 发送的广播进行选择性接收，若需要接收该数据要对 OLT 进行接收响应；对用户需要发送的以太网数据进行收集和缓存，按照被分配的发送窗口向 OLT 端发送该缓存数据。</li></ol><ul><li><p>FTTC(Fiber To The Curb)：ONU 放置在小区的中心机房；</p></li><li><p>FTTB(Fiber To The Building)：将 16 口 ONU 放置在楼道内的单元箱里，ONU 内有 16 个 ONT，每个 ONT 输出为网线（电信号），通过楼道内网线到达各个用户端；</p></li><li><p>FTTH(Fiber To The Home)：将 1 比 16 的分光器放置在楼道内的单元箱里，再通过楼道内的皮线光纤到达各个用户，每个用户端接一个 ONT；</p></li><li><p>FTTR(Fiber To The Room)：用光纤代替网线，将光纤铺设至每一个房间，通过部署光组网终端，实现与家庭网关互连，结合双频Wi-Fi，保障全屋网络覆盖的组网技术。</p></li></ul><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/ONU.jpg" alt="ONU设备"></p><ol start="4"><li><code>ONT</code>(Optical Network Terminal)，是 FTTH 的最末端单元，俗称“光猫”，类似于 xDSL 的电猫。ONT 是光网络终端，应用于最终用户，而 ONU 是指光网络单元，它与最终用户之间可能还有其他网络。ONT 是 ONU 的组成部分，ONT 可以理解为只有一个口的 ONU。</li></ol><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/ONT.jpg" alt="ONT设备"></p><h3 id="PON网络"><a href="#PON网络" class="headerlink" title="PON网络"></a>PON网络</h3><p>PON，就是把一根光纤变成N根光纤，OLT和ONU采用单纤连接，下行和上行链路分别采用不同的波长。</p><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/PON%E7%B3%BB%E7%BB%9F.jpg" alt="PON网络"></p><p>PON下行数据流采用TDM(time-division multiplexing时分多路复用)广播方式传输，ONU完成注册后分配唯一的LLID；上行数据流采用TDMA(Time-Division Mutiple Access时分多址)方式传输。EPON OLT的下行数据在发出去之前，源都会加上一个LLID(15bit)，这个LLID就对应着下面的某个ONU，当ONU收到数据后，在物度理层就判断LLID是否和自己的LLID相符合，如果符合，则接受它，如果不符合，则丢弃。而GPON通过下行GTC帧中PLOAMd里的ONU-ID(8bit)来区分不同的ONU数据。</p><p><strong>几种典型PON主要区别</strong></p><table><thead><tr><th></th><th>GPON</th><th>XG-PON</th><th>XGS-PON</th></tr></thead><tbody><tr><td>标准系列</td><td>G.984</td><td>G.987,G.988</td><td>G.9807.1 G.989.3. G.988</td></tr><tr><td>线路速率</td><td>下行: 2.48832Gbps 上行: 1.24416 Gbps</td><td>下行: 9.95328 Gbps 上行: 2.48832 Gbps</td><td>下行: 9.95328Gbps 上行: 9.95328Gbps</td></tr><tr><td>分光比</td><td>1:64&#x2F;128</td><td>1:64&#x2F;128&#x2F;256</td><td>1:64&#x2F;128&#x2F;256</td></tr><tr><td>线路编码</td><td>NRZ</td><td>NRZ</td><td>NRZ</td></tr><tr><td>波长</td><td>下行: 1480-1500nm 上行:1290-1330nm</td><td>下行: 1575-1580nm 上行:1260-1280nm</td><td>下行:1575-1580nm  上行:1260-1280nm</td></tr><tr><td>最大距离</td><td>60km(逻辑)  20km</td><td>60km</td><td>60km</td></tr><tr><td>最大差动距离</td><td>20km</td><td>20km&#x2F;40km</td><td>20km&#x2F;40km</td></tr><tr><td>数据封装</td><td>GEM</td><td>XGEM</td><td>XGEM</td></tr><tr><td>FEC</td><td>上行&#x2F;下行: RS(255,239)</td><td>下行: RS (248,216) 上行: RS(248,232)</td><td>下行: RS(248,216) 上行: RS(248,216)</td></tr><tr><td>加密</td><td>下行:AES</td><td>下行&#x2F;上行:AES</td><td>下行&#x2F;上行:AES</td></tr><tr><td>广播加密</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>OMCI</td><td>固定长度</td><td>固定&#x2F;可调长度</td><td>固定&#x2F;可调长度</td></tr></tbody></table><h2 id="光传输网"><a href="#光传输网" class="headerlink" title="光传输网"></a>光传输网</h2><p><code>OTN</code>(OpticalTransportNetwork)光传送网，是以波分复用技术为基础、在光层组织网络的传送网，是下一代的骨干传送网。简单来概括就是以波分为基础的下一代传送网络。</p><pre><code class=" mermaid">graph LR  OTN1 --&gt; OTN2  OTN2 --&gt; OTN1  OLT  --&gt; OTN1  OTN2 --&gt; BRAS  OTN1  --&gt; OLT  BRAS --&gt; OTN2</code></pre><p>光传输网接入核心网</p><pre><code class=" mermaid">graph LR    id1([骨干网]) --- id3[(CR2)]    id1([骨干网]) --- id2[(CR1)]    id2[(CR1)] --- id3[(CR2)]    id3[(CR2)] --- id4[(SR)]    id3[(CR2)] --- id5[(BRAS)]     id2[(CR1)] --- id4[(SR)]    id2[(CR1)] --- id5[(BRAS)]    id5[(BRAS)] --- PON    id4[(SR)] --- id6[(SW1)]    id4[(SR)] --- id7[(SW2)]</code></pre><h2 id="核心网"><a href="#核心网" class="headerlink" title="核心网"></a>核心网</h2><p><code>BARS</code>(Broadband Remote Access Server)宽带远程接入服务器,指的是宽带远程接入服务器，是一种用于管理和控制带宽接入用户的网络设备。通常被安装在互联网服务提供商(ISP)的核心节点，允许用户通过不同的接入方式（如DSL、光纤、卫星等）连接到网络，并提供认证、授权、计费、流量控制等功能，保证用户的网络连接质量和安全性。</p><h3 id="BARS是如何工作的"><a href="#BARS是如何工作的" class="headerlink" title="BARS是如何工作的"></a>BARS是如何工作的</h3><p>BRAS作为网络设备，允许用户通过本地计算机远程访问宽带网络资源。它是一种面向宽带网络应用的新型接入网关，也是宽带接入网与骨干网之间的桥梁，可以提供基本的接入手段和宽带接入网的管理功能。BRAS在接收到用户的连接请求后，会先对用户的报文进行处理，再接入骨干网，解决了传统网络缺乏用户认证和授权、不利于运营管理的问题。</p><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/BRAS%E8%AE%BE%E5%A4%87%E4%BD%9C%E7%94%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="BRAS设备作用示意图"></p><h4 id="BRAS设备的关键技术"><a href="#BRAS设备的关键技术" class="headerlink" title="BRAS设备的关键技术"></a>BRAS设备的关键技术</h4><p>BRAS设备主要完成两方面功能，一是网络承载功能：包括用户认证和授权、IP地址分配、数据流量控制、安全策略实施以及服务质量保证；二是控制实现功能：与认证系统、计费系统和客户管理系统及服务策略控制系统相配合实现用户接入的认证、计费和管理功能。</p><p>如图，BRAS设备主要包括五大功能组件：用户接入识别、连接管理、AAA与用户管理、地址分配与管理以及业务控制。<br><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/BRAS%E7%9A%84%E4%BA%94%E5%A4%A7%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6.png" alt="BRAS的五大功能组件"></p><h4 id="BRAS设备的业务处理基本流程"><a href="#BRAS设备的业务处理基本流程" class="headerlink" title="BRAS设备的业务处理基本流程"></a>BRAS设备的业务处理基本流程</h4><ol><li><p>获取认证信息<br>接入识别组件收到用户终端发出的连接请求报文，从中提取用户名、密码及物理位置等信息，将信息发送给连接管理组件要求认证。</p></li><li><p>请求认证<br>连接管理组件根据接入限制等条件判断是否允许用户接入。如果允许，则将认证信息转发给AAA与用户管理组件。</p></li><li><p>人证和授权<br>AAA与用户管理组件根据AAA方案进行认证和授权，并将认证结果<br>及授权信息回应给连接管理组件。</p></li><li><p>请求分配IP地址<br>如果认证成功，连接管理组件向地址分配与管理组件申请IP地址。</p></li><li><p>分配IP地址<br>地址分配与管理组件根据用户信息，分配IP地址(远端地址需要到外部的DHCP服务器分配)，并将分配结果回应给连接管理组件。</p></li><li><p>允许用户上线<br>连接管理组件将认证结果及IP地址回应给接入识别组件，接入识别组件允许用户上线。</p></li><li><p>计费、控制<br>用户上线后，AAA及用户管理组件、业务控制组件共同负责对用户使用的基本业务、增值业务进行计费、带宽限制、QoS等控制。</p></li></ol><h3 id="传统BARS方案"><a href="#传统BARS方案" class="headerlink" title="传统BARS方案"></a>传统BARS方案</h3><h4 id="传统BRAS分布式部署方案"><a href="#传统BRAS分布式部署方案" class="headerlink" title="传统BRAS分布式部署方案"></a>传统BRAS分布式部署方案</h4><p>传统的BRAS设备采用分布式部署方案，是与服务器和用户端等周边系统形成全连接的模式。每个BRAS设备都要对周边设备对接集成，因此造成了部署效率慢、配置多、维护困难等问题。BRAS设备既具备管理会话的功能，也具备管理用户带宽的功能，用户从不同区域的BRAS设备上线，存在着资源分配不均、多Session、带宽空闲而导致资源浪费的问题。</p><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/%E4%BC%A0%E7%BB%9FBRAS%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2.png" alt="传统BRAS分布式部署"></p><h4 id="传统BRAS面临挑战"><a href="#传统BRAS面临挑战" class="headerlink" title="传统BRAS面临挑战"></a>传统BRAS面临挑战</h4><p>随着家庭宽带用户数量的激增，4K高清、物联网等新业务的高速发展，传统的分布式BRAS部署方案面临着巨大挑战，具体的挑战和原因如下：</p><ol><li><p><strong>资源利用率低</strong><br>传统BRAS既作为用户接入认证计费的网关，又作为IP网络的三层边缘，控制平面和转发平面紧耦合在一起，导致在性能处理上互相影响，无法充分发挥控制面和转发面的性能极限。</p></li><li><p><strong>管理维护复杂</strong><br>由于传统BRAS设备数量众多，网络在部署一个全局业务策略时，需要逐一配置每台设备。随着网络规模的扩大和新业务的引入，这种配置模式很难实现对业务的高效管理和对故障的快速排除。</p></li><li><p><strong>业务开通缓慢</strong><br>控制平面和数据平面深度耦合，以及分布式的网络控制机制，导致任何一个新技术的引入都严重依赖现网设备。多个设备同步更新，使得新技术的部署周期较长，严重制约网络的演进发展。</p></li></ol><p>为了能够加速业务上线、提升资源利用率以及简化运维，vBRAS方案与iBRAS方案应运而生。 </p><h3 id="vBRAS方案"><a href="#vBRAS方案" class="headerlink" title="vBRAS方案"></a>vBRAS方案</h3><h4 id="转控分离的vBRAS架构"><a href="#转控分离的vBRAS架构" class="headerlink" title="转控分离的vBRAS架构"></a>转控分离的vBRAS架构</h4><p>vBRAS也称为虚拟宽带远程接入服务器，vBRAS架构是一种基于虚拟化技术的宽带远程接入服务器架构。它将传统的硬件BRAS功能虚拟化，实现了网络功能的软件化，从而提高了网络的灵活性和可扩展性。</p><p>为了能够提升资源利用率和简化运维，核心网进行了控制和转发分离的演进，从而实现灵活、可扩展的网络架构，提高网络性能和效率。BRAS设备在宽带接入网中担任着重要角色，包括控制和管理用户的接入以及转发用户数据，其地位相当于宽带接入网中的核心。控制和转发在BRAS设备中是两个不同的处理过程，控制处理需要对用户进行认证、计费、限速等操作，而转发处理则负责转发用户数据。因此，为了提高BRAS设备的性能和可靠性，将控制面和转发面进行了分离，形成了转控分离的vBRAS架构。</p><p>在BRAS设备中进行转控分离的解耦方法是用不同的硬件设备处理控制和转发，便于分别对不同的处理过程进行优化和扩展，提高系统的稳定性和性能，同时也方便网络管理员对系统进行管理和维护。下图演示了vBRAS的控制面和转发面是如何进行解耦的。</p><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/vBRAS%E8%BD%AC%E6%8E%A7%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="vBRAS转控分离架构示意图"></p><ul><li><strong>控制平面</strong>(CP，Control Plane)<blockquote><p>在CU分离的架构中，将多台BRAS设备上的用户管理功能抽取出来并且集中，形成控制面CP。控制面（vBRAS-CP）定位为用户控制管理部件，主要包含：用户接入控制（ACC）、用户管理（UCM）、认证授权计费（AAA）、地址管理（AM）、UP管理（UPM）等功能模块。</p></blockquote></li><li><strong>转发平面</strong>(UP，User Plane)<blockquote><p>在CU分离的架构中，保留路由器的控制面以及BRAS设备的转发面，形成转发面。转发面（vBRAS-UP）定位为三层网络边缘及用户策略执行部件，主要包含流量转发、QoS、流量统计等纯转发面功能，以及动态路由协议等管道类控制平面功能。<br>华为提供的基于转控分离的vBRAS架构，包含BRAS设备的控制平面网元vBRAS-CP和BRAS的转发平面网元vBRAS-UP两个角色共同完成BRAS功能。部署场景如下，vBRAS-CP部署在核心DC，vBRAS-UP部署在传统汇聚机房。控制平面以云的方式集中部署，充分利用云的强计算能力，单机架后续可管理千万级用户；分布式部署的转发平面采用高性能硬件，处理大带宽低时延业务，单机架转发能力可达Tbps。</p></blockquote></li></ul><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/vBRAS%E8%BD%AC%E6%8E%A7%E5%88%86%E7%A6%BB%E9%83%A8%E7%BD%B2%E5%9C%BA%E6%99%AF.png" alt="vBRAS转控分离部署场景"></p><h4 id="vBRAS方案-1"><a href="#vBRAS方案-1" class="headerlink" title="vBRAS方案"></a>vBRAS方案</h4><p>基于控制转发分离的云化架构vBRAS方案，充分借鉴了SDN技术的集中管控思想和NFV的设备云化的思路，在保留BRAS设备高转发性能的同时，将计算密集型的BRAS设备用户管理功能云化和集中化，同时满足了当前现网的功能、性能和可维护性、新业务快速上线等需求。</p><p>vBRAS方案是遵循NFV架构（NFV全称为Network Function Virtulization网络功能虚拟化，是一种将传统的网络功能设备虚拟化为软件模块运行在通用硬件上的网络架构），将传统BRAS网元功能云化后的实现方案。vBRAS方案主打CU分离虚实共管方案，其使用了前文提到的转控分离的vBRAS架构。CU分离架构是面向全面云化时代的成本最优演进路线。</p><p>如图，在这个方案中，BRAS功能（例如AAA、DHCP、RADIUS等）及CP控制平面，使用虚拟通用服务器加软件来实现；而UP转发平面使用物理BRAS设备或者通用服务器加软件来实现，物理BRAS设备以保证大流量低时延转发，而虚拟通用服务器和软件用以实现大Session小流量业务。vBRAS方案不仅仅是将物理BRAS功能的虚拟化，并且云化后还可以灵活调度虚拟化的计算、存储、网络资源，将IT能力服务化，按需使用。除此之外，vBRAS方案还可以做全业务承载，包括HSI、IPTV、VoIP、IMTS等，因此这种方案适用于大流量多业务应用。</p><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/vBRAS%E6%96%B9%E6%A1%88%E7%BB%84%E7%BD%91%E5%9B%BE.png" alt="vBRAS方案组网图"></p><h3 id="iBRAS方案"><a href="#iBRAS方案" class="headerlink" title="iBRAS方案"></a>iBRAS方案</h3><h4 id="iBRAS解决方案架构"><a href="#iBRAS解决方案架构" class="headerlink" title="iBRAS解决方案架构"></a>iBRAS解决方案架构</h4><p>网络流量呈现爆炸式的增长，使得运营商对网络优化、差异化服务的需求越来越强烈。华为iBRAS解决方案（Intelligent Broadband Engine Solution）可以帮助运营商实现精细化运营。</p><p>iBRAS方案是一款集流量管理、应用加速、流量经营、流量镜像、流日志、体验运维、营销应用、信息推送等诸多功能于一体的解决方案，它利用多项专利业务感知技术，通过高性能的硬件平台实现网络数据报文的分析和处理，并辅助提供智能的、灵活的业务控制手段，可以在固网、无线网络及融合网络中实现流量分析、带宽管理及网络安全防护等多种功能。</p><p>iBRAS方案主要包括前台和VBP后台两部分，前台主要实现流量监控、策略执行和应用，以及上报统计数据，而后台主要完成策略配置、报表统计等功能。</p><ul><li><p><strong>前台</strong></p><blockquote><p>由BRAS设备或SR设备上插入的SA （Service Awareness，业务感知）单板实现。通过部署SA板卡到现网BRAS中，深入探析网络及应用指标，在此基础上，建立指标体系，并对应用、质差、问题定界、潜客等进行业务建模，提供上网质量分析、单用户质量查询、潜客识别及VIP体验保障等功能特性，支撑质差整治闭环和精准营销。</p></blockquote></li><li><p><strong>后台</strong></p><blockquote><p>由在BRAS设备上接入VBP（Versatile Business Platform，多功能业务平台）实现。VBP后台是iBRAS系统的核心组成部分，可以提供全面的设备管理和监控功能，包括设备管理、用户管理、流量管理、安全管理和日志管理。</p></blockquote></li></ul><p><img src="/img/%E8%BF%90%E8%90%A5%E5%95%86%E7%9C%81%E5%B8%82%E5%8E%BF%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BB%87/iBRAS%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="iBRAS解决方案架构示意图"></p><h3 id="BRAS方案对比"><a href="#BRAS方案对比" class="headerlink" title="BRAS方案对比"></a>BRAS方案对比</h3><p>在了解了BRAS的三种实现方案后，下表更直观地展示了每一种方案的特点。基于传统BRAS方案所延伸出的vBRAS方案与iBRAS方案，可以适配大流量多业务的使用场景，并且可以赋予运营商网络提供差异化服务和精细化运营的能力。</p><table><thead><tr><th>实现方案</th><th>部署方式</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>传统BRAS方案</td><td>分布式部署方案</td><td>1. BRAS设备同时承载用户上线和带宽管理的功能；2. 部署效率慢、配置多、维护困难等问题</td><td>适用于流量较小的单一业务场景</td></tr><tr><td>适用于流量较小的单一业务场景</td><td>CU分离虚实共管方案</td><td>1. CP控制平面采用集中式部署方案上云；2. UP转发平面采用分布式部署方案同时使用物理BRAS设备和虚拟BRAS增加转发效率；3. 功能云化和集中化，同时满足了当前现网的功能、性能和可维护性、新业务快速上线等需求</td><td>适用于大流量多业务场景</td></tr><tr><td>iBRAS方案</td><td>结合插入SA卡的BRAS前台和VBP后台</td><td>1. iBRAS前台主要实现流量监控、策略执行和应用，以及上报统计数据；2. 后台主要完成策略配置、报表统计等功能；3. 通过高性能的硬件平台和多种业务感知技术实现流量分析等功能</td><td>适用于对差异化服务和精细化运营有高要求的运营商网络</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://info.support.huawei.com/info-finder/zh/enterprise/index">华为Info-Finder</a></li><li><a href="https://zhuanlan.zhihu.com/p/483026412">到底什么是BRAS？</a></li><li><a href="https://zhuanlan.zhihu.com/p/144512705">如何区分光接入网OLT, ONU, ODN,ONT？</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>运营商</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>移动</tag>
      
      <tag>运营商</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“十四五”信息通信行业发展规划</title>
    <link href="/2023/08/15/%E4%BF%A1%E6%81%AF%E9%80%9A%E4%BF%A1%E8%A1%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/"/>
    <url>/2023/08/15/%E4%BF%A1%E6%81%AF%E9%80%9A%E4%BF%A1%E8%A1%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="“十四五”信息通信行业发展规划"><a href="#“十四五”信息通信行业发展规划" class="headerlink" title="“十四五”信息通信行业发展规划"></a>“十四五”信息通信行业发展规划</h1><p><code>工业和信息化部</code></p><div class="row">    <embed src="/pdf/“十四五”信息通信行业发展规划.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>政务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>政务</tag>
      
      <tag>十四五规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-适配器</title>
    <link href="/2021/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E9%80%82%E9%85%8D%E5%99%A8/"/>
    <url>/2021/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E9%80%82%E9%85%8D%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-适配器（Adapter）"><a href="#1-适配器（Adapter）" class="headerlink" title="1. 适配器（Adapter）"></a>1. 适配器（Adapter）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>把一个类接口转换成另一个用户需要的接口。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/3d5b828e-5c4d-48d8-a440-281e4a8e1c92.png"/> </div><br><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20201117020248795.png"/> </div><br><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>鸭子（Duck）和火鸡（Turkey）拥有不同的叫声，Duck 的叫声调用 quack() 方法，而 Turkey 调用 gobble() 方法。</p><p>要求将 Turkey 的 gobble() 方法适配成 Duck 的 quack() 方法，从而让火鸡冒充鸭子！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Turkey</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">gobble</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WildTurkey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Turkey</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">gobble</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;gobble!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TurkeyAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Duck</span> &#123;<br>    Turkey turkey;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TurkeyAdapter</span><span class="hljs-params">(Turkey turkey)</span> &#123;<br>        <span class="hljs-built_in">this</span>.turkey = turkey;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>        turkey.gobble();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Turkey</span> <span class="hljs-variable">turkey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WildTurkey</span>();<br>        <span class="hljs-type">Duck</span> <span class="hljs-variable">duck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TurkeyAdapter</span>(turkey);<br>        duck.quack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList%28T...%29">java.util.Arrays#asList()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-">java.util.Collections#list()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-">java.util.Collections#enumeration()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-">javax.xml.bind.annotation.adapters.XMLAdapter</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-观察者</title>
    <link href="/2021/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E8%A7%82%E5%AF%9F%E8%80%85/"/>
    <url>/2021/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E8%A7%82%E5%AF%9F%E8%80%85/</url>
    
    <content type="html"><![CDATA[<h2 id="7-观察者（Observer）"><a href="#7-观察者（Observer）" class="headerlink" title="7. 观察者（Observer）"></a>7. 观察者（Observer）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</p><p>主题（Subject）是被观察的对象，而其所有依赖者（Observer）称为观察者。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7a3c6a30-c735-4edb-8115-337288a4f0f2.jpg" width="600"/> </div><br><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>主题（Subject）具有注册和移除观察者、并通知所有观察者的功能，主题是通过维护一张观察者列表来实现这些操作的。</p><p>观察者（Observer）的注册功能需要调用主题的 registerObserver() 方法。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a8c8f894-a712-447c-9906-5caef6a016e3.png"/> </div><br><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b1df9732-86ce-4d69-9f06-fba1db7b3b5a.jpg"/> </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> temperature;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> humidity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> pressure;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WeatherData</span><span class="hljs-params">()</span> &#123;<br>        observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMeasurements</span><span class="hljs-params">(<span class="hljs-type">float</span> temperature, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        <span class="hljs-built_in">this</span>.temperature = temperature;<br>        <span class="hljs-built_in">this</span>.humidity = humidity;<br>        <span class="hljs-built_in">this</span>.pressure = pressure;<br>        notifyObserver();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span> &#123;<br>        observers.add(o);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> observers.indexOf(o);<br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>            observers.remove(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Observer o : observers) &#123;<br>            o.update(temperature, humidity, pressure);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatisticsDisplay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StatisticsDisplay</span><span class="hljs-params">(Subject weatherData)</span> &#123;<br>        weatherData.registerObserver(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;StatisticsDisplay.update: &quot;</span> + temp + <span class="hljs-string">&quot; &quot;</span> + humidity + <span class="hljs-string">&quot; &quot;</span> + pressure);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CurrentConditionsDisplay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CurrentConditionsDisplay</span><span class="hljs-params">(Subject weatherData)</span> &#123;<br>        weatherData.registerObserver(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentConditionsDisplay.update: &quot;</span> + temp + <span class="hljs-string">&quot; &quot;</span> + humidity + <span class="hljs-string">&quot; &quot;</span> + pressure);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherStation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">WeatherData</span> <span class="hljs-variable">weatherData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeatherData</span>();<br>        <span class="hljs-type">CurrentConditionsDisplay</span> <span class="hljs-variable">currentConditionsDisplay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CurrentConditionsDisplay</span>(weatherData);<br>        <span class="hljs-type">StatisticsDisplay</span> <span class="hljs-variable">statisticsDisplay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatisticsDisplay</span>(weatherData);<br><br>        weatherData.setMeasurements(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        weatherData.setMeasurements(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">CurrentConditionsDisplay.update: 0.0 0.0 0.0<br>StatisticsDisplay.update: 0.0 0.0 0.0<br>CurrentConditionsDisplay.update: 1.0 1.0 1.0<br>StatisticsDisplay.update: 1.0 1.0 1.0<br></code></pre></td></tr></table></figure><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html">java.util.Observer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html">java.util.EventListener</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html">javax.servlet.http.HttpSessionBindingListener</a></li><li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-单例</title>
    <link href="/2021/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B/"/>
    <url>/2021/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="单例（Singleton）"><a href="#单例（Singleton）" class="headerlink" title="单例（Singleton）"></a>单例（Singleton）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>确保一个类只有一个实例，并提供该实例的全局访问点。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</p><p>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/eca1f422-8381-409b-ad04-98ef39ae38ba.png"/> </div><br><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><h4 id="Ⅰ-懒汉式-线程不安全"><a href="#Ⅰ-懒汉式-线程不安全" class="headerlink" title="Ⅰ 懒汉式-线程不安全"></a>Ⅰ 懒汉式-线程不安全</h4><p>以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p><p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致实例化多次 uniqueInstance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>            uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅱ-饿汉式-线程安全"><a href="#Ⅱ-饿汉式-线程安全" class="headerlink" title="Ⅱ 饿汉式-线程安全"></a>Ⅱ 饿汉式-线程安全</h4><p>线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。</p><p>但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">uniqueInstance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br></code></pre></td></tr></table></figure><h4 id="Ⅲ-懒汉式-线程安全"><a href="#Ⅲ-懒汉式-线程安全" class="headerlink" title="Ⅲ 懒汉式-线程安全"></a>Ⅲ 懒汉式-线程安全</h4><p>只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了实例化多次 uniqueInstance。</p><p>但是当一个线程进入该方法之后，其它试图进入该方法的线程都必须等待，即使 uniqueInstance 已经被实例化了。这会让线程阻塞时间过长，因此该方法有性能问题，不推荐使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>        uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅳ-双重校验锁-线程安全"><a href="#Ⅳ-双重校验锁-线程安全" class="headerlink" title="Ⅳ 双重校验锁-线程安全"></a>Ⅳ 双重校验锁-线程安全</h4><p>uniqueInstance 只需要被实例化一次，之后就可以直接使用了。加锁操作只需要对实例化那部分的代码进行，只有当 uniqueInstance 没有被实例化时，才需要进行加锁。</p><p>双重校验锁先判断 uniqueInstance 是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>                    uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>考虑下面的实现，也就是只使用了一个 if 语句。在 uniqueInstance &#x3D;&#x3D; null 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code> 这条语句，只是先后的问题，那么就会进行两次实例化。因此必须使用双重校验锁，也就是需要使用两个 if 语句：第一个 if 语句用来避免 uniqueInstance 已经被实例化之后的加锁操作，而第二个 if 语句进行了加锁，所以只能有一个线程进入，就不会出现 uniqueInstance &#x3D;&#x3D; null 时两个线程同时进行实例化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>        uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 uniqueInstance 分配内存空间</li><li>初始化 uniqueInstance</li><li>将 uniqueInstance 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T<sub>1</sub> 执行了 1 和 3，此时 T<sub>2</sub> 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p><p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p><h4 id="Ⅴ-静态内部类实现"><a href="#Ⅴ-静态内部类实现" class="headerlink" title="Ⅴ 静态内部类实现"></a>Ⅴ 静态内部类实现</h4><p>当 Singleton 类被加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p><p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅵ-枚举实现"><a href="#Ⅵ-枚举实现" class="headerlink" title="Ⅵ 枚举实现"></a>Ⅵ 枚举实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    INSTANCE;<br><br>    <span class="hljs-keyword">private</span> String objName;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getObjName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> objName;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObjName</span><span class="hljs-params">(String objName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.objName = objName;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 单例测试</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">firstSingleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        firstSingleton.setObjName(<span class="hljs-string">&quot;firstName&quot;</span>);<br>        System.out.println(firstSingleton.getObjName());<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">secondSingleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        secondSingleton.setObjName(<span class="hljs-string">&quot;secondName&quot;</span>);<br>        System.out.println(firstSingleton.getObjName());<br>        System.out.println(secondSingleton.getObjName());<br><br>        <span class="hljs-comment">// 反射获取实例测试</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Singleton[] enumConstants = Singleton.class.getEnumConstants();<br>            <span class="hljs-keyword">for</span> (Singleton enumConstant : enumConstants) &#123;<br>                System.out.println(enumConstant.getObjName());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">firstName<br>secondName<br>secondName<br>secondName<br></code></pre></td></tr></table></figure><p>该实现可以防止反射攻击。在其它实现中，通过 setAccessible() 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象，如果要防止这种攻击，需要在构造函数中添加防止多次实例化的代码。该实现是由 JVM 保证只会实例化一次，因此不会出现上述的反射攻击。</p><p>该实现在多次序列化和序列化之后，不会得到多个实例。而其它实现需要使用 transient 修饰所有字段，并且实现序列化和反序列化的方法。</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li>Logger Classes</li><li>Configuration Classes</li><li>Accesing resources in shared mode</li><li>Factories implemented as Singletons</li></ul><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime%28%29">java.lang.Runtime#getRuntime()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop--">java.awt.Desktop#getDesktop()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager--">java.lang.System#getSecurityManager()</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-工厂方法</title>
    <link href="/2021/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <url>/2021/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="工厂方法（Factory-Method）"><a href="#工厂方法（Factory-Method）" class="headerlink" title="工厂方法（Factory Method）"></a>工厂方法（Factory Method）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。</p><p>下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。该方法是抽象的，需要由子类去实现。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f4d0afd0-8e78-4914-9e60-4366eaf065b5.png"/> </div><br><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> factoryMethod();<br>        <span class="hljs-comment">// do something with the product</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct1</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct2</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--">java.util.Calendar</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-">java.util.ResourceBundle</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--">java.text.NumberFormat</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-">java.nio.charset.Charset</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html#createURLStreamHandler-java.lang.String-">java.net.URLStreamHandlerFactory</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of-E-">java.util.EnumSet</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--">javax.xml.bind.JAXBContext</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-桥接</title>
    <link href="/2021/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E6%A1%A5%E6%8E%A5/"/>
    <url>/2021/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E6%A1%A5%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="桥接（Bridge）"><a href="#桥接（Bridge）" class="headerlink" title="桥接（Bridge）"></a>桥接（Bridge）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>将抽象与实现分离开来，使它们可以独立变化。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Abstraction：定义抽象类的接口</li><li>Implementor：定义实现类接口</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2a1f8b0f-1dd7-4409-b177-a381c58066ad.png"/> </div><br><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>RemoteControl 表示遥控器，指代 Abstraction。</p><p>TV 表示电视，指代 Implementor。</p><p>桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sony</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.on()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.off()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.tuneChannel()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RCA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.on()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.off()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.tuneChannel()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">protected</span> TV tv;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RemoteControl</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tv = tv;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteRemoteControl1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteRemoteControl1</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">super</span>(tv);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.on()&quot;</span>);<br>        tv.on();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.off()&quot;</span>);<br>        tv.off();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.tuneChannel()&quot;</span>);<br>        tv.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteRemoteControl2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteRemoteControl2</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">super</span>(tv);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.on()&quot;</span>);<br>        tv.on();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.off()&quot;</span>);<br>        tv.off();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.tuneChannel()&quot;</span>);<br>        tv.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RemoteControl</span> <span class="hljs-variable">remoteControl1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteRemoteControl1</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RCA</span>());<br>        remoteControl1.on();<br>        remoteControl1.off();<br>        remoteControl1.tuneChannel();<br>        <span class="hljs-type">RemoteControl</span> <span class="hljs-variable">remoteControl2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteRemoteControl2</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sony</span>());<br>         remoteControl2.on();<br>         remoteControl2.off();<br>         remoteControl2.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li>AWT (It provides an abstraction layer which maps onto the native OS the windowing support.)</li><li>JDBC</li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2021/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。</p><p>拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。</p><h1 id="二、创建型"><a href="#二、创建型" class="headerlink" title="二、创建型"></a>二、创建型</h1><h2 id="1-单例（Singleton）"><a href="#1-单例（Singleton）" class="headerlink" title="1. 单例（Singleton）"></a>1. 单例（Singleton）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>确保一个类只有一个实例，并提供该实例的全局访问点。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。</p><p>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/eca1f422-8381-409b-ad04-98ef39ae38ba.png"/> </div><br><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><h4 id="Ⅰ-懒汉式-线程不安全"><a href="#Ⅰ-懒汉式-线程不安全" class="headerlink" title="Ⅰ 懒汉式-线程不安全"></a>Ⅰ 懒汉式-线程不安全</h4><p>以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。</p><p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致实例化多次 uniqueInstance。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>            uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅱ-饿汉式-线程安全"><a href="#Ⅱ-饿汉式-线程安全" class="headerlink" title="Ⅱ 饿汉式-线程安全"></a>Ⅱ 饿汉式-线程安全</h4><p>线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。</p><p>但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">uniqueInstance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br></code></pre></td></tr></table></figure><h4 id="Ⅲ-懒汉式-线程安全"><a href="#Ⅲ-懒汉式-线程安全" class="headerlink" title="Ⅲ 懒汉式-线程安全"></a>Ⅲ 懒汉式-线程安全</h4><p>只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了实例化多次 uniqueInstance。</p><p>但是当一个线程进入该方法之后，其它试图进入该方法的线程都必须等待，即使 uniqueInstance 已经被实例化了。这会让线程阻塞时间过长，因此该方法有性能问题，不推荐使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>        uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> uniqueInstance;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅳ-双重校验锁-线程安全"><a href="#Ⅳ-双重校验锁-线程安全" class="headerlink" title="Ⅳ 双重校验锁-线程安全"></a>Ⅳ 双重校验锁-线程安全</h4><p>uniqueInstance 只需要被实例化一次，之后就可以直接使用了。加锁操作只需要对实例化那部分的代码进行，只有当 uniqueInstance 没有被实例化时，才需要进行加锁。</p><p>双重校验锁先判断 uniqueInstance 是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton uniqueInstance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>                    uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> uniqueInstance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>考虑下面的实现，也就是只使用了一个 if 语句。在 uniqueInstance &#x3D;&#x3D; null 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code> 这条语句，只是先后的问题，那么就会进行两次实例化。因此必须使用双重校验锁，也就是需要使用两个 if 语句：第一个 if 语句用来避免 uniqueInstance 已经被实例化之后的加锁操作，而第二个 if 语句进行了加锁，所以只能有一个线程进入，就不会出现 uniqueInstance &#x3D;&#x3D; null 时两个线程同时进行实例化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (uniqueInstance == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;<br>        uniqueInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>uniqueInstance 采用 volatile 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 uniqueInstance 分配内存空间</li><li>初始化 uniqueInstance</li><li>将 uniqueInstance 指向分配的内存地址</li></ol><p>但是由于 JVM 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T<sub>1</sub> 执行了 1 和 3，此时 T<sub>2</sub> 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p><p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p><h4 id="Ⅴ-静态内部类实现"><a href="#Ⅴ-静态内部类实现" class="headerlink" title="Ⅴ 静态内部类实现"></a>Ⅴ 静态内部类实现</h4><p>当 Singleton 类被加载时，静态内部类 SingletonHolder 没有被加载进内存。只有当调用 <code>getUniqueInstance()</code> 方法从而触发 <code>SingletonHolder.INSTANCE</code> 时 SingletonHolder 才会被加载，此时初始化 INSTANCE 实例，并且 JVM 能确保 INSTANCE 只被实例化一次。</p><p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getUniqueInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Ⅵ-枚举实现"><a href="#Ⅵ-枚举实现" class="headerlink" title="Ⅵ 枚举实现"></a>Ⅵ 枚举实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Singleton</span> &#123;<br><br>    INSTANCE;<br><br>    <span class="hljs-keyword">private</span> String objName;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getObjName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> objName;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setObjName</span><span class="hljs-params">(String objName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.objName = objName;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">// 单例测试</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">firstSingleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        firstSingleton.setObjName(<span class="hljs-string">&quot;firstName&quot;</span>);<br>        System.out.println(firstSingleton.getObjName());<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">secondSingleton</span> <span class="hljs-operator">=</span> Singleton.INSTANCE;<br>        secondSingleton.setObjName(<span class="hljs-string">&quot;secondName&quot;</span>);<br>        System.out.println(firstSingleton.getObjName());<br>        System.out.println(secondSingleton.getObjName());<br><br>        <span class="hljs-comment">// 反射获取实例测试</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Singleton[] enumConstants = Singleton.class.getEnumConstants();<br>            <span class="hljs-keyword">for</span> (Singleton enumConstant : enumConstants) &#123;<br>                System.out.println(enumConstant.getObjName());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">firstName<br>secondName<br>secondName<br>secondName<br></code></pre></td></tr></table></figure><p>该实现可以防止反射攻击。在其它实现中，通过 setAccessible() 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象，如果要防止这种攻击，需要在构造函数中添加防止多次实例化的代码。该实现是由 JVM 保证只会实例化一次，因此不会出现上述的反射攻击。</p><p>该实现在多次序列化和序列化之后，不会得到多个实例。而其它实现需要使用 transient 修饰所有字段，并且实现序列化和反序列化的方法。</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><ul><li>Logger Classes</li><li>Configuration Classes</li><li>Accesing resources in shared mode</li><li>Factories implemented as Singletons</li></ul><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime%28%29">java.lang.Runtime#getRuntime()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop--">java.awt.Desktop#getDesktop()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager--">java.lang.System#getSecurityManager()</a></li></ul><h2 id="2-简单工厂（Simple-Factory）"><a href="#2-简单工厂（Simple-Factory）" class="headerlink" title="2. 简单工厂（Simple Factory）"></a>2. 简单工厂（Simple Factory）</h2><h3 id="Intent-1"><a href="#Intent-1" class="headerlink" title="Intent"></a>Intent</h3><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p><h3 id="Class-Diagram-1"><a href="#Class-Diagram-1" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>简单工厂把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。</p><p>这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/40c0c17e-bba6-4493-9857-147c0044a018.png"/> </div><br><h3 id="Implementation-1"><a href="#Implementation-1" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Product</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProduct</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProduct1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProduct2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下的 Client 类包含了实例化的代码，这是一种错误的实现。如果在客户类中存在这种实例化代码，就需要考虑将代码放到简单工厂中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        Product product;<br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-number">1</span>) &#123;<br>            product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct1</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-number">2</span>) &#123;<br>            product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct2</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            product = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct</span>();<br>        &#125;<br>        <span class="hljs-comment">// do something with the product</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下的 SimpleFactory 是简单工厂实现，它被所有需要进行实例化的客户类调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-type">int</span> type)</span> &#123;<br>        <span class="hljs-keyword">if</span> (type == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct1</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct2</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SimpleFactory</span> <span class="hljs-variable">simpleFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleFactory</span>();<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> simpleFactory.createProduct(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// do something with the product</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-工厂方法（Factory-Method）"><a href="#3-工厂方法（Factory-Method）" class="headerlink" title="3. 工厂方法（Factory Method）"></a>3. 工厂方法（Factory Method）</h2><h3 id="Intent-2"><a href="#Intent-2" class="headerlink" title="Intent"></a>Intent</h3><p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p><h3 id="Class-Diagram-2"><a href="#Class-Diagram-2" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。</p><p>下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。该方法是抽象的，需要由子类去实现。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f4d0afd0-8e78-4914-9e60-4366eaf065b5.png"/> </div><br><h3 id="Implementation-2"><a href="#Implementation-2" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> factoryMethod();<br>        <span class="hljs-comment">// do something with the product</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct1</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">factoryMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteProduct2</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-1"><a href="#JDK-1" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--">java.util.Calendar</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-">java.util.ResourceBundle</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--">java.text.NumberFormat</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-">java.nio.charset.Charset</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html#createURLStreamHandler-java.lang.String-">java.net.URLStreamHandlerFactory</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of-E-">java.util.EnumSet</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--">javax.xml.bind.JAXBContext</a></li></ul><h2 id="4-抽象工厂（Abstract-Factory）"><a href="#4-抽象工厂（Abstract-Factory）" class="headerlink" title="4. 抽象工厂（Abstract Factory）"></a>4. 抽象工厂（Abstract Factory）</h2><h3 id="Intent-3"><a href="#Intent-3" class="headerlink" title="Intent"></a>Intent</h3><p>提供一个接口，用于创建   <strong>相关的对象家族</strong>  。</p><h3 id="Class-Diagram-3"><a href="#Class-Diagram-3" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。</p><p>抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB() 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。</p><p>至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。</p><p>从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory，而工厂方法模式使用了继承。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e2190c36-8b27-4690-bde5-9911020a1294.png"/> </div><br><h3 id="Implementation-3"><a href="#Implementation-3" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractProductA</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractProductB</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductA1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProductA</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductA2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProductA</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductB1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProductB</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductB2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProductB</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    <span class="hljs-keyword">abstract</span> AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">abstract</span> AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductA1</span>();<br>    &#125;<br><br>    AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductB1</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFactory2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFactory</span> &#123;<br>    AbstractProductA <span class="hljs-title function_">createProductA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductA2</span>();<br>    &#125;<br><br>    AbstractProductB <span class="hljs-title function_">createProductB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductB2</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AbstractFactory</span> <span class="hljs-variable">abstractFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteFactory1</span>();<br>        <span class="hljs-type">AbstractProductA</span> <span class="hljs-variable">productA</span> <span class="hljs-operator">=</span> abstractFactory.createProductA();<br>        <span class="hljs-type">AbstractProductB</span> <span class="hljs-variable">productB</span> <span class="hljs-operator">=</span> abstractFactory.createProductB();<br>        <span class="hljs-comment">// do something with productA and productB</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-2"><a href="#JDK-2" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">javax.xml.parsers.DocumentBuilderFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/transform/TransformerFactory.html#newInstance--">javax.xml.transform.TransformerFactory</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--">javax.xml.xpath.XPathFactory</a></li></ul><h2 id="5-生成器（Builder）"><a href="#5-生成器（Builder）" class="headerlink" title="5. 生成器（Builder）"></a>5. 生成器（Builder）</h2><h3 id="Intent-4"><a href="#Intent-4" class="headerlink" title="Intent"></a>Intent</h3><p>封装一个对象的构造过程，并允许按步骤构造。</p><h3 id="Class-Diagram-4"><a href="#Class-Diagram-4" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/db5e376d-0b3e-490e-a43a-3231914b6668.png"/> </div><br><h3 id="Implementation-4"><a href="#Implementation-4" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个简易的 StringBuilder 实现，参考了 JDK 1.8 源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractStringBuilder</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">char</span>[] value;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractStringBuilder</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        count = <span class="hljs-number">0</span>;<br>        value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title function_">append</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        ensureCapacityInternal(count + <span class="hljs-number">1</span>);<br>        value[count++] = c;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;<br>        <span class="hljs-comment">// overflow-conscious code</span><br>        <span class="hljs-keyword">if</span> (minimumCapacity - value.length &gt; <span class="hljs-number">0</span>)<br>            expandCapacity(minimumCapacity);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">expandCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> value.length * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (newCapacity - minimumCapacity &lt; <span class="hljs-number">0</span>)<br>            newCapacity = minimumCapacity;<br>        <span class="hljs-keyword">if</span> (newCapacity &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (minimumCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>            newCapacity = Integer.MAX_VALUE;<br>        &#125;<br>        value = Arrays.copyOf(value, newCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractStringBuilder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StringBuilder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">16</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Create a copy, don&#x27;t share the array</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value, <span class="hljs-number">0</span>, count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">26</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + i));<br>        &#125;<br>        System.out.println(sb.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">abcdefghijklmnopqrstuvwxyz<br></code></pre></td></tr></table></figure><h3 id="JDK-3"><a href="#JDK-3" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html">java.lang.StringBuilder</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-">java.nio.ByteBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-">java.lang.StringBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html">java.lang.Appendable</a></li><li><a href="https://github.com/apache/camel/tree/0e195428ee04531be27a0b659005e3aa8d159d23/camel-core/src/main/java/org/apache/camel/builder">Apache Camel builders</a></li></ul><h2 id="6-原型模式（Prototype）"><a href="#6-原型模式（Prototype）" class="headerlink" title="6. 原型模式（Prototype）"></a>6. 原型模式（Prototype）</h2><h3 id="Intent-5"><a href="#Intent-5" class="headerlink" title="Intent"></a>Intent</h3><p>使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。</p><h3 id="Class-Diagram-5"><a href="#Class-Diagram-5" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b8922f8c-95e6-4187-be85-572a509afb71.png"/> </div><br><h3 id="Implementation-5"><a href="#Implementation-5" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Prototype</span> &#123;<br>    <span class="hljs-keyword">abstract</span> Prototype <span class="hljs-title function_">myClone</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcretePrototype</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Prototype</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String filed;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcretePrototype</span><span class="hljs-params">(String filed)</span> &#123;<br>        <span class="hljs-built_in">this</span>.filed = filed;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    Prototype <span class="hljs-title function_">myClone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype</span>(filed);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> filed;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Prototype</span> <span class="hljs-variable">prototype</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcretePrototype</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-type">Prototype</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> prototype.myClone();<br>        System.out.println(clone.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">abc<br></code></pre></td></tr></table></figure><h3 id="JDK-4"><a href="#JDK-4" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone%28%29">java.lang.Object#clone()</a></li></ul><h1 id="三、行为型"><a href="#三、行为型" class="headerlink" title="三、行为型"></a>三、行为型</h1><h2 id="1-责任链（Chain-Of-Responsibility）"><a href="#1-责任链（Chain-Of-Responsibility）" class="headerlink" title="1. 责任链（Chain Of Responsibility）"></a>1. 责任链（Chain Of Responsibility）</h2><h3 id="Intent-6"><a href="#Intent-6" class="headerlink" title="Intent"></a>Intent</h3><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。</p><h3 id="Class-Diagram-6"><a href="#Class-Diagram-6" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Handler：定义处理请求的接口，并且实现后继链（successor）</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ca9f23bf-55a4-47b2-9534-a28e35397988.png"/> </div><br><h3 id="Implementation-6"><a href="#Implementation-6" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> Handler successor;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Handler</span><span class="hljs-params">(Handler successor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.successor = successor;<br>    &#125;<br><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Request request)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandler1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteHandler1</span><span class="hljs-params">(Handler successor)</span> &#123;<br>        <span class="hljs-built_in">super</span>(successor);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Request request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request.getType() == RequestType.TYPE1) &#123;<br>            System.out.println(request.getName() + <span class="hljs-string">&quot; is handle by ConcreteHandler1&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (successor != <span class="hljs-literal">null</span>) &#123;<br>            successor.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteHandler2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteHandler2</span><span class="hljs-params">(Handler successor)</span> &#123;<br>        <span class="hljs-built_in">super</span>(successor);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(Request request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request.getType() == RequestType.TYPE2) &#123;<br>            System.out.println(request.getName() + <span class="hljs-string">&quot; is handle by ConcreteHandler2&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (successor != <span class="hljs-literal">null</span>) &#123;<br>            successor.handleRequest(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span> &#123;<br><br>    <span class="hljs-keyword">private</span> RequestType type;<br>    <span class="hljs-keyword">private</span> String name;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Request</span><span class="hljs-params">(RequestType type, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> RequestType <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RequestType</span> &#123;<br>    TYPE1, TYPE2<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">handler1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteHandler1</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">handler2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteHandler2</span>(handler1);<br><br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(RequestType.TYPE1, <span class="hljs-string">&quot;request1&quot;</span>);<br>        handler2.handleRequest(request1);<br><br>        <span class="hljs-type">Request</span> <span class="hljs-variable">request2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(RequestType.TYPE2, <span class="hljs-string">&quot;request2&quot;</span>);<br>        handler2.handleRequest(request2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">request1 is handle by ConcreteHandler1<br>request2 is handle by ConcreteHandler2<br></code></pre></td></tr></table></figure><h3 id="JDK-5"><a href="#JDK-5" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html#log%28java.util.logging.Level,%20java.lang.String%29">java.util.logging.Logger#log()</a></li><li><a href="https://commons.apache.org/proper/commons-chain/index.html">Apache Commons Chain</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter-javax.servlet.ServletRequest-javax.servlet.ServletResponse-javax.servlet.FilterChain-">javax.servlet.Filter#doFilter()</a></li></ul><h2 id="2-命令（Command）"><a href="#2-命令（Command）" class="headerlink" title="2. 命令（Command）"></a>2. 命令（Command）</h2><h3 id="Intent-7"><a href="#Intent-7" class="headerlink" title="Intent"></a>Intent</h3><p>将命令封装成对象中，具有以下作用：</p><ul><li>使用命令来参数化其它对象</li><li>将命令放入队列中进行排队</li><li>将命令的操作记录到日志中</li><li>支持可撤销的操作</li></ul><h3 id="Class-Diagram-7"><a href="#Class-Diagram-7" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Command：命令</li><li>Receiver：命令接收者，也就是命令真正的执行者</li><li>Invoker：通过它来调用命令</li><li>Client：可以设置命令与命令的接收者</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c44a0342-f405-4f17-b750-e27cf4aadde2.png"/> </div><br><h3 id="Implementation-7"><a href="#Implementation-7" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计一个遥控器，可以控制电灯开关。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e6bded8e-41a0-489a-88a6-638e88ab7666.jpg"/> </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br>    Light light;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOnCommand</span><span class="hljs-params">(Light light)</span> &#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.on();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LightOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Command</span> &#123;<br>    Light light;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LightOffCommand</span><span class="hljs-params">(Light light)</span> &#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.off();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is on!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Light is off!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 遥控器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span> &#123;<br>    <span class="hljs-keyword">private</span> Command[] onCommands;<br>    <span class="hljs-keyword">private</span> Command[] offCommands;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">slotNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Invoker</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.onCommands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>[slotNum];<br>        <span class="hljs-built_in">this</span>.offCommands = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Command</span>[slotNum];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnCommand</span><span class="hljs-params">(Command command, <span class="hljs-type">int</span> slot)</span> &#123;<br>        onCommands[slot] = command;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOffCommand</span><span class="hljs-params">(Command command, <span class="hljs-type">int</span> slot)</span> &#123;<br>        offCommands[slot] = command;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onButtonWasPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> slot)</span> &#123;<br>        onCommands[slot].execute();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">offButtonWasPushed</span><span class="hljs-params">(<span class="hljs-type">int</span> slot)</span> &#123;<br>        offCommands[slot].execute();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Invoker</span> <span class="hljs-variable">invoker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>();<br>        <span class="hljs-type">Light</span> <span class="hljs-variable">light</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>();<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">lightOnCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOnCommand</span>(light);<br>        <span class="hljs-type">Command</span> <span class="hljs-variable">lightOffCommand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LightOffCommand</span>(light);<br>        invoker.setOnCommand(lightOnCommand, <span class="hljs-number">0</span>);<br>        invoker.setOffCommand(lightOffCommand, <span class="hljs-number">0</span>);<br>        invoker.onButtonWasPushed(<span class="hljs-number">0</span>);<br>        invoker.offButtonWasPushed(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">java.lang.Runnable</a></li><li><a href="https://github.com/Netflix/Hystrix/wiki">Netflix Hystrix</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/Action.html">javax.swing.Action</a></li></ul><h2 id="3-解释器（Interpreter）"><a href="#3-解释器（Interpreter）" class="headerlink" title="3. 解释器（Interpreter）"></a>3. 解释器（Interpreter）</h2><h3 id="Intent-8"><a href="#Intent-8" class="headerlink" title="Intent"></a>Intent</h3><p>为语言创建解释器，通常由语言的语法和语法分析来定义。</p><h3 id="Class-Diagram-8"><a href="#Class-Diagram-8" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>TerminalExpression：终结符表达式，每个终结符都需要一个 TerminalExpression。</li><li>Context：上下文，包含解释器之外的一些全局信息。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2b125bcd-1b36-43be-9b78-d90b076be549.png"/> </div><br><h3 id="Implementation-8"><a href="#Implementation-8" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个规则检验器实现，具有 and 和 or 规则，通过规则可以构建一颗解析树，用来检验一个文本是否满足解析树定义的规则。</p><p>例如一颗解析树为 D And (A Or (B C))，文本 “D A” 满足该解析树定义的规则。</p><p>这里的 Context 指的是 String。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(String str)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TerminalExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">literal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TerminalExpression</span><span class="hljs-params">(String str)</span> &#123;<br>        literal = str;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(str);<br>        <span class="hljs-keyword">while</span> (st.hasMoreTokens()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> st.nextToken();<br>            <span class="hljs-keyword">if</span> (test.equals(literal)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AndExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Expression</span> <span class="hljs-variable">expression1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Expression</span> <span class="hljs-variable">expression2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AndExpression</span><span class="hljs-params">(Expression expression1, Expression expression2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.expression1 = expression1;<br>        <span class="hljs-built_in">this</span>.expression2 = expression2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">return</span> expression1.interpret(str) &amp;&amp; expression2.interpret(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Expression</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Expression</span> <span class="hljs-variable">expression1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Expression</span> <span class="hljs-variable">expression2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrExpression</span><span class="hljs-params">(Expression expression1, Expression expression2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.expression1 = expression1;<br>        <span class="hljs-built_in">this</span>.expression2 = expression2;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interpret</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">return</span> expression1.interpret(str) || expression2.interpret(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构建解析树</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Expression <span class="hljs-title function_">buildInterpreterTree</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Literal</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">terminal1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">terminal2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">terminal3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">terminal4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(<span class="hljs-string">&quot;D&quot;</span>);<br>        <span class="hljs-comment">// B C</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">alternation1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrExpression</span>(terminal2, terminal3);<br>        <span class="hljs-comment">// A Or (B C)</span><br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">alternation2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrExpression</span>(terminal1, alternation1);<br>        <span class="hljs-comment">// D And (A Or (B C))</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AndExpression</span>(terminal4, alternation2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Expression</span> <span class="hljs-variable">define</span> <span class="hljs-operator">=</span> buildInterpreterTree();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">context1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D A&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">context2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;A B&quot;</span>;<br>        System.out.println(define.interpret(context1));<br>        System.out.println(define.interpret(context2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">true<br>false<br></code></pre></td></tr></table></figure><h3 id="JDK-7"><a href="#JDK-7" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.Pattern</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/Normalizer.html">java.text.Normalizer</a></li><li>All subclasses of <a href="http://docs.oracle.com/javase/8/docs/api/java/text/Format.html">java.text.Format</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/el/ELResolver.html">javax.el.ELResolver</a></li></ul><h2 id="4-迭代器（Iterator）"><a href="#4-迭代器（Iterator）" class="headerlink" title="4. 迭代器（Iterator）"></a>4. 迭代器（Iterator）</h2><h3 id="Intent-9"><a href="#Intent-9" class="headerlink" title="Intent"></a>Intent</h3><p>提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。</p><h3 id="Class-Diagram-9"><a href="#Class-Diagram-9" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Aggregate 是聚合类，其中 createIterator() 方法可以产生一个 Iterator；</li><li>Iterator 主要定义了 hasNext() 和 next() 方法。</li><li>Client 组合了 Aggregate，为了迭代遍历 Aggregate，也需要组合 Iterator。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/89292ae1-5f13-44dc-b508-3f035e80bf89.png"/> </div><br><h3 id="Implementation-9"><a href="#Implementation-9" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aggregate</span> &#123;<br>    Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteAggregate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aggregate</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer[] items;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteAggregate</span><span class="hljs-params">()</span> &#123;<br>        items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; items.length; i++) &#123;<br>            items[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">createIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteIterator</span>&lt;Integer&gt;(items);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span>&lt;Item&gt; &#123;<br><br>    Item <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteIterator</span>&lt;Item&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Item[] items;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteIterator</span><span class="hljs-params">(Item[] items)</span> &#123;<br>        <span class="hljs-built_in">this</span>.items = items;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> items[position++];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> position &lt; items.length;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Aggregate</span> <span class="hljs-variable">aggregate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteAggregate</span>();<br>        Iterator&lt;Integer&gt; iterator = aggregate.createIterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            System.out.println(iterator.next());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">java.util.Iterator</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html">java.util.Enumeration</a></li></ul><h2 id="5-中介者（Mediator）"><a href="#5-中介者（Mediator）" class="headerlink" title="5. 中介者（Mediator）"></a>5. 中介者（Mediator）</h2><h3 id="Intent-10"><a href="#Intent-10" class="headerlink" title="Intent"></a>Intent</h3><p>集中相关对象之间复杂的沟通和控制方式。</p><h3 id="Class-Diagram-10"><a href="#Class-Diagram-10" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Mediator：中介者，定义一个接口用于与各同事（Colleague）对象通信。</li><li>Colleague：同事，相关对象</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/30d6e95c-2e3c-4d32-bf4f-68128a70bc05.png"/> </div><br><h3 id="Implementation-10"><a href="#Implementation-10" class="headerlink" title="Implementation"></a>Implementation</h3><p>Alarm（闹钟）、CoffeePot（咖啡壶）、Calendar（日历）、Sprinkler（喷头）是一组相关的对象，在某个对象的事件产生时需要去操作其它对象，形成了下面这种依赖结构：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/82cfda3b-b53b-4c89-9fdb-26dd2db0cd02.jpg"/> </div><br><p>使用中介者模式可以将复杂的依赖结构变成星形结构：</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5359cbf5-5a79-4874-9b17-f23c53c2cb80.jpg"/> </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alarm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        mediator.doEvent(<span class="hljs-string">&quot;alarm&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAlarm</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doAlarm()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoffeePot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        mediator.doEvent(<span class="hljs-string">&quot;coffeePot&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCoffeePot</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doCoffeePot()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calender</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        mediator.doEvent(<span class="hljs-string">&quot;calender&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCalender</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doCalender()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sprinkler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleague</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onEvent</span><span class="hljs-params">(Mediator mediator)</span> &#123;<br>        mediator.doEvent(<span class="hljs-string">&quot;sprinkler&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSprinkler</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;doSprinkler()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doEvent</span><span class="hljs-params">(String eventType)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">private</span> Alarm alarm;<br>    <span class="hljs-keyword">private</span> CoffeePot coffeePot;<br>    <span class="hljs-keyword">private</span> Calender calender;<br>    <span class="hljs-keyword">private</span> Sprinkler sprinkler;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteMediator</span><span class="hljs-params">(Alarm alarm, CoffeePot coffeePot, Calender calender, Sprinkler sprinkler)</span> &#123;<br>        <span class="hljs-built_in">this</span>.alarm = alarm;<br>        <span class="hljs-built_in">this</span>.coffeePot = coffeePot;<br>        <span class="hljs-built_in">this</span>.calender = calender;<br>        <span class="hljs-built_in">this</span>.sprinkler = sprinkler;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doEvent</span><span class="hljs-params">(String eventType)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (eventType) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;alarm&quot;</span>:<br>                doAlarmEvent();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;coffeePot&quot;</span>:<br>                doCoffeePotEvent();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;calender&quot;</span>:<br>                doCalenderEvent();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                doSprinklerEvent();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAlarmEvent</span><span class="hljs-params">()</span> &#123;<br>        alarm.doAlarm();<br>        coffeePot.doCoffeePot();<br>        calender.doCalender();<br>        sprinkler.doSprinkler();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCoffeePotEvent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doCalenderEvent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSprinklerEvent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Alarm</span> <span class="hljs-variable">alarm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Alarm</span>();<br>        <span class="hljs-type">CoffeePot</span> <span class="hljs-variable">coffeePot</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoffeePot</span>();<br>        <span class="hljs-type">Calender</span> <span class="hljs-variable">calender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calender</span>();<br>        <span class="hljs-type">Sprinkler</span> <span class="hljs-variable">sprinkler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sprinkler</span>();<br>        <span class="hljs-type">Mediator</span> <span class="hljs-variable">mediator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteMediator</span>(alarm, coffeePot, calender, sprinkler);<br>        <span class="hljs-comment">// 闹钟事件到达，调用中介者就可以操作相关对象</span><br>        alarm.onEvent(mediator);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">doAlarm()<br>doCoffeePot()<br>doCalender()<br>doSprinkler()<br></code></pre></td></tr></table></figure><h3 id="JDK-9"><a href="#JDK-9" class="headerlink" title="JDK"></a>JDK</h3><ul><li>All scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Timer.html">java.util.Timer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-">java.util.concurrent.Executor#execute()</a></li><li>submit() and invokeXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html">java.util.concurrent.ExecutorService</a></li><li>scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html">java.util.concurrent.ScheduledExecutorService</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-">java.lang.reflect.Method#invoke()</a></li></ul><h2 id="6-备忘录（Memento）"><a href="#6-备忘录（Memento）" class="headerlink" title="6. 备忘录（Memento）"></a>6. 备忘录（Memento）</h2><h3 id="Intent-11"><a href="#Intent-11" class="headerlink" title="Intent"></a>Intent</h3><p>在不违反封装的情况下获得对象的内部状态，从而在需要时可以将对象恢复到最初状态。</p><h3 id="Class-Diagram-11"><a href="#Class-Diagram-11" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Originator：原始对象</li><li>Caretaker：负责保存好备忘录</li><li>Menento：备忘录，存储原始对象的的状态。备忘录实际上有两个接口，一个是提供给 Caretaker 的窄接口：它只能将备忘录传递给其它对象；一个是提供给 Originator 的宽接口，允许它访问到先前状态所需的所有数据。理想情况是只允许 Originator 访问本备忘录的内部状态。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/50678f34-694f-45a4-91c6-34d985c83fee.png"/> </div><br><h3 id="Implementation-11"><a href="#Implementation-11" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下实现了一个简单计算器程序，可以输入两个值，然后计算这两个值的和。备忘录模式允许将这两个值存储起来，然后在某个时刻用存储的状态进行恢复。</p><p>实现参考：<a href="https://www.oodesign.com/memento-pattern-calculator-example-java-sourcecode.html">Memento Pattern - Calculator Example - Java Sourcecode</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Originator Interface</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-comment">// Create Memento</span><br>    PreviousCalculationToCareTaker <span class="hljs-title function_">backupLastCalculation</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// setMemento</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">restorePreviousCalculation</span><span class="hljs-params">(PreviousCalculationToCareTaker memento)</span>;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getCalculationResult</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirstNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> firstNumber)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecondNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> secondNumber)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Originator Implementation</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> firstNumber;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> secondNumber;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PreviousCalculationToCareTaker <span class="hljs-title function_">backupLastCalculation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// create a memento object used for restoring two numbers</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreviousCalculationImp</span>(firstNumber, secondNumber);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">restorePreviousCalculation</span><span class="hljs-params">(PreviousCalculationToCareTaker memento)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstNumber = ((PreviousCalculationToOriginator) memento).getFirstNumber();<br>        <span class="hljs-built_in">this</span>.secondNumber = ((PreviousCalculationToOriginator) memento).getSecondNumber();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCalculationResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// result is adding two numbers</span><br>        <span class="hljs-keyword">return</span> firstNumber + secondNumber;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFirstNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> firstNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstNumber = firstNumber;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSecondNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> secondNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.secondNumber = secondNumber;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Memento Interface to Originator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This interface allows the originator to restore its state</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PreviousCalculationToOriginator</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getFirstNumber</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getSecondNumber</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  Memento interface to CalculatorOperator (Caretaker)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PreviousCalculationToCareTaker</span> &#123;<br>    <span class="hljs-comment">// no operations permitted for the caretaker</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Memento Object Implementation</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Note that this object implements both interfaces to Originator and CareTaker</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreviousCalculationImp</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PreviousCalculationToCareTaker</span>,<br>        PreviousCalculationToOriginator &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> firstNumber;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> secondNumber;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PreviousCalculationImp</span><span class="hljs-params">(<span class="hljs-type">int</span> firstNumber, <span class="hljs-type">int</span> secondNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstNumber = firstNumber;<br>        <span class="hljs-built_in">this</span>.secondNumber = secondNumber;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFirstNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> firstNumber;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSecondNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> secondNumber;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CareTaker object</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// program starts</span><br>        <span class="hljs-type">Calculator</span> <span class="hljs-variable">calculator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CalculatorImp</span>();<br><br>        <span class="hljs-comment">// assume user enters two numbers</span><br>        calculator.setFirstNumber(<span class="hljs-number">10</span>);<br>        calculator.setSecondNumber(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">// find result</span><br>        System.out.println(calculator.getCalculationResult());<br><br>        <span class="hljs-comment">// Store result of this calculation in case of error</span><br>        <span class="hljs-type">PreviousCalculationToCareTaker</span> <span class="hljs-variable">memento</span> <span class="hljs-operator">=</span> calculator.backupLastCalculation();<br><br>        <span class="hljs-comment">// user enters a number</span><br>        calculator.setFirstNumber(<span class="hljs-number">17</span>);<br><br>        <span class="hljs-comment">// user enters a wrong second number and calculates result</span><br>        calculator.setSecondNumber(-<span class="hljs-number">290</span>);<br><br>        <span class="hljs-comment">// calculate result</span><br>        System.out.println(calculator.getCalculationResult());<br><br>        <span class="hljs-comment">// user hits CTRL + Z to undo last operation and see last result</span><br>        calculator.restorePreviousCalculation(memento);<br><br>        <span class="hljs-comment">// result restored</span><br>        System.out.println(calculator.getCalculationResult());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">110<br>-273<br>110<br></code></pre></td></tr></table></figure><h3 id="JDK-10"><a href="#JDK-10" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.io.Serializable</li></ul><h2 id="7-观察者（Observer）"><a href="#7-观察者（Observer）" class="headerlink" title="7. 观察者（Observer）"></a>7. 观察者（Observer）</h2><h3 id="Intent-12"><a href="#Intent-12" class="headerlink" title="Intent"></a>Intent</h3><p>定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。</p><p>主题（Subject）是被观察的对象，而其所有依赖者（Observer）称为观察者。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7a3c6a30-c735-4edb-8115-337288a4f0f2.jpg" width="600"/> </div><br><h3 id="Class-Diagram-12"><a href="#Class-Diagram-12" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>主题（Subject）具有注册和移除观察者、并通知所有观察者的功能，主题是通过维护一张观察者列表来实现这些操作的。</p><p>观察者（Observer）的注册功能需要调用主题的 registerObserver() 方法。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a8c8f894-a712-447c-9906-5caef6a016e3.png"/> </div><br><h3 id="Implementation-12"><a href="#Implementation-12" class="headerlink" title="Implementation"></a>Implementation</h3><p>天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b1df9732-86ce-4d69-9f06-fba1db7b3b5a.jpg"/> </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherData</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> temperature;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> humidity;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> pressure;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WeatherData</span><span class="hljs-params">()</span> &#123;<br>        observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMeasurements</span><span class="hljs-params">(<span class="hljs-type">float</span> temperature, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        <span class="hljs-built_in">this</span>.temperature = temperature;<br>        <span class="hljs-built_in">this</span>.humidity = humidity;<br>        <span class="hljs-built_in">this</span>.pressure = pressure;<br>        notifyObserver();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer o)</span> &#123;<br>        observers.add(o);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer o)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> observers.indexOf(o);<br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span>) &#123;<br>            observers.remove(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Observer o : observers) &#123;<br>            o.update(temperature, humidity, pressure);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatisticsDisplay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StatisticsDisplay</span><span class="hljs-params">(Subject weatherData)</span> &#123;<br>        weatherData.reisterObserver(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;StatisticsDisplay.update: &quot;</span> + temp + <span class="hljs-string">&quot; &quot;</span> + humidity + <span class="hljs-string">&quot; &quot;</span> + pressure);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CurrentConditionsDisplay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Observer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CurrentConditionsDisplay</span><span class="hljs-params">(Subject weatherData)</span> &#123;<br>        weatherData.registerObserver(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">float</span> temp, <span class="hljs-type">float</span> humidity, <span class="hljs-type">float</span> pressure)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;CurrentConditionsDisplay.update: &quot;</span> + temp + <span class="hljs-string">&quot; &quot;</span> + humidity + <span class="hljs-string">&quot; &quot;</span> + pressure);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherStation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">WeatherData</span> <span class="hljs-variable">weatherData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeatherData</span>();<br>        <span class="hljs-type">CurrentConditionsDisplay</span> <span class="hljs-variable">currentConditionsDisplay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CurrentConditionsDisplay</span>(weatherData);<br>        <span class="hljs-type">StatisticsDisplay</span> <span class="hljs-variable">statisticsDisplay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StatisticsDisplay</span>(weatherData);<br><br>        weatherData.setMeasurements(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        weatherData.setMeasurements(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">CurrentConditionsDisplay.update: 0.0 0.0 0.0<br>StatisticsDisplay.update: 0.0 0.0 0.0<br>CurrentConditionsDisplay.update: 1.0 1.0 1.0<br>StatisticsDisplay.update: 1.0 1.0 1.0<br></code></pre></td></tr></table></figure><h3 id="JDK-11"><a href="#JDK-11" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html">java.util.Observer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/EventListener.html">java.util.EventListener</a></li><li><a href="http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSessionBindingListener.html">javax.servlet.http.HttpSessionBindingListener</a></li><li><a href="https://github.com/ReactiveX/RxJava">RxJava</a></li></ul><h2 id="8-状态（State）"><a href="#8-状态（State）" class="headerlink" title="8. 状态（State）"></a>8. 状态（State）</h2><h3 id="Intent-13"><a href="#Intent-13" class="headerlink" title="Intent"></a>Intent</h3><p>允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。</p><h3 id="Class-Diagram-13"><a href="#Class-Diagram-13" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/79df886f-fdc3-4020-a07f-c991bb58e0d8.png"/> </div><br><h3 id="Implementation-13"><a href="#Implementation-13" class="headerlink" title="Implementation"></a>Implementation</h3><p>糖果销售机有多种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/396be981-3f2c-4fd9-8101-dbf9c841504b.jpg" width="600"/> </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 投入 25 分钱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 退回 25 分钱</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转动曲柄</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发放糖果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HasQuarterState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>    <span class="hljs-keyword">private</span> GumballMachine gumballMachine;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HasQuarterState</span><span class="hljs-params">(GumballMachine gumballMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gumballMachine = gumballMachine;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You can&#x27;t insert another quarter&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Quarter returned&quot;</span>);<br>        gumballMachine.setState(gumballMachine.getNoQuarterState());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You turned...&quot;</span>);<br>        gumballMachine.setState(gumballMachine.getSoldState());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;No gumball dispensed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoQuarterState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>    GumballMachine gumballMachine;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NoQuarterState</span><span class="hljs-params">(GumballMachine gumballMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gumballMachine = gumballMachine;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You insert a quarter&quot;</span>);<br>        gumballMachine.setState(gumballMachine.getHasQuarterState());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You haven&#x27;t insert a quarter&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You turned, but there&#x27;s no quarter&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You need to pay first&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoldOutState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>    GumballMachine gumballMachine;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SoldOutState</span><span class="hljs-params">(GumballMachine gumballMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gumballMachine = gumballMachine;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You can&#x27;t insert a quarter, the machine is sold out&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You can&#x27;t eject, you haven&#x27;t inserted a quarter yet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;You turned, but there are no gumballs&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;No gumball dispensed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoldState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br>    GumballMachine gumballMachine;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SoldState</span><span class="hljs-params">(GumballMachine gumballMachine)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gumballMachine = gumballMachine;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Please wait, we&#x27;re already giving you a gumball&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sorry, you already turned the crank&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Turning twice doesn&#x27;t get you another gumball!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispense</span><span class="hljs-params">()</span> &#123;<br>        gumballMachine.releaseBall();<br>        <span class="hljs-keyword">if</span> (gumballMachine.getCount() &gt; <span class="hljs-number">0</span>) &#123;<br>            gumballMachine.setState(gumballMachine.getNoQuarterState());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Oops, out of gumballs&quot;</span>);<br>            gumballMachine.setState(gumballMachine.getSoldOutState());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GumballMachine</span> &#123;<br><br>    <span class="hljs-keyword">private</span> State soldOutState;<br>    <span class="hljs-keyword">private</span> State noQuarterState;<br>    <span class="hljs-keyword">private</span> State hasQuarterState;<br>    <span class="hljs-keyword">private</span> State soldState;<br><br>    <span class="hljs-keyword">private</span> State state;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GumballMachine</span><span class="hljs-params">(<span class="hljs-type">int</span> numberGumballs)</span> &#123;<br>        count = numberGumballs;<br>        soldOutState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoldOutState</span>(<span class="hljs-built_in">this</span>);<br>        noQuarterState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoQuarterState</span>(<span class="hljs-built_in">this</span>);<br>        hasQuarterState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HasQuarterState</span>(<span class="hljs-built_in">this</span>);<br>        soldState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoldState</span>(<span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-keyword">if</span> (numberGumballs &gt; <span class="hljs-number">0</span>) &#123;<br>            state = noQuarterState;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            state = soldOutState;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertQuarter</span><span class="hljs-params">()</span> &#123;<br>        state.insertQuarter();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ejectQuarter</span><span class="hljs-params">()</span> &#123;<br>        state.ejectQuarter();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnCrank</span><span class="hljs-params">()</span> &#123;<br>        state.turnCrank();<br>        state.dispense();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(State state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseBall</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A gumball comes rolling out the slot...&quot;</span>);<br>        <span class="hljs-keyword">if</span> (count != <span class="hljs-number">0</span>) &#123;<br>            count -= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getSoldOutState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> soldOutState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getNoQuarterState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> noQuarterState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getHasQuarterState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hasQuarterState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> State <span class="hljs-title function_">getSoldState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> soldState;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">GumballMachine</span> <span class="hljs-variable">gumballMachine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GumballMachine</span>(<span class="hljs-number">5</span>);<br><br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br><br>        gumballMachine.insertQuarter();<br>        gumballMachine.ejectQuarter();<br>        gumballMachine.turnCrank();<br><br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.ejectQuarter();<br><br>        gumballMachine.insertQuarter();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>        gumballMachine.insertQuarter();<br>        gumballMachine.turnCrank();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html">You insert a quarter<br>You turned...<br>A gumball comes rolling out the slot...<br>You insert a quarter<br>Quarter returned<br>You turned, but there&#x27;s no quarter<br>You need to pay first<br>You insert a quarter<br>You turned...<br>A gumball comes rolling out the slot...<br>You insert a quarter<br>You turned...<br>A gumball comes rolling out the slot...<br>You haven&#x27;t insert a quarter<br>You insert a quarter<br>You can&#x27;t insert another quarter<br>You turned...<br>A gumball comes rolling out the slot...<br>You insert a quarter<br>You turned...<br>A gumball comes rolling out the slot...<br>Oops, out of gumballs<br>You can&#x27;t insert a quarter, the machine is sold out<br>You turned, but there are no gumballs<br>No gumball dispensed<br></code></pre></td></tr></table></figure><h2 id="9-策略（Strategy）"><a href="#9-策略（Strategy）" class="headerlink" title="9. 策略（Strategy）"></a>9. 策略（Strategy）</h2><h3 id="Intent-14"><a href="#Intent-14" class="headerlink" title="Intent"></a>Intent</h3><p>定义一系列算法，封装每个算法，并使它们可以互换。</p><p>策略模式可以让算法独立于使用它的客户端。</p><h3 id="Class-Diagram-14"><a href="#Class-Diagram-14" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Strategy 接口定义了一个算法族，它们都实现了  behavior() 方法。</li><li>Context 是使用到该算法族的类，其中的 doSomething() 方法会调用 behavior()，setStrategy(Strategy) 方法可以动态地改变 strategy 对象，也就是说能动态地改变 Context 所使用的算法。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/cd1be8c2-755a-4a66-ad92-2e30f8f47922.png"/> </div><br><h3 id="与状态模式的比较"><a href="#与状态模式的比较" class="headerlink" title="与状态模式的比较"></a>与状态模式的比较</h3><p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 Context 所组合的 State 对象，而策略模式是通过 Context 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p><p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 Context 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 使用的算法。</p><h3 id="Implementation-14"><a href="#Implementation-14" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计一个鸭子，它可以动态地改变叫声。这里的算法族是鸭子的叫声行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">QuackBehavior</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Quack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QuackBehavior</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;quack!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Squeak</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QuackBehavior</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;squeak!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> &#123;<br><br>    <span class="hljs-keyword">private</span> QuackBehavior quackBehavior;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performQuack</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (quackBehavior != <span class="hljs-literal">null</span>) &#123;<br>            quackBehavior.quack();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setQuackBehavior</span><span class="hljs-params">(QuackBehavior quackBehavior)</span> &#123;<br>        <span class="hljs-built_in">this</span>.quackBehavior = quackBehavior;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Duck</span> <span class="hljs-variable">duck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Duck</span>();<br>        duck.setQuackBehavior(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Squeak</span>());<br>        duck.performQuack();<br>        duck.setQuackBehavior(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Quack</span>());<br>        duck.performQuack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">squeak!<br>quack!<br></code></pre></td></tr></table></figure><h3 id="JDK-12"><a href="#JDK-12" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.util.Comparator#compare()</li><li>javax.servlet.http.HttpServlet</li><li>javax.servlet.Filter#doFilter()</li></ul><h2 id="10-模板方法（Template-Method）"><a href="#10-模板方法（Template-Method）" class="headerlink" title="10. 模板方法（Template Method）"></a>10. 模板方法（Template Method）</h2><h3 id="Intent-15"><a href="#Intent-15" class="headerlink" title="Intent"></a>Intent</h3><p>定义算法框架，并将一些步骤的实现延迟到子类。</p><p>通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</p><h3 id="Class-Diagram-15"><a href="#Class-Diagram-15" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ac6a794b-68c0-486c-902f-8d988eee5766.png"/> </div><br><h3 id="Implementation-15"><a href="#Implementation-15" class="headerlink" title="Implementation"></a>Implementation</h3><p>冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/11236498-1417-46ce-a1b0-e10054256955.png"/> </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaffeineBeverage</span> &#123;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareRecipe</span><span class="hljs-params">()</span> &#123;<br>        boilWater();<br>        brew();<br>        pourInCup();<br>        addCondiments();<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">boilWater</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;boilWater&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">pourInCup</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;pourInCup&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Coffee</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CaffeineBeverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Coffee.brew&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Coffee.addCondiments&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tea</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CaffeineBeverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">brew</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tea.brew&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCondiments</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Tea.addCondiments&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CaffeineBeverage</span> <span class="hljs-variable">caffeineBeverage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>();<br>        caffeineBeverage.prepareRecipe();<br>        System.out.println(<span class="hljs-string">&quot;-----------&quot;</span>);<br>        caffeineBeverage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>();<br>        caffeineBeverage.prepareRecipe();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">boilWater<br>Coffee.brew<br>pourInCup<br>Coffee.addCondiments<br>-----------<br>boilWater<br>Tea.brew<br>pourInCup<br>Tea.addCondiments<br></code></pre></td></tr></table></figure><h3 id="JDK-13"><a href="#JDK-13" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.util.Collections#sort()</li><li>java.io.InputStream#skip()</li><li>java.io.InputStream#read()</li><li>java.util.AbstractList#indexOf()</li></ul><h2 id="11-访问者（Visitor）"><a href="#11-访问者（Visitor）" class="headerlink" title="11. 访问者（Visitor）"></a>11. 访问者（Visitor）</h2><h3 id="Intent-16"><a href="#Intent-16" class="headerlink" title="Intent"></a>Intent</h3><p>为一个对象结构（比如组合结构）增加新能力。</p><h3 id="Class-Diagram-16"><a href="#Class-Diagram-16" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Visitor：访问者，为每一个 ConcreteElement 声明一个 visit 操作</li><li>ConcreteVisitor：具体访问者，存储遍历过程中的累计结果</li><li>ObjectStructure：对象结构，可以是组合结构，或者是一个集合。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/79c6f036-bde6-4393-85a3-ef36a0327bd2.png"/> </div><br><h3 id="Implementation-16"><a href="#Implementation-16" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerGroup</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Customer&gt; customers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Customer customer : customers) &#123;<br>            customer.accept(visitor);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCustomer</span><span class="hljs-params">(Customer customer)</span> &#123;<br>        customers.add(customer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; orders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    Customer(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOrder</span><span class="hljs-params">(Order order)</span> &#123;<br>        orders.add(order);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">for</span> (Order order : orders) &#123;<br>            order.accept(visitor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> List&lt;Item&gt; items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>    Order(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    Order(String name, String itemName) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.addItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(itemName));<br>    &#125;<br><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(Item item)</span> &#123;<br>        items.add(item);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br><br>        <span class="hljs-keyword">for</span> (Item item : items) &#123;<br>            item.accept(visitor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    Item(String name) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visit(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Customer customer)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Order order)</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Item item)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneralReport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> customersNo;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ordersNo;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> itemsNo;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Customer customer)</span> &#123;<br>        System.out.println(customer.getName());<br>        customersNo++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Order order)</span> &#123;<br>        System.out.println(order.getName());<br>        ordersNo++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Item item)</span> &#123;<br>        System.out.println(item.getName());<br>        itemsNo++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayResults</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Number of customers: &quot;</span> + customersNo);<br>        System.out.println(<span class="hljs-string">&quot;Number of orders:    &quot;</span> + ordersNo);<br>        System.out.println(<span class="hljs-string">&quot;Number of items:     &quot;</span> + itemsNo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;customer1&quot;</span>);<br>        customer1.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(<span class="hljs-string">&quot;order1&quot;</span>, <span class="hljs-string">&quot;item1&quot;</span>));<br>        customer1.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(<span class="hljs-string">&quot;order2&quot;</span>, <span class="hljs-string">&quot;item1&quot;</span>));<br>        customer1.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(<span class="hljs-string">&quot;order3&quot;</span>, <span class="hljs-string">&quot;item1&quot;</span>));<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(<span class="hljs-string">&quot;order_a&quot;</span>);<br>        order.addItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(<span class="hljs-string">&quot;item_a1&quot;</span>));<br>        order.addItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(<span class="hljs-string">&quot;item_a2&quot;</span>));<br>        order.addItem(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span>(<span class="hljs-string">&quot;item_a3&quot;</span>));<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;customer2&quot;</span>);<br>        customer2.addOrder(order);<br><br>        <span class="hljs-type">CustomerGroup</span> <span class="hljs-variable">customers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerGroup</span>();<br>        customers.addCustomer(customer1);<br>        customers.addCustomer(customer2);<br><br>        <span class="hljs-type">GeneralReport</span> <span class="hljs-variable">visitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneralReport</span>();<br>        customers.accept(visitor);<br>        visitor.displayResults();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">customer1<br>order1<br>item1<br>order2<br>item1<br>order3<br>item1<br>customer2<br>order_a<br>item_a1<br>item_a2<br>item_a3<br>Number of customers: 2<br>Number of orders:    4<br>Number of items:     6<br></code></pre></td></tr></table></figure><h3 id="JDK-14"><a href="#JDK-14" class="headerlink" title="JDK"></a>JDK</h3><ul><li>javax.lang.model.element.Element and javax.lang.model.element.ElementVisitor</li><li>javax.lang.model.type.TypeMirror and javax.lang.model.type.TypeVisitor</li></ul><h2 id="12-空对象（Null）"><a href="#12-空对象（Null）" class="headerlink" title="12. 空对象（Null）"></a>12. 空对象（Null）</h2><h3 id="Intent-17"><a href="#Intent-17" class="headerlink" title="Intent"></a>Intent</h3><p>使用什么都不做的空对象来代替 NULL。</p><p>一个方法返回 NULL，意味着方法的调用端需要去检查返回值是否是 NULL，这么做会导致非常多的冗余的检查代码。并且如果某一个调用端忘记了做这个检查返回值，而直接使用返回的对象，那么就有可能抛出空指针异常。</p><h3 id="Class-Diagram-17"><a href="#Class-Diagram-17" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/22870bbe-898f-4c17-a31a-d7c5ee5d1c10.png"/> </div><br><h3 id="Implementation-17"><a href="#Implementation-17" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractOperation</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealOperation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOperation</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;do something&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullOperation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOperation</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do nothing</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AbstractOperation</span> <span class="hljs-variable">abstractOperation</span> <span class="hljs-operator">=</span> func(-<span class="hljs-number">1</span>);<br>        abstractOperation.request();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AbstractOperation <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> para)</span> &#123;<br>        <span class="hljs-keyword">if</span> (para &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullOperation</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealOperation</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、结构型"><a href="#四、结构型" class="headerlink" title="四、结构型"></a>四、结构型</h1><h2 id="1-适配器（Adapter）"><a href="#1-适配器（Adapter）" class="headerlink" title="1. 适配器（Adapter）"></a>1. 适配器（Adapter）</h2><h3 id="Intent-18"><a href="#Intent-18" class="headerlink" title="Intent"></a>Intent</h3><p>把一个类接口转换成另一个用户需要的接口。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/3d5b828e-5c4d-48d8-a440-281e4a8e1c92.png"/> </div><br><h3 id="Class-Diagram-18"><a href="#Class-Diagram-18" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ff5152fc-4ff3-44c4-95d6-1061002c364a.png"/> </div><br><h3 id="Implementation-18"><a href="#Implementation-18" class="headerlink" title="Implementation"></a>Implementation</h3><p>鸭子（Duck）和火鸡（Turkey）拥有不同的叫声，Duck 的叫声调用 quack() 方法，而 Turkey 调用 gobble() 方法。</p><p>要求将 Turkey 的 gobble() 方法适配成 Duck 的 quack() 方法，从而让火鸡冒充鸭子！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Duck</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Turkey</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">gobble</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WildTurkey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Turkey</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">gobble</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;gobble!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TurkeyAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Duck</span> &#123;<br>    Turkey turkey;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TurkeyAdapter</span><span class="hljs-params">(Turkey turkey)</span> &#123;<br>        <span class="hljs-built_in">this</span>.turkey = turkey;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quack</span><span class="hljs-params">()</span> &#123;<br>        turkey.gobble();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Turkey</span> <span class="hljs-variable">turkey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WildTurkey</span>();<br>        <span class="hljs-type">Duck</span> <span class="hljs-variable">duck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TurkeyAdapter</span>(turkey);<br>        duck.quack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-15"><a href="#JDK-15" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList%28T...%29">java.util.Arrays#asList()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-">java.util.Collections#list()</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-">java.util.Collections#enumeration()</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-">javax.xml.bind.annotation.adapters.XMLAdapter</a></li></ul><h2 id="2-桥接（Bridge）"><a href="#2-桥接（Bridge）" class="headerlink" title="2. 桥接（Bridge）"></a>2. 桥接（Bridge）</h2><h3 id="Intent-19"><a href="#Intent-19" class="headerlink" title="Intent"></a>Intent</h3><p>将抽象与实现分离开来，使它们可以独立变化。</p><h3 id="Class-Diagram-19"><a href="#Class-Diagram-19" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Abstraction：定义抽象类的接口</li><li>Implementor：定义实现类接口</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2a1f8b0f-1dd7-4409-b177-a381c58066ad.png"/> </div><br><h3 id="Implementation-19"><a href="#Implementation-19" class="headerlink" title="Implementation"></a>Implementation</h3><p>RemoteControl 表示遥控器，指代 Abstraction。</p><p>TV 表示电视，指代 Implementor。</p><p>桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sony</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.on()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.off()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Sony.tuneChannel()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RCA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TV</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.on()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.off()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;RCA.tuneChannel()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">protected</span> TV tv;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RemoteControl</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tv = tv;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteRemoteControl1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteRemoteControl1</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">super</span>(tv);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.on()&quot;</span>);<br>        tv.on();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.off()&quot;</span>);<br>        tv.off();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl1.tuneChannel()&quot;</span>);<br>        tv.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteRemoteControl2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RemoteControl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteRemoteControl2</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">super</span>(tv);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">on</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.on()&quot;</span>);<br>        tv.on();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">off</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.off()&quot;</span>);<br>        tv.off();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tuneChannel</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConcreteRemoteControl2.tuneChannel()&quot;</span>);<br>        tv.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RemoteControl</span> <span class="hljs-variable">remoteControl1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteRemoteControl1</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RCA</span>());<br>        remoteControl1.on();<br>        remoteControl1.off();<br>        remoteControl1.tuneChannel();<br>        <span class="hljs-type">RemoteControl</span> <span class="hljs-variable">remoteControl2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteRemoteControl2</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sony</span>());<br>         remoteControl2.on();<br>         remoteControl2.off();<br>         remoteControl2.tuneChannel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-16"><a href="#JDK-16" class="headerlink" title="JDK"></a>JDK</h3><ul><li>AWT (It provides an abstraction layer which maps onto the native OS the windowing support.)</li><li>JDBC</li></ul><h2 id="3-组合（Composite）"><a href="#3-组合（Composite）" class="headerlink" title="3. 组合（Composite）"></a>3. 组合（Composite）</h2><h3 id="Intent-20"><a href="#Intent-20" class="headerlink" title="Intent"></a>Intent</h3><p>将对象组合成树形结构来表示“整体&#x2F;部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。</p><h3 id="Class-Diagram-20"><a href="#Class-Diagram-20" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>组件（Component）类是组合类（Composite）和叶子类（Leaf）的父类，可以把组合类看成是树的中间节点。</p><p>组合对象拥有一个或者多个组件对象，因此组合对象的操作可以委托给组件对象去处理，而组件对象可以是另一个组合对象或者叶子对象。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2b8bfd57-b4d1-4a75-bfb0-bcf1fba4014a.png"/> </div><br><h3 id="Implementation-20"><a href="#Implementation-20" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">protected</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Component</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        print(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span>;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span>;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Composite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Component&gt; child;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Composite</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; i++) &#123;<br>            System.out.print(<span class="hljs-string">&quot;--&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Composite:&quot;</span> + name);<br>        <span class="hljs-keyword">for</span> (Component component : child) &#123;<br>            component.print(level + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span> &#123;<br>        child.add(component);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span> &#123;<br>        child.remove(component);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Leaf</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; level; i++) &#123;<br>            System.out.print(<span class="hljs-string">&quot;--&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;left:&quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component component)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(); <span class="hljs-comment">// 牺牲透明性换取单一职责原则，这样就不用考虑是叶子节点还是组合节点</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component component)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Composite</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>(<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>        root.add(node1);<br>        root.add(node2);<br>        root.add(node3);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node21</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;21&quot;</span>);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node22</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>(<span class="hljs-string">&quot;22&quot;</span>);<br>        node2.add(node21);<br>        node2.add(node22);<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">node221</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(<span class="hljs-string">&quot;221&quot;</span>);<br>        node22.add(node221);<br>        root.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">Composite:root<br>--left:1<br>--Composite:2<br>----left:21<br>----Composite:22<br>------left:221<br>--left:3<br></code></pre></td></tr></table></figure><h3 id="JDK-17"><a href="#JDK-17" class="headerlink" title="JDK"></a>JDK</h3><ul><li>javax.swing.JComponent#add(Component)</li><li>java.awt.Container#add(Component)</li><li>java.util.Map#putAll(Map)</li><li>java.util.List#addAll(Collection)</li><li>java.util.Set#addAll(Collection)</li></ul><h2 id="4-装饰（Decorator）"><a href="#4-装饰（Decorator）" class="headerlink" title="4. 装饰（Decorator）"></a>4. 装饰（Decorator）</h2><h3 id="Intent-21"><a href="#Intent-21" class="headerlink" title="Intent"></a>Intent</h3><p>为对象动态添加功能。</p><h3 id="Class-Diagram-21"><a href="#Class-Diagram-21" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>装饰者（Decorator）和具体组件（ConcreteComponent）都继承自组件（Component），具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/6b833bc2-517a-4270-8a5e-0a5f6df8cd96.png"/> </div><br><h3 id="Implementation-21"><a href="#Implementation-21" class="headerlink" title="Implementation"></a>Implementation</h3><p>设计不同种类的饮料，饮料可以添加配料，比如可以添加牛奶，并且支持动态添加新配料。每增加一种配料，该饮料的价格就会增加，要求计算一种饮料的价格。</p><p>下图表示在 DarkRoast 饮料上新增新添加 Mocha 配料，之后又添加了 Whip 配料。DarkRoast 被 Mocha 包裹，Mocha 又被 Whip 包裹。它们都继承自相同父类，都有 cost() 方法，外层类的 cost() 方法调用了内层类的 cost() 方法。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c9cfd600-bc91-4f3a-9f99-b42f88a5bb24.jpg" width="600"/> </div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkRoast</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseBlend</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CondimentDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Beverage</span> &#123;<br>    <span class="hljs-keyword">protected</span> Beverage beverage;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Milk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CondimentDecorator</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Milk</span><span class="hljs-params">(Beverage beverage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.beverage = beverage;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + beverage.cost();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mocha</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CondimentDecorator</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mocha</span><span class="hljs-params">(Beverage beverage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.beverage = beverage;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">cost</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + beverage.cost();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Beverage</span> <span class="hljs-variable">beverage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HouseBlend</span>();<br>        beverage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mocha</span>(beverage);<br>        beverage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Milk</span>(beverage);<br>        System.out.println(beverage.cost());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">3.0<br></code></pre></td></tr></table></figure><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>类应该对扩展开放，对修改关闭：也就是添加新功能时不需要修改代码。饮料可以动态添加新的配料，而不需要去修改饮料的代码。</p><p>不可能把所有的类设计成都满足这一原则，应当把该原则应用于最有可能发生改变的地方。</p><h3 id="JDK-18"><a href="#JDK-18" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.io.BufferedInputStream(InputStream)</li><li>java.io.DataInputStream(InputStream)</li><li>java.io.BufferedOutputStream(OutputStream)</li><li>java.util.zip.ZipOutputStream(OutputStream)</li><li>java.util.Collections#checked<a href="">List|Map|Set|SortedSet|SortedMap</a></li></ul><h2 id="5-外观（Facade）"><a href="#5-外观（Facade）" class="headerlink" title="5. 外观（Facade）"></a>5. 外观（Facade）</h2><h3 id="Intent-22"><a href="#Intent-22" class="headerlink" title="Intent"></a>Intent</h3><p>提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。</p><h3 id="Class-Diagram-22"><a href="#Class-Diagram-22" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f9978fa6-9f49-4a0f-8540-02d269ac448f.png"/> </div><br><h3 id="Implementation-22"><a href="#Implementation-22" class="headerlink" title="Implementation"></a>Implementation</h3><p>观看电影需要操作很多电器，使用外观模式实现一键看电影功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubSystem</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOnTV</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;turnOnTV()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCD</span><span class="hljs-params">(String cd)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setCD( &quot;</span> + cd + <span class="hljs-string">&quot; )&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startWatching</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;startWatching()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Facade</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SubSystem</span> <span class="hljs-variable">subSystem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSystem</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watchMovie</span><span class="hljs-params">()</span> &#123;<br>        subSystem.turnOnTV();<br>        subSystem.setCD(<span class="hljs-string">&quot;a movie&quot;</span>);<br>        subSystem.startWatching();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Facade</span> <span class="hljs-variable">facade</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Facade</span>();<br>        facade.watchMovie();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="设计原则-1"><a href="#设计原则-1" class="headerlink" title="设计原则"></a>设计原则</h3><p>最少知识原则：只和你的密友谈话。也就是说客户对象所需要交互的对象应当尽可能少。</p><h2 id="6-享元（Flyweight）"><a href="#6-享元（Flyweight）" class="headerlink" title="6. 享元（Flyweight）"></a>6. 享元（Flyweight）</h2><h3 id="Intent-23"><a href="#Intent-23" class="headerlink" title="Intent"></a>Intent</h3><p>利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。</p><h3 id="Class-Diagram-23"><a href="#Class-Diagram-23" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><ul><li>Flyweight：享元对象</li><li>IntrinsicState：内部状态，享元对象共享内部状态</li><li>ExtrinsicState：外部状态，每个享元对象的外部状态不同</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5f5c22d5-9c0e-49e1-b5b0-6cc7032724d4.png"/> </div><br><h3 id="Implementation-23"><a href="#Implementation-23" class="headerlink" title="Implementation"></a>Implementation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyweight</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(String extrinsicState)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteFlyweight</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Flyweight</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String intrinsicState;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteFlyweight</span><span class="hljs-params">(String intrinsicState)</span> &#123;<br>        <span class="hljs-built_in">this</span>.intrinsicState = intrinsicState;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(String extrinsicState)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Object address: &quot;</span> + System.identityHashCode(<span class="hljs-built_in">this</span>));<br>        System.out.println(<span class="hljs-string">&quot;IntrinsicState: &quot;</span> + intrinsicState);<br>        System.out.println(<span class="hljs-string">&quot;ExtrinsicState: &quot;</span> + extrinsicState);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlyweightFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> HashMap&lt;String, Flyweight&gt; flyweights = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    Flyweight <span class="hljs-title function_">getFlyweight</span><span class="hljs-params">(String intrinsicState)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!flyweights.containsKey(intrinsicState)) &#123;<br>            <span class="hljs-type">Flyweight</span> <span class="hljs-variable">flyweight</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteFlyweight</span>(intrinsicState);<br>            flyweights.put(intrinsicState, flyweight);<br>        &#125;<br>        <span class="hljs-keyword">return</span> flyweights.get(intrinsicState);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FlyweightFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlyweightFactory</span>();<br>        <span class="hljs-type">Flyweight</span> <span class="hljs-variable">flyweight1</span> <span class="hljs-operator">=</span> factory.getFlyweight(<span class="hljs-string">&quot;aa&quot;</span>);<br>        <span class="hljs-type">Flyweight</span> <span class="hljs-variable">flyweight2</span> <span class="hljs-operator">=</span> factory.getFlyweight(<span class="hljs-string">&quot;aa&quot;</span>);<br>        flyweight1.doOperation(<span class="hljs-string">&quot;x&quot;</span>);<br>        flyweight2.doOperation(<span class="hljs-string">&quot;y&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">Object address: 1163157884<br>IntrinsicState: aa<br>ExtrinsicState: x<br>Object address: 1163157884<br>IntrinsicState: aa<br>ExtrinsicState: y<br></code></pre></td></tr></table></figure><h3 id="JDK-19"><a href="#JDK-19" class="headerlink" title="JDK"></a>JDK</h3><p>Java 利用缓存来加速大量小对象的访问时间。</p><ul><li>java.lang.Integer#valueOf(int)</li><li>java.lang.Boolean#valueOf(boolean)</li><li>java.lang.Byte#valueOf(byte)</li><li>java.lang.Character#valueOf(char)</li></ul><h2 id="7-代理（Proxy）"><a href="#7-代理（Proxy）" class="headerlink" title="7. 代理（Proxy）"></a>7. 代理（Proxy）</h2><h3 id="Intent-24"><a href="#Intent-24" class="headerlink" title="Intent"></a>Intent</h3><p>控制对其它对象的访问。</p><h3 id="Class-Diagram-24"><a href="#Class-Diagram-24" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><p>代理有以下四类：</p><ul><li>远程代理（Remote Proxy）：控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。</li><li>虚拟代理（Virtual Proxy）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。</li><li>保护代理（Protection Proxy）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。</li><li>智能代理（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数；当第一次引用一个对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9b679ff5-94c6-48a7-b9b7-2ea868e828ed.png"/> </div><br><h3 id="Implementation-24"><a href="#Implementation-24" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个虚拟代理的实现，模拟了图片延迟加载的情况下使用与图片大小相等的临时内容去替换原始图片，直到图片加载完成才将图片显示出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Image</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showImage</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HighResolutionImage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br><br>    <span class="hljs-keyword">private</span> URL imageURL;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> startTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> width;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWidth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HighResolutionImage</span><span class="hljs-params">(URL imageURL)</span> &#123;<br>        <span class="hljs-built_in">this</span>.imageURL = imageURL;<br>        <span class="hljs-built_in">this</span>.startTime = System.currentTimeMillis();<br>        <span class="hljs-built_in">this</span>.width = <span class="hljs-number">600</span>;<br>        <span class="hljs-built_in">this</span>.height = <span class="hljs-number">600</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLoad</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 模拟图片加载，延迟 3s 加载完成</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">return</span> endTime - startTime &gt; <span class="hljs-number">3000</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showImage</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Real Image: &quot;</span> + imageURL);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Image</span> &#123;<br><br>    <span class="hljs-keyword">private</span> HighResolutionImage highResolutionImage;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ImageProxy</span><span class="hljs-params">(HighResolutionImage highResolutionImage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.highResolutionImage = highResolutionImage;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showImage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!highResolutionImage.isLoad()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Temp Image: &quot;</span> + highResolutionImage.getWidth() + <span class="hljs-string">&quot; &quot;</span> + highResolutionImage.getHeight());<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        highResolutionImage.showImage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageViewer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://image.jpg&quot;</span>;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(image);<br>        <span class="hljs-type">HighResolutionImage</span> <span class="hljs-variable">highResolutionImage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighResolutionImage</span>(url);<br>        <span class="hljs-type">ImageProxy</span> <span class="hljs-variable">imageProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageProxy</span>(highResolutionImage);<br>        imageProxy.showImage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDK-20"><a href="#JDK-20" class="headerlink" title="JDK"></a>JDK</h3><ul><li>java.lang.reflect.Proxy</li><li>RMI</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>弗里曼. Head First 设计模式 [M]. 中国电力出版社, 2007.</li><li>Gamma E. 设计模式: 可复用面向对象软件的基础 [M]. 机械工业出版社, 2007.</li><li>Bloch J. Effective java[M]. Addison-Wesley Professional, 2017.</li><li><a href="http://www.oodesign.com/">Design Patterns</a></li><li><a href="http://java-design-patterns.com/">Design patterns implemented in Java</a></li><li><a href="http://www.programering.com/a/MTNxAzMwATY.html">The breakdown of design patterns in JDK</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-生成器</title>
    <link href="/2021/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2021/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="5-生成器（Builder）"><a href="#5-生成器（Builder）" class="headerlink" title="5. 生成器（Builder）"></a>5. 生成器（Builder）</h2><h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>封装一个对象的构造过程，并允许按步骤构造。</p><h3 id="Class-Diagram"><a href="#Class-Diagram" class="headerlink" title="Class Diagram"></a>Class Diagram</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/db5e376d-0b3e-490e-a43a-3231914b6668.png"/> </div><br><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>以下是一个简易的 StringBuilder 实现，参考了 JDK 1.8 源码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractStringBuilder</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">char</span>[] value;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractStringBuilder</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        count = <span class="hljs-number">0</span>;<br>        value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[capacity];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> AbstractStringBuilder <span class="hljs-title function_">append</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        ensureCapacityInternal(count + <span class="hljs-number">1</span>);<br>        value[count++] = c;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureCapacityInternal</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;<br>        <span class="hljs-comment">// overflow-conscious code</span><br>        <span class="hljs-keyword">if</span> (minimumCapacity - value.length &gt; <span class="hljs-number">0</span>)<br>            expandCapacity(minimumCapacity);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">expandCapacity</span><span class="hljs-params">(<span class="hljs-type">int</span> minimumCapacity)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> value.length * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (newCapacity - minimumCapacity &lt; <span class="hljs-number">0</span>)<br>            newCapacity = minimumCapacity;<br>        <span class="hljs-keyword">if</span> (newCapacity &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (minimumCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutOfMemoryError</span>();<br>            newCapacity = Integer.MAX_VALUE;<br>        &#125;<br>        value = Arrays.copyOf(value, newCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractStringBuilder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StringBuilder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">16</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Create a copy, don&#x27;t share the array</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(value, <span class="hljs-number">0</span>, count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">26</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>            sb.append((<span class="hljs-type">char</span>) (<span class="hljs-string">&#x27;a&#x27;</span> + i));<br>        &#125;<br>        System.out.println(sb.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">abcdefghijklmnopqrstuvwxyz<br></code></pre></td></tr></table></figure><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ul><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html">java.lang.StringBuilder</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#put-byte-">java.nio.ByteBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-">java.lang.StringBuffer</a></li><li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Appendable.html">java.lang.Appendable</a></li><li><a href="https://github.com/apache/camel/tree/0e195428ee04531be27a0b659005e3aa8d159d23/camel-core/src/main/java/org/apache/camel/builder">Apache Camel builders</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2021/09/21/HTTP/"/>
    <url>/2021/09/21/HTTP/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="一-、基础概念"><a href="#一-、基础概念" class="headerlink" title="一 、基础概念"></a>一 、基础概念</h2><h3 id="请求和响应报文"><a href="#请求和响应报文" class="headerlink" title="请求和响应报文"></a>请求和响应报文</h3><p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。</p><p>请求报文结构：</p><ul><li>第一行是包含了请求方法、URL、协议版本；</li><li>接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。</li><li>一个空行用来分隔首部和内容主体 Body</li><li>最后是请求的内容主体</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">http://www.example.com/</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>www.example.com<br><span class="hljs-attribute">If-Modified-Since</span><span class="hljs-punctuation">: </span>Thu, 17 Oct 2019 07:18:26 GMT<br><span class="hljs-attribute">If-None-Match</span><span class="hljs-punctuation">: </span>&quot;3147526947+gzip&quot;<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 xxx<br><br><span class="language-apache"><span class="hljs-attribute">param1</span>=<span class="hljs-number">1</span>&amp;param2=<span class="hljs-number">2</span></span><br></code></pre></td></tr></table></figure><p>响应报文结构：</p><ul><li>第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了</li><li>接下来多行也是首部内容</li><li>一个空行分隔首部和内容主体</li><li>最后是响应的内容主体</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Age</span><span class="hljs-punctuation">: </span>529651<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=604800<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Content-Encoding</span><span class="hljs-punctuation">: </span>gzip<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>648<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html; charset=UTF-8<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Mon, 02 Nov 2020 17:53:39 GMT<br><span class="hljs-attribute">Etag</span><span class="hljs-punctuation">: </span>&quot;3147526947+ident+gzip&quot;<br><span class="hljs-attribute">Expires</span><span class="hljs-punctuation">: </span>Mon, 09 Nov 2020 17:53:39 GMT<br><span class="hljs-attribute">Keep-Alive</span><span class="hljs-punctuation">: </span>timeout=4<br><span class="hljs-attribute">Last-Modified</span><span class="hljs-punctuation">: </span>Thu, 17 Oct 2019 07:18:26 GMT<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Server</span><span class="hljs-punctuation">: </span>ECS (sjc/16DF)<br><span class="hljs-attribute">Vary</span><span class="hljs-punctuation">: </span>Accept-Encoding<br><span class="hljs-attribute">X-Cache</span><span class="hljs-punctuation">: </span>HIT<br><br><span class="language-xml"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Example Domain<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">// 省略...</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>HTTP 使用 URL（ <strong>U</strong> niform <strong>R</strong>esource <strong>L</strong>ocator，统一资源定位符）来定位资源，它是 URI（<strong>U</strong>niform <strong>R</strong>esource <strong>I</strong>dentifier，统一资源标识符）的子集，URL 在 URI 的基础上增加了定位能力。URI 除了包含 URL，还包含 URN（Uniform Resource Name，统一资源名称），它只是用来定义一个资源的名称，并不具备定位该资源的能力。例如 urn:isbn:0451450523 用来定义一个书籍名称，但是却没有表示怎么找到这本书。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8441b2c4-dca7-4d6b-8efb-f22efccaf331.png" width="500px"> </div><br><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6">wikipedia：统一资源标志符</a></li><li><a href="https://en.wikipedia.org/wiki/URL">wikipedia: URL</a></li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2">rfc2616：3.2.2 http URL</a></li><li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn">What is the difference between a URI, a URL and a URN?</a></li></ul><h2 id="二、HTTP-方法"><a href="#二、HTTP-方法" class="headerlink" title="二、HTTP 方法"></a>二、HTTP 方法</h2><p>客户端发送的 <strong>请求报文</strong> 第一行为请求行，包含了方法字段。</p><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><blockquote><p>获取资源</p></blockquote><p>当前网络请求中，绝大部分使用的是 GET 方法。</p><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><blockquote><p>获取报文首部</p></blockquote><p>和 GET 方法类似，但是不返回报文实体主体部分。</p><p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><blockquote><p>传输实体主体</p></blockquote><p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p><p>更多 POST 与 GET 的比较请见第九章。</p><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><blockquote><p>上传文件</p></blockquote><p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">PUT /new.html HTTP/1.1 Host: example.com Content-type: text/html Content-length:<br>16<br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>New File<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><blockquote><p>对资源进行部分修改</p></blockquote><p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">PATCH /file.txt HTTP/1.1 Host: www.example.com Content-Type: application/example<br>If-Match: &quot;e0023aa4e&quot; Content-Length: 100 [description of changes]<br></code></pre></td></tr></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><blockquote><p>删除文件</p></blockquote><p>与 PUT 功能相反，并且同样不带验证机制。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">DELETE /file.html HTTP/1.1<br></code></pre></td></tr></table></figure><h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><blockquote><p>查询支持的方法</p></blockquote><p>查询指定的 URL 能够支持的方法。</p><p>会返回 <code>Allow: GET, POST, HEAD, OPTIONS</code> 这样的内容。</p><h3 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h3><blockquote><p>要求在与代理服务器通信时建立隧道</p></blockquote><p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">CONNECT www.example.com:443 HTTP/1.1<br></code></pre></td></tr></table></figure><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/dc00f70e-c5c8-4d20-baf1-2d70014a97e3.jpg" width=""/> </div><br><h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><blockquote><p>追踪路径</p></blockquote><p>服务器会将通信路径返回给客户端。</p><p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p><p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p><ul><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">rfc2616：9 Method Definitions</a></li></ul><h2 id="三、HTTP-状态码"><a href="#三、HTTP-状态码" class="headerlink" title="三、HTTP 状态码"></a>三、HTTP 状态码</h2><p>服务器返回的 <strong>响应报文</strong> 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p><table><thead><tr><th align="center">状态码</th><th align="center">类别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">1XX</td><td align="center">Informational（信息性状态码）</td><td align="center">接收的请求正在处理</td></tr><tr><td align="center">2XX</td><td align="center">Success（成功状态码）</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">3XX</td><td align="center">Redirection（重定向状态码）</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td align="center">4XX</td><td align="center">Client Error（客户端错误状态码）</td><td align="center">服务器无法处理请求</td></tr><tr><td align="center">5XX</td><td align="center">Server Error（服务器错误状态码）</td><td align="center">服务器处理请求出错</td></tr></tbody></table><h3 id="1XX-信息"><a href="#1XX-信息" class="headerlink" title="1XX 信息"></a>1XX 信息</h3><ul><li><strong>100 Continue</strong> ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li></ul><h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><ul><li><p><strong>200 OK</strong></p></li><li><p><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p></li><li><p><strong>206 Partial Content</strong> ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</p></li></ul><h3 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h3><ul><li><p><strong>301 Moved Permanently</strong> ：永久性重定向</p></li><li><p><strong>302 Found</strong> ：临时性重定向</p></li><li><p><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p></li><li><p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p></li><li><p><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</p></li><li><p><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p></li></ul><h3 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h3><ul><li><p><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</p></li><li><p><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p></li><li><p><strong>403 Forbidden</strong> ：请求被拒绝。</p></li><li><p><strong>404 Not Found</strong></p></li></ul><h3 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h3><ul><li><p><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误。</p></li><li><p><strong>503 Service Unavailable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p></li></ul><h2 id="四、HTTP-首部"><a href="#四、HTTP-首部" class="headerlink" title="四、HTTP 首部"></a>四、HTTP 首部</h2><p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p><p>各种首部字段及其含义如下（不需要全记，仅供查阅）：</p><h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Cache-Control</td><td align="center">控制缓存的行为</td></tr><tr><td align="center">Connection</td><td align="center">控制不再转发给代理的首部字段、管理持久连接</td></tr><tr><td align="center">Date</td><td align="center">创建报文的日期时间</td></tr><tr><td align="center">Pragma</td><td align="center">报文指令</td></tr><tr><td align="center">Trailer</td><td align="center">报文末端的首部一览</td></tr><tr><td align="center">Transfer-Encoding</td><td align="center">指定报文主体的传输编码方式</td></tr><tr><td align="center">Upgrade</td><td align="center">升级为其他协议</td></tr><tr><td align="center">Via</td><td align="center">代理服务器的相关信息</td></tr><tr><td align="center">Warning</td><td align="center">错误通知</td></tr></tbody></table><h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Accept</td><td align="center">用户代理可处理的媒体类型</td></tr><tr><td align="center">Accept-Charset</td><td align="center">优先的字符集</td></tr><tr><td align="center">Accept-Encoding</td><td align="center">优先的内容编码</td></tr><tr><td align="center">Accept-Language</td><td align="center">优先的语言（自然语言）</td></tr><tr><td align="center">Authorization</td><td align="center">Web 认证信息</td></tr><tr><td align="center">Expect</td><td align="center">期待服务器的特定行为</td></tr><tr><td align="center">From</td><td align="center">用户的电子邮箱地址</td></tr><tr><td align="center">Host</td><td align="center">请求资源所在服务器</td></tr><tr><td align="center">If-Match</td><td align="center">比较实体标记（ETag）</td></tr><tr><td align="center">If-Modified-Since</td><td align="center">比较资源的更新时间</td></tr><tr><td align="center">If-None-Match</td><td align="center">比较实体标记（与 If-Match 相反）</td></tr><tr><td align="center">If-Range</td><td align="center">资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td align="center">If-Unmodified-Since</td><td align="center">比较资源的更新时间（与 If-Modified-Since 相反）</td></tr><tr><td align="center">Max-Forwards</td><td align="center">最大传输逐跳数</td></tr><tr><td align="center">Proxy-Authorization</td><td align="center">代理服务器要求客户端的认证信息</td></tr><tr><td align="center">Range</td><td align="center">实体的字节范围请求</td></tr><tr><td align="center">Referer</td><td align="center">对请求中 URI 的原始获取方</td></tr><tr><td align="center">TE</td><td align="center">传输编码的优先级</td></tr><tr><td align="center">User-Agent</td><td align="center">HTTP 客户端程序的信息</td></tr></tbody></table><h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Accept-Ranges</td><td align="center">是否接受字节范围请求</td></tr><tr><td align="center">Age</td><td align="center">推算资源创建经过时间</td></tr><tr><td align="center">ETag</td><td align="center">资源的匹配信息</td></tr><tr><td align="center">Location</td><td align="center">令客户端重定向至指定 URI</td></tr><tr><td align="center">Proxy-Authenticate</td><td align="center">代理服务器对客户端的认证信息</td></tr><tr><td align="center">Retry-After</td><td align="center">对再次发起请求的时机要求</td></tr><tr><td align="center">Server</td><td align="center">HTTP 服务器的安装信息</td></tr><tr><td align="center">Vary</td><td align="center">代理服务器缓存的管理信息</td></tr><tr><td align="center">WWW-Authenticate</td><td align="center">服务器对客户端的认证信息</td></tr></tbody></table><h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Allow</td><td align="center">资源可支持的 HTTP 方法</td></tr><tr><td align="center">Content-Encoding</td><td align="center">实体主体适用的编码方式</td></tr><tr><td align="center">Content-Language</td><td align="center">实体主体的自然语言</td></tr><tr><td align="center">Content-Length</td><td align="center">实体主体的大小</td></tr><tr><td align="center">Content-Location</td><td align="center">替代对应资源的 URI</td></tr><tr><td align="center">Content-MD5</td><td align="center">实体主体的报文摘要</td></tr><tr><td align="center">Content-Range</td><td align="center">实体主体的位置范围</td></tr><tr><td align="center">Content-Type</td><td align="center">实体主体的媒体类型</td></tr><tr><td align="center">Expires</td><td align="center">实体主体过期的日期时间</td></tr><tr><td align="center">Last-Modified</td><td align="center">资源的最后修改日期时间</td></tr></tbody></table><h2 id="五、具体应用"><a href="#五、具体应用" class="headerlink" title="五、具体应用"></a>五、具体应用</h2><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/HTTP1_x_Connections.png" width="800"/> </div><br><h4 id="1-短连接与长连接"><a href="#1-短连接与长连接" class="headerlink" title="1. 短连接与长连接"></a>1. 短连接与长连接</h4><p>当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问的 HTML 页面资源，还会请求图片资源。如果每进行一次 HTTP 通信就要新建一个 TCP 连接，那么开销会很大。</p><p>长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。</p><ul><li>从 HTTP&#x2F;1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 <code>Connection : close</code>；</li><li>在 HTTP&#x2F;1.1 之前默认是短连接的，如果需要使用长连接，则使用 <code>Connection : Keep-Alive</code>。</li></ul><h4 id="2-流水线"><a href="#2-流水线" class="headerlink" title="2. 流水线"></a>2. 流水线</h4><p>默认情况下，HTTP 请求是按顺序发出的，下一个请求只有在当前请求收到响应之后才会被发出。由于受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。</p><p>流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP&#x2F;1.1 引入 Cookie 来保存状态信息。</p><p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。</p><p>Cookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或 IndexedDB。</p><h4 id="1-用途"><a href="#1-用途" class="headerlink" title="1. 用途"></a>1. 用途</h4><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h4 id="2-创建过程"><a href="#2-创建过程" class="headerlink" title="2. 创建过程"></a>2. 创建过程</h4><p>服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">HTTP/1.0 200 OK Content-type: text/html Set-Cookie: yummy_cookie=choco<br>Set-Cookie: tasty_cookie=strawberry [page content]<br></code></pre></td></tr></table></figure><p>客户端之后对同一个服务器发送请求时，会从浏览器中取出 Cookie 信息并通过 Cookie 请求首部字段发送给服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /sample_page.html HTTP/1.1 Host: www.example.org Cookie: yummy_cookie=choco;<br>tasty_cookie=strawberry<br></code></pre></td></tr></table></figure><h4 id="3-分类"><a href="#3-分类" class="headerlink" title="3. 分类"></a>3. 分类</h4><ul><li>会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li><li>持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;<br></code></pre></td></tr></table></figure><h4 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4. 作用域"></a>4. 作用域</h4><p>Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。例如，如果设置 Domain&#x3D;mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。</p><p>Path 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 %x2F (“&#x2F;“) 作为路径分隔符，子路径也会被匹配。例如，设置 Path&#x3D;&#x2F;docs，则以下地址都会匹配：</p><ul><li>&#x2F;docs</li><li>&#x2F;docs&#x2F;Web&#x2F;</li><li>&#x2F;docs&#x2F;Web&#x2F;HTTP</li></ul><h4 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5. JavaScript"></a>5. JavaScript</h4><p>浏览器通过 <code>document.cookie</code> 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">document.cookie = &quot;yummy_cookie=choco&quot;; document.cookie =<br>&quot;tasty_cookie=strawberry&quot;; console.log(document.cookie);<br></code></pre></td></tr></table></figure><h4 id="6-HttpOnly"><a href="#6-HttpOnly" class="headerlink" title="6. HttpOnly"></a>6. HttpOnly</h4><p>标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用。跨站脚本攻击 (XSS) 常常使用 JavaScript 的 <code>document.cookie</code> API 窃取用户的 Cookie 信息，因此使用 HttpOnly 标记可以在一定程度上避免 XSS 攻击。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly<br></code></pre></td></tr></table></figure><h4 id="7-Secure"><a href="#7-Secure" class="headerlink" title="7. Secure"></a>7. Secure</h4><p>标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障。</p><h4 id="8-Session"><a href="#8-Session" class="headerlink" title="8. Session"></a>8. Session</h4><p>除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全。</p><p>Session 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在 Redis 这种内存型数据库中，效率会更高。</p><p>使用 Session 维护用户登录状态的过程如下：</p><ul><li>用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中；</li><li>服务器验证该用户名和密码，如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 Key 称为 Session ID；</li><li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中；</li><li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Redis 中取出用户信息，继续之前的业务操作。</li></ul><p>应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式。</p><h4 id="9-浏览器禁用-Cookie"><a href="#9-浏览器禁用-Cookie" class="headerlink" title="9. 浏览器禁用 Cookie"></a>9. 浏览器禁用 Cookie</h4><p>此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是使用 URL 重写技术，将 Session ID 作为 URL 的参数进行传递。</p><h4 id="10-Cookie-与-Session-选择"><a href="#10-Cookie-与-Session-选择" class="headerlink" title="10. Cookie 与 Session 选择"></a>10. Cookie 与 Session 选择</h4><ul><li>Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在考虑数据复杂性时首选 Session；</li><li>Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密；</li><li>对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此不建议将所有的用户信息都存储到 Session 中。</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><ul><li>缓解服务器压力；</li><li>降低客户端获取资源的延迟：缓存通常位于内存中，读取缓存的速度更快。并且缓存服务器在地理位置上也有可能比源服务器来得近，例如浏览器缓存。</li></ul><h4 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h4><ul><li>让代理服务器进行缓存；</li><li>让客户端浏览器进行缓存。</li></ul><h4 id="3-Cache-Control"><a href="#3-Cache-Control" class="headerlink" title="3. Cache-Control"></a>3. Cache-Control</h4><p>HTTP&#x2F;1.1 通过 Cache-Control 首部字段来控制缓存。</p><p><strong>3.1 禁止进行缓存</strong></p><p>no-store 指令规定不能对请求或响应的任何一部分进行缓存。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: no-store<br></code></pre></td></tr></table></figure><p><strong>3.2 强制确认缓存</strong></p><p>no-cache 指令规定缓存服务器需要先向源服务器验证缓存资源的有效性，只有当缓存资源有效时才能使用该缓存对客户端的请求进行响应。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: no-cache<br></code></pre></td></tr></table></figure><p><strong>3.3 私有缓存和公共缓存</strong></p><p>private 指令规定了将资源作为私有缓存，只能被单独用户使用，一般存储在用户浏览器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: private<br></code></pre></td></tr></table></figure><p>public 指令规定了将资源作为公共缓存，可以被多个用户使用，一般存储在代理服务器中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: public<br></code></pre></td></tr></table></figure><p><strong>3.4 缓存过期机制</strong></p><p>max-age 指令出现在请求报文，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</p><p>max-age 指令出现在响应报文，表示缓存资源在缓存服务器中保存的时间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Cache-Control: max-age=31536000<br></code></pre></td></tr></table></figure><p>Expires 首部字段也可以用于告知缓存服务器该资源什么时候会过期。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Expires: Wed, 04 Jul 2012 08:26:05 GMT<br></code></pre></td></tr></table></figure><ul><li>在 HTTP&#x2F;1.1 中，会优先处理 max-age 指令；</li><li>在 HTTP&#x2F;1.0 中，max-age 指令会被忽略掉。</li></ul><h4 id="4-缓存验证"><a href="#4-缓存验证" class="headerlink" title="4. 缓存验证"></a>4. 缓存验证</h4><p>需要先了解 ETag 首部字段的含义，它是资源的唯一标识。URL 不能唯一表示资源，例如 <code>http://www.google.com/</code> 有中文和英文两个资源，只有 ETag 才能对这两个资源进行唯一标识。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">ETag: &quot;82e22293907ce725faf67773957acd12&quot;<br></code></pre></td></tr></table></figure><p>可以将缓存资源的 ETag 值放入 If-None-Match 首部，服务器收到该请求后，判断缓存资源的 ETag 值和资源的最新 ETag 值是否一致，如果一致则表示缓存资源有效，返回 304 Not Modified。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">If-None-Match: &quot;82e22293907ce725faf67773957acd12&quot;<br></code></pre></td></tr></table></figure><p>Last-Modified 首部字段也可以用于缓存验证，它包含在源服务器发送的响应报文中，指示源服务器对资源的最后修改时间。但是它是一种弱校验器，因为只能精确到一秒，所以它通常作为 ETag 的备用方案。如果响应首部字段里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 OK。如果请求的资源从那时起未经修改，那么返回一个不带有实体主体的 304 Not Modified 响应报文。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT<br></code></pre></td></tr></table></figure><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><p>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</p><h4 id="1-类型"><a href="#1-类型" class="headerlink" title="1. 类型"></a>1. 类型</h4><p><strong>1.1 服务端驱动型</strong></p><p>客户端设置特定的 HTTP 首部字段，例如 Accept、Accept-Charset、Accept-Encoding、Accept-Language，服务器根据这些字段返回特定的资源。</p><p>它存在以下问题：</p><ul><li>服务器很难知道客户端浏览器的全部信息；</li><li>客户端提供的信息相当冗长（HTTP&#x2F;2 协议的首部压缩机制缓解了这个问题），并且存在隐私风险（HTTP 指纹识别技术）；</li><li>给定的资源需要返回不同的展现形式，共享缓存的效率会降低，而服务器端的实现会越来越复杂。</li></ul><p><strong>1.2 代理驱动型</strong></p><p>服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源。</p><h4 id="2-Vary"><a href="#2-Vary" class="headerlink" title="2. Vary"></a>2. Vary</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Vary: Accept-Language<br></code></pre></td></tr></table></figure><p>在使用内容协商的情况下，只有当缓存服务器中的缓存满足内容协商条件时，才能使用该缓存，否则应该向源服务器请求该资源。</p><p>例如，一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 <code>Vary: Accept-Language</code> 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存。</p><h3 id="内容编码"><a href="#内容编码" class="headerlink" title="内容编码"></a>内容编码</h3><p>内容编码将实体主体进行压缩，从而减少传输的数据量。</p><p>常用的内容编码有：gzip、compress、deflate、identity。</p><p>浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法。由于该内容协商过程是基于编码类型来选择资源的展现形式的，响应报文的 Vary 首部字段至少要包含 Content-Encoding。</p><h3 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h3><p>如果网络出现中断，服务器只发送了一部分数据，范围请求可以使得客户端只请求服务器未发送的那部分数据，从而避免服务器重新发送所有数据。</p><h4 id="1-Range"><a href="#1-Range" class="headerlink" title="1. Range"></a>1. Range</h4><p>在请求报文中添加 Range 首部字段指定请求的范围。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /z4d4kWk.jpg HTTP/1.1 Host: i.imgur.com Range: bytes=0-1023<br></code></pre></td></tr></table></figure><p>请求成功的话服务器返回的响应包含 206 Partial Content 状态码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">HTTP/1.1 206 Partial Content Content-Range: bytes 0-1023/146515 Content-Length:<br>1024 ... (binary content)<br></code></pre></td></tr></table></figure><h4 id="2-Accept-Ranges"><a href="#2-Accept-Ranges" class="headerlink" title="2. Accept-Ranges"></a>2. Accept-Ranges</h4><p>响应首部字段 Accept-Ranges 用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Accept-Ranges: bytes<br></code></pre></td></tr></table></figure><h4 id="3-响应状态码"><a href="#3-响应状态码" class="headerlink" title="3. 响应状态码"></a>3. 响应状态码</h4><ul><li>在请求成功的情况下，服务器会返回 206 Partial Content 状态码。</li><li>在请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码。</li><li>在不支持范围请求的情况下，服务器会返回 200 OK 状态码。</li></ul><h3 id="分块传输编码"><a href="#分块传输编码" class="headerlink" title="分块传输编码"></a>分块传输编码</h3><p>Chunked Transfer Encoding，可以把数据分割成多块，让浏览器逐步显示页面。</p><h3 id="多部分对象集合"><a href="#多部分对象集合" class="headerlink" title="多部分对象集合"></a>多部分对象集合</h3><p>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</p><p>例如，上传多个表单时可以使用如下方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">Content-Type: multipart/form-data; boundary=AaB03x --AaB03x Content-Disposition:<br>form-data; name=&quot;submit-name&quot; Larry --AaB03x Content-Disposition: form-data;<br>name=&quot;files&quot;; filename=&quot;file1.txt&quot; Content-Type: text/plain ... contents of<br>file1.txt ... --AaB03x--<br></code></pre></td></tr></table></figure><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>HTTP&#x2F;1.1 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</p><h3 id="通信数据转发"><a href="#通信数据转发" class="headerlink" title="通信数据转发"></a>通信数据转发</h3><h4 id="1-代理"><a href="#1-代理" class="headerlink" title="1. 代理"></a>1. 代理</h4><p>代理服务器接受客户端的请求，并且转发给其它服务器。</p><p>使用代理的主要目的是：</p><ul><li>缓存</li><li>负载均衡</li><li>网络访问控制</li><li>访问日志记录</li></ul><p>代理服务器分为正向代理和反向代理两种：</p><ul><li>用户察觉得到正向代理的存在。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/a314bb79-5b18-4e63-a976-3448bffa6f1b.png" width=""/> </div><br><ul><li>而反向代理一般位于内部网络中，用户察觉不到。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2d09a847-b854-439c-9198-b29c65810944.png" width=""/> </div><br><h4 id="2-网关"><a href="#2-网关" class="headerlink" title="2. 网关"></a>2. 网关</h4><p>与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。</p><h4 id="3-隧道"><a href="#3-隧道" class="headerlink" title="3. 隧道"></a>3. 隧道</h4><p>使用 SSL 等加密手段，在客户端和服务器之间建立一条安全的通信线路。</p><h2 id="六、HTTPS"><a href="#六、HTTPS" class="headerlink" title="六、HTTPS"></a>六、HTTPS</h2><p>HTTP 有以下安全性问题：</p><ul><li>使用明文进行通信，内容可能会被窃听；</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li><li>无法证明报文的完整性，报文有可能遭篡改。</li></ul><p>HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。</p><p>通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ssl-offloading.jpg" width="700"/> </div><br><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><h4 id="1-对称密钥加密"><a href="#1-对称密钥加密" class="headerlink" title="1. 对称密钥加密"></a>1. 对称密钥加密</h4><p>对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。</p><ul><li>优点：运算速度快；</li><li>缺点：无法安全地将密钥传输给通信方。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7fffa4b8-b36d-471f-ad0c-a88ee763bb76.png" width="600"/> </div><br><h4 id="2-非对称密钥加密"><a href="#2-非对称密钥加密" class="headerlink" title="2.非对称密钥加密"></a>2.非对称密钥加密</h4><p>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p><p>公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p><p>非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。</p><ul><li>优点：可以更安全地将公开密钥传输给通信发送方；</li><li>缺点：运算速度慢。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/39ccb299-ee99-4dd1-b8b4-2f9ec9495cb4.png" width="600"/> </div><br><h4 id="3-HTTPS-采用的加密方式"><a href="#3-HTTPS-采用的加密方式" class="headerlink" title="3. HTTPS 采用的加密方式"></a>3. HTTPS 采用的加密方式</h4><p>上面提到对称密钥加密方式的传输效率更高，但是无法安全地将密钥 Secret Key 传输给通信方。而非对称密钥加密方式可以保证传输的安全性，因此我们可以利用非对称密钥加密方式将 Secret Key 传输给通信方。HTTPS 采用混合的加密机制，正是利用了上面提到的方案：</p><ul><li>使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性;</li><li>获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率。（下图中的 Session Key 就是 Secret Key）</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/How-HTTPS-Works.png" width="600"/> </div><br><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>通过使用 <strong>证书</strong> 来对通信方进行认证。</p><p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。</p><p>服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p><p>进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2017-06-11-ca.png" width=""/> </div><br><h3 id="完整性保护"><a href="#完整性保护" class="headerlink" title="完整性保护"></a>完整性保护</h3><p>SSL 提供报文摘要功能来进行完整性保护。</p><p>HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。</p><p>HTTPS 的报文摘要功能之所以安全，是因为它结合了加密和认证这两个操作。试想一下，加密之后的报文，遭到篡改之后，也很难重新计算报文摘要，因为无法轻易获取明文。</p><h3 id="HTTPS-的缺点"><a href="#HTTPS-的缺点" class="headerlink" title="HTTPS 的缺点"></a>HTTPS 的缺点</h3><ul><li>因为需要进行加密解密等过程，因此速度会更慢；</li><li>需要支付证书授权的高额费用。</li></ul><h2 id="七、HTTP-2-0"><a href="#七、HTTP-2-0" class="headerlink" title="七、HTTP&#x2F;2.0"></a>七、HTTP&#x2F;2.0</h2><h3 id="HTTP-1-x-缺陷"><a href="#HTTP-1-x-缺陷" class="headerlink" title="HTTP&#x2F;1.x 缺陷"></a>HTTP&#x2F;1.x 缺陷</h3><p>HTTP&#x2F;1.x 实现简单是以牺牲性能为代价的：</p><ul><li>客户端需要使用多个连接才能实现并发和缩短延迟；</li><li>不会压缩请求和响应首部，从而导致不必要的网络流量；</li><li>不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。</li></ul><h3 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h3><p>HTTP&#x2F;2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/86e6a91d-a285-447a-9345-c5484b8d0c47.png" width="400"/> </div><br><p>在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。</p><ul><li>一个数据流（Stream）都有一个唯一标识符和可选的优先级信息，用于承载双向信息。</li><li>消息（Message）是与逻辑请求或响应对应的完整的一系列帧。</li><li>帧（Frame）是最小的通信单位，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/af198da1-2480-4043-b07f-a3b91a88b815.png" width="600"/> </div><br><h3 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h3><p>HTTP&#x2F;2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e3f1657c-80fc-4dfa-9643-bf51abd201c6.png" width="800"/> </div><br><h3 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h3><p>HTTP&#x2F;1.1 的首部带有大量信息，而且每次都要重复发送。</p><p>HTTP&#x2F;2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。</p><p>不仅如此，HTTP&#x2F;2.0 也使用 Huffman 编码对首部字段进行压缩。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/_u4E0B_u8F7D.png" width="600"/> </div><br><h2 id="八、HTTP-1-1-新特性"><a href="#八、HTTP-1-1-新特性" class="headerlink" title="八、HTTP&#x2F;1.1 新特性"></a>八、HTTP&#x2F;1.1 新特性</h2><p>详细内容请见上文</p><ul><li>默认是长连接</li><li>支持流水线</li><li>支持同时打开多个 TCP 连接</li><li>支持虚拟主机</li><li>新增状态码 100</li><li>支持分块传输编码</li><li>新增缓存处理指令 max-age</li></ul><h2 id="九、GET-和-POST-比较"><a href="#九、GET-和-POST-比较" class="headerlink" title="九、GET 和 POST 比较"></a>九、GET 和 POST 比较</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>GET 用于获取资源，而 POST 用于传输实体主体。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。</p><p>因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 <code>中文</code> 会转换为 <code>%E4%B8%AD%E6%96%87</code>，而空格会转换为 <code>%20</code>。POST 参数支持标准字符集。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/test/demo_form.asp?name1=value1&amp;name2=value2</span> <span class="hljs-meta">HTTP/1.1</span><br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">POST <span class="hljs-keyword">/test/</span>demo_form.asp HTTP/<span class="hljs-number">1.1</span><br><span class="hljs-symbol">Host:</span> w3schools.com<br>name1=value1<span class="hljs-variable">&amp;name2</span>=value2<br></code></pre></td></tr></table></figure><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</p><p>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</p><p>安全的方法除了 GET 之外还有：HEAD、OPTIONS。</p><p>不安全的方法除了 POST 之外还有 PUT、DELETE。</p><h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><p>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。</p><p>所有的安全方法也都是幂等的。</p><p>在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。</p><p>GET &#x2F;pageX HTTP&#x2F;1.1 是幂等的，连续调用多次，客户端接收到的结果都是一样的：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /pageX HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">GET</span> /pageX HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">GET</span> /pageX HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">GET</span> /pageX HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>POST &#x2F;add_row HTTP&#x2F;1.1 不是幂等的，如果调用多次，就会增加多行记录：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /add_row HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>   -&gt; Adds a <span class="hljs-number">1</span>nd row<br><span class="hljs-attribute">POST</span> /add_row HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>   -&gt; Adds a <span class="hljs-number">2</span>nd row<br><span class="hljs-attribute">POST</span> /add_row HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>   -&gt; Adds a <span class="hljs-number">3</span>rd row<br></code></pre></td></tr></table></figure><p>DELETE &#x2F;idX&#x2F;delete HTTP&#x2F;1.1 是幂等的，即使不同的请求接收到的状态码不一样：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DELETE</span> /idX/<span class="hljs-keyword">delete</span> HTTP/<span class="hljs-number">1.1</span>   -&gt; <span class="hljs-keyword">Returns</span> <span class="hljs-number">200</span> <span class="hljs-keyword">if</span> idX <span class="hljs-keyword">exists</span><br><span class="hljs-keyword">DELETE</span> /idX/<span class="hljs-keyword">delete</span> HTTP/<span class="hljs-number">1.1</span>   -&gt; <span class="hljs-keyword">Returns</span> <span class="hljs-number">404</span> <span class="hljs-keyword">as</span> it just got deleted<br><span class="hljs-keyword">DELETE</span> /idX/<span class="hljs-keyword">delete</span> HTTP/<span class="hljs-number">1.1</span>   -&gt; <span class="hljs-keyword">Returns</span> <span class="hljs-number">404</span><br></code></pre></td></tr></table></figure><h3 id="可缓存"><a href="#可缓存" class="headerlink" title="可缓存"></a>可缓存</h3><p>如果要对响应进行缓存，需要满足以下条件：</p><ul><li>请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。</li><li>响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。</li><li>响应报文的 Cache-Control 首部字段没有指定不进行缓存。</li></ul><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p>为了阐述 POST 和 GET 的另一个区别，需要先了解 XMLHttpRequest：</p><blockquote><p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p></blockquote><ul><li>在使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。</li><li>而 GET 方法 Header 和 Data 会一起发送。</li></ul><h2 id="九、HTTP请求历程"><a href="#九、HTTP请求历程" class="headerlink" title="九、HTTP请求历程"></a>九、HTTP请求历程</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>浏览器进行DNS域名解析，得到对应的IP地址</li><li>根据这个IP，找到对应的服务器建立连接（三次握手）</li><li>建立TCP连接后发起HTTP请求（一个完整的http请求报文）</li><li>服务器响应HTTP请求，浏览器得到html代码（服务器如何响应）</li><li>浏览器解析html代码，并请求html代码中的资源（如js、css、图片等）</li><li>浏览器对页面进行渲染呈现给用户</li><li>服务器关闭TCP连接（四次挥手）</li></ol><h3 id="过程详解"><a href="#过程详解" class="headerlink" title="过程详解"></a>过程详解</h3><ol><li>DNS解析</li></ol><ul><li>首先会搜索浏览器自身的DNS缓存（缓存时间比较短，大概只有1分钟，且只能容纳1000条缓存）</li><li>如果浏览器自身的缓存里面没有找到，那么浏览器会搜索系统自身的DNS缓存</li><li>如果还没有找到，那么尝试从 hosts文件里面去找</li><li>在前面三个过程都没获取到的情况下，浏览器就会发起一个DNS的系统调用，就会向本地配置的首选DNS服务器（一般是电信运营商提供的，也可以使用像Google提供的DNS服务器）发起域名解析请求（通过的是UDP协议向DNS的53端口发起请求，这个请求是递归的请求，也就是运营商的DNS服务器必须得提供给我们该域名的IP地址）</li></ul><ol start="2"><li>TCP三次握手<br>三次握手完成之后这个TCP连接就进入状态，就可以发起http请求了。</li><li>发起HTTP请求<br>HTTP是一个客户端和服务器端请求和应答的标准（TCP）。客户端是终端用户，服务器端是网站。通过使用Web浏览器、网络爬虫或者其它的工具，客户端发起一个到服务器上指定端口（默认端口为80）的HTTP请求。</li><li>服务器响应HTTP请求<br>接收到HTTP请求之后，就轮到负载均衡登场了，它位于网站的最前端，把短时间内较高的访问量分摊到不同机器上处理。负载均衡方案有软件、硬件两种。软件方案常见的就是NGINX了。<br>Nginx的作用主要有两个1，处理静态文件请求，2转发请求给后端服务器。然后后端服务器查询数据库返回数据。数据返回给客户端仍然通过HTTP协议传输。<br>HTTP响应报文主要由状态行、响应头部、空行以及响应数据组成。</li><li>浏览器解析<br>浏览器拿到index.html文件后，就开始解析其中的html代码，遇到js&#x2F;css&#x2F;image等静态资源时，就向服务器端去请求下载（会使用多线程下载，每个浏览器的线程数不一样），这个时候就用上keep-alive特性了，建立一次HTTP连接，可以请求多个资源，下载资源的顺序就是按照代码里的顺序，但是由于每个资源大小不一样，而浏览器又多线程请求请求资源，所以从下图看出，这里显示的顺序并不一定是代码里面的顺序。<br>浏览器在请求静态资源时（在未过期的情况下），向服务器端发起一个http请求（询问自从上一次修改时间到现在有没有对资源进行修改），如果服务器端返回304状态码（告诉浏览器服务器端没有修改），那么浏览器会直接读取本地的该资源的缓存文件。</li><li>浏览器进行页面渲染<br>最后，浏览器利用自己内部的工作机制，把请求的静态资源和html代码进行渲染，渲染之后呈现给用户，浏览器是一个边解析边渲染的过程。<br>首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。</li><li>服务器关闭TCP连接<br>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接。而关闭TCP连接就需要进行<strong>四次挥手</strong>。<br>中断连接端可以是客户端，也可以是服务器端。<br>Powered by <a href="https://github.com/CyC2018/CS-Notes">CS-NOTES</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>HTTP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2021/07/14/hello-hexo/"/>
    <url>/2021/07/14/hello-hexo/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
